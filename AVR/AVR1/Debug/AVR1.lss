
AVR1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000f18  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000002  00800060  00000f18  00000fac  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          000000f2  00800062  00800062  00000fae  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000fae  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000fe0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000001c8  00000000  00000000  0000101c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001c95  00000000  00000000  000011e4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000c43  00000000  00000000  00002e79  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000f3a  00000000  00000000  00003abc  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000400  00000000  00000000  000049f8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000671  00000000  00000000  00004df8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000009e2  00000000  00000000  00005469  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000158  00000000  00000000  00005e4b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__ctors_end>
   4:	0c 94 6d 00 	jmp	0xda	; 0xda <__bad_interrupt>
   8:	0c 94 6d 00 	jmp	0xda	; 0xda <__bad_interrupt>
   c:	0c 94 6d 00 	jmp	0xda	; 0xda <__bad_interrupt>
  10:	0c 94 6d 00 	jmp	0xda	; 0xda <__bad_interrupt>
  14:	0c 94 6d 00 	jmp	0xda	; 0xda <__bad_interrupt>
  18:	0c 94 6d 00 	jmp	0xda	; 0xda <__bad_interrupt>
  1c:	0c 94 6d 00 	jmp	0xda	; 0xda <__bad_interrupt>
  20:	0c 94 6d 00 	jmp	0xda	; 0xda <__bad_interrupt>
  24:	0c 94 6d 00 	jmp	0xda	; 0xda <__bad_interrupt>
  28:	0c 94 6d 00 	jmp	0xda	; 0xda <__bad_interrupt>
  2c:	0c 94 55 03 	jmp	0x6aa	; 0x6aa <__vector_11>
  30:	0c 94 6d 00 	jmp	0xda	; 0xda <__bad_interrupt>
  34:	0c 94 6d 00 	jmp	0xda	; 0xda <__bad_interrupt>
  38:	0c 94 6d 00 	jmp	0xda	; 0xda <__bad_interrupt>
  3c:	0c 94 6d 00 	jmp	0xda	; 0xda <__bad_interrupt>
  40:	0c 94 6d 00 	jmp	0xda	; 0xda <__bad_interrupt>
  44:	0c 94 6d 00 	jmp	0xda	; 0xda <__bad_interrupt>
  48:	0c 94 6d 00 	jmp	0xda	; 0xda <__bad_interrupt>
  4c:	0c 94 6d 00 	jmp	0xda	; 0xda <__bad_interrupt>
  50:	0c 94 6d 00 	jmp	0xda	; 0xda <__bad_interrupt>
  54:	08 4a       	sbci	r16, 0xA8	; 168
  56:	d7 3b       	cpi	r29, 0xB7	; 183
  58:	3b ce       	rjmp	.-906    	; 0xfffffcd0 <__eeprom_end+0xff7efcd0>
  5a:	01 6e       	ori	r16, 0xE1	; 225
  5c:	84 bc       	out	0x24, r8	; 36
  5e:	bf fd       	.word	0xfdbf	; ????
  60:	c1 2f       	mov	r28, r17
  62:	3d 6c       	ori	r19, 0xCD	; 205
  64:	74 31       	cpi	r23, 0x14	; 20
  66:	9a bd       	out	0x2a, r25	; 42
  68:	56 83       	std	Z+6, r21	; 0x06
  6a:	3d da       	rcall	.-2950   	; 0xfffff4e6 <__eeprom_end+0xff7ef4e6>
  6c:	3d 00       	.word	0x003d	; ????
  6e:	c7 7f       	andi	r28, 0xF7	; 247
  70:	11 be       	out	0x31, r1	; 49
  72:	d9 e4       	ldi	r29, 0x49	; 73
  74:	bb 4c       	sbci	r27, 0xCB	; 203
  76:	3e 91       	ld	r19, -X
  78:	6b aa       	std	Y+51, r6	; 0x33
  7a:	aa be       	out	0x3a, r10	; 58
  7c:	00 00       	nop
  7e:	00 80       	ld	r0, Z
  80:	3f 05       	cpc	r19, r15
  82:	a8 4c       	sbci	r26, 0xC8	; 200
  84:	cd b2       	in	r12, 0x1d	; 29
  86:	d4 4e       	sbci	r29, 0xE4	; 228
  88:	b9 38       	cpi	r27, 0x89	; 137
  8a:	36 a9       	ldd	r19, Z+54	; 0x36
  8c:	02 0c       	add	r0, r2
  8e:	50 b9       	out	0x00, r21	; 0
  90:	91 86       	std	Z+9, r9	; 0x09
  92:	88 08       	sbc	r8, r8
  94:	3c a6       	std	Y+44, r3	; 0x2c
  96:	aa aa       	std	Y+50, r10	; 0x32
  98:	2a be       	out	0x3a, r2	; 58
  9a:	00 00       	nop
  9c:	00 80       	ld	r0, Z
  9e:	3f 00       	.word	0x003f	; ????

000000a0 <__ctors_end>:
  a0:	11 24       	eor	r1, r1
  a2:	1f be       	out	0x3f, r1	; 63
  a4:	cf e5       	ldi	r28, 0x5F	; 95
  a6:	d4 e0       	ldi	r29, 0x04	; 4
  a8:	de bf       	out	0x3e, r29	; 62
  aa:	cd bf       	out	0x3d, r28	; 61

000000ac <__do_copy_data>:
  ac:	10 e0       	ldi	r17, 0x00	; 0
  ae:	a0 e6       	ldi	r26, 0x60	; 96
  b0:	b0 e0       	ldi	r27, 0x00	; 0
  b2:	e8 e1       	ldi	r30, 0x18	; 24
  b4:	ff e0       	ldi	r31, 0x0F	; 15
  b6:	02 c0       	rjmp	.+4      	; 0xbc <__do_copy_data+0x10>
  b8:	05 90       	lpm	r0, Z+
  ba:	0d 92       	st	X+, r0
  bc:	a2 36       	cpi	r26, 0x62	; 98
  be:	b1 07       	cpc	r27, r17
  c0:	d9 f7       	brne	.-10     	; 0xb8 <__do_copy_data+0xc>

000000c2 <__do_clear_bss>:
  c2:	21 e0       	ldi	r18, 0x01	; 1
  c4:	a2 e6       	ldi	r26, 0x62	; 98
  c6:	b0 e0       	ldi	r27, 0x00	; 0
  c8:	01 c0       	rjmp	.+2      	; 0xcc <.do_clear_bss_start>

000000ca <.do_clear_bss_loop>:
  ca:	1d 92       	st	X+, r1

000000cc <.do_clear_bss_start>:
  cc:	a4 35       	cpi	r26, 0x54	; 84
  ce:	b2 07       	cpc	r27, r18
  d0:	e1 f7       	brne	.-8      	; 0xca <.do_clear_bss_loop>
  d2:	0e 94 fd 00 	call	0x1fa	; 0x1fa <main>
  d6:	0c 94 8a 07 	jmp	0xf14	; 0xf14 <_exit>

000000da <__bad_interrupt>:
  da:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000de <lcd_wr_command>:
	lcd_port |= letter;
	sbit(lcd_port,RS);
	cbit(lcd_port,RW);
	sbit(lcd_port,EN);
	_delay_ms(5);
	cbit(lcd_port,EN);
  de:	95 b3       	in	r25, 0x15	; 21
  e0:	9f 70       	andi	r25, 0x0F	; 15
  e2:	95 bb       	out	0x15, r25	; 21
  e4:	95 b3       	in	r25, 0x15	; 21
  e6:	28 2f       	mov	r18, r24
  e8:	20 7f       	andi	r18, 0xF0	; 240
  ea:	92 2b       	or	r25, r18
  ec:	95 bb       	out	0x15, r25	; 21
  ee:	a8 98       	cbi	0x15, 0	; 21
  f0:	a9 98       	cbi	0x15, 1	; 21
  f2:	aa 9a       	sbi	0x15, 2	; 21
  f4:	ef ef       	ldi	r30, 0xFF	; 255
  f6:	f3 e2       	ldi	r31, 0x23	; 35
  f8:	31 97       	sbiw	r30, 0x01	; 1
  fa:	f1 f7       	brne	.-4      	; 0xf8 <lcd_wr_command+0x1a>
  fc:	00 c0       	rjmp	.+0      	; 0xfe <lcd_wr_command+0x20>
  fe:	00 00       	nop
 100:	aa 98       	cbi	0x15, 2	; 21
 102:	95 b3       	in	r25, 0x15	; 21
 104:	9f 70       	andi	r25, 0x0F	; 15
 106:	95 bb       	out	0x15, r25	; 21
 108:	95 b3       	in	r25, 0x15	; 21
 10a:	82 95       	swap	r24
 10c:	80 7f       	andi	r24, 0xF0	; 240
 10e:	89 2b       	or	r24, r25
 110:	85 bb       	out	0x15, r24	; 21
 112:	a8 98       	cbi	0x15, 0	; 21
 114:	a9 98       	cbi	0x15, 1	; 21
 116:	aa 9a       	sbi	0x15, 2	; 21
 118:	8f ef       	ldi	r24, 0xFF	; 255
 11a:	93 e2       	ldi	r25, 0x23	; 35
 11c:	01 97       	sbiw	r24, 0x01	; 1
 11e:	f1 f7       	brne	.-4      	; 0x11c <lcd_wr_command+0x3e>
 120:	00 c0       	rjmp	.+0      	; 0x122 <lcd_wr_command+0x44>
 122:	00 00       	nop
 124:	aa 98       	cbi	0x15, 2	; 21
 126:	08 95       	ret

00000128 <lcd_port_config>:
 128:	84 b3       	in	r24, 0x14	; 20
 12a:	87 6f       	ori	r24, 0xF7	; 247
 12c:	84 bb       	out	0x14, r24	; 20
 12e:	85 b3       	in	r24, 0x15	; 21
 130:	80 78       	andi	r24, 0x80	; 128
 132:	85 bb       	out	0x15, r24	; 21
 134:	08 95       	ret

00000136 <lcd_init>:
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 136:	83 e3       	ldi	r24, 0x33	; 51
 138:	97 e0       	ldi	r25, 0x07	; 7
 13a:	01 97       	sbiw	r24, 0x01	; 1
 13c:	f1 f7       	brne	.-4      	; 0x13a <lcd_init+0x4>
//Function to Reset LCD
static void lcd_set_4bit()
{
	_delay_ms(1);

	cbit(lcd_port,RS);				//RS=0 --- Command Input
 13e:	a8 98       	cbi	0x15, 0	; 21
	cbit(lcd_port,RW);				//RW=0 --- Writing to LCD
 140:	a9 98       	cbi	0x15, 1	; 21
	lcd_port = 0x30;				//Sending 3
 142:	80 e3       	ldi	r24, 0x30	; 48
 144:	85 bb       	out	0x15, r24	; 21
	sbit(lcd_port,EN);				//Set Enable Pin
 146:	aa 9a       	sbi	0x15, 2	; 21
 148:	ef ef       	ldi	r30, 0xFF	; 255
 14a:	f3 e2       	ldi	r31, 0x23	; 35
 14c:	31 97       	sbiw	r30, 0x01	; 1
 14e:	f1 f7       	brne	.-4      	; 0x14c <lcd_init+0x16>
 150:	00 c0       	rjmp	.+0      	; 0x152 <lcd_init+0x1c>
 152:	00 00       	nop
	_delay_ms(5);					//Delay
	cbit(lcd_port,EN);				//Clear Enable Pin
 154:	aa 98       	cbi	0x15, 2	; 21
 156:	e3 e3       	ldi	r30, 0x33	; 51
 158:	f7 e0       	ldi	r31, 0x07	; 7
 15a:	31 97       	sbiw	r30, 0x01	; 1
 15c:	f1 f7       	brne	.-4      	; 0x15a <lcd_init+0x24>

	_delay_ms(1);

	cbit(lcd_port,RS);				//RS=0 --- Command Input
 15e:	a8 98       	cbi	0x15, 0	; 21
	cbit(lcd_port,RW);				//RW=0 --- Writing to LCD
 160:	a9 98       	cbi	0x15, 1	; 21
	lcd_port = 0x30;				//Sending 3
 162:	85 bb       	out	0x15, r24	; 21
	sbit(lcd_port,EN);				//Set Enable Pin
 164:	aa 9a       	sbi	0x15, 2	; 21
 166:	ef ef       	ldi	r30, 0xFF	; 255
 168:	f3 e2       	ldi	r31, 0x23	; 35
 16a:	31 97       	sbiw	r30, 0x01	; 1
 16c:	f1 f7       	brne	.-4      	; 0x16a <lcd_init+0x34>
 16e:	00 c0       	rjmp	.+0      	; 0x170 <lcd_init+0x3a>
 170:	00 00       	nop
	_delay_ms(5);					//Delay
	cbit(lcd_port,EN);				//Clear Enable Pin
 172:	aa 98       	cbi	0x15, 2	; 21
 174:	e3 e3       	ldi	r30, 0x33	; 51
 176:	f7 e0       	ldi	r31, 0x07	; 7
 178:	31 97       	sbiw	r30, 0x01	; 1
 17a:	f1 f7       	brne	.-4      	; 0x178 <lcd_init+0x42>

	_delay_ms(1);

	cbit(lcd_port,RS);				//RS=0 --- Command Input
 17c:	a8 98       	cbi	0x15, 0	; 21
	cbit(lcd_port,RW);				//RW=0 --- Writing to LCD
 17e:	a9 98       	cbi	0x15, 1	; 21
	lcd_port = 0x30;				//Sending 3
 180:	85 bb       	out	0x15, r24	; 21
	sbit(lcd_port,EN);				//Set Enable Pin
 182:	aa 9a       	sbi	0x15, 2	; 21
 184:	8f ef       	ldi	r24, 0xFF	; 255
 186:	93 e2       	ldi	r25, 0x23	; 35
 188:	01 97       	sbiw	r24, 0x01	; 1
 18a:	f1 f7       	brne	.-4      	; 0x188 <lcd_init+0x52>
 18c:	00 c0       	rjmp	.+0      	; 0x18e <lcd_init+0x58>
 18e:	00 00       	nop
	_delay_ms(5);					//Delay
	cbit(lcd_port,EN);				//Clear Enable Pin
 190:	aa 98       	cbi	0x15, 2	; 21
 192:	e3 e3       	ldi	r30, 0x33	; 51
 194:	f7 e0       	ldi	r31, 0x07	; 7
 196:	31 97       	sbiw	r30, 0x01	; 1
 198:	f1 f7       	brne	.-4      	; 0x196 <lcd_init+0x60>

	_delay_ms(1);

	cbit(lcd_port,RS);				//RS=0 --- Command Input
 19a:	a8 98       	cbi	0x15, 0	; 21
	cbit(lcd_port,RW);				//RW=0 --- Writing to LCD
 19c:	a9 98       	cbi	0x15, 1	; 21
	lcd_port = 0x20;				//Sending 2 to initialise LCD 4-bit mode
 19e:	80 e2       	ldi	r24, 0x20	; 32
 1a0:	85 bb       	out	0x15, r24	; 21
	sbit(lcd_port,EN);				//Set Enable Pin
 1a2:	aa 9a       	sbi	0x15, 2	; 21
 1a4:	8f ef       	ldi	r24, 0xFF	; 255
 1a6:	93 e2       	ldi	r25, 0x23	; 35
 1a8:	01 97       	sbiw	r24, 0x01	; 1
 1aa:	f1 f7       	brne	.-4      	; 0x1a8 <lcd_init+0x72>
 1ac:	00 c0       	rjmp	.+0      	; 0x1ae <lcd_init+0x78>
 1ae:	00 00       	nop
	_delay_ms(5);					//Delay
	cbit(lcd_port,EN);				//Clear Enable Pin
 1b0:	aa 98       	cbi	0x15, 2	; 21
 1b2:	e3 e3       	ldi	r30, 0x33	; 51
 1b4:	f7 e0       	ldi	r31, 0x07	; 7
 1b6:	31 97       	sbiw	r30, 0x01	; 1
 1b8:	f1 f7       	brne	.-4      	; 0x1b6 <lcd_init+0x80>
{
	lcd_set_4bit();
	
	_delay_ms(1);

	lcd_wr_command(0x28);			//LCD 4-bit mode and 2 lines.
 1ba:	88 e2       	ldi	r24, 0x28	; 40
 1bc:	0e 94 6f 00 	call	0xde	; 0xde <lcd_wr_command>
	lcd_wr_command(0x01);
 1c0:	81 e0       	ldi	r24, 0x01	; 1
 1c2:	0e 94 6f 00 	call	0xde	; 0xde <lcd_wr_command>
	lcd_wr_command(0x06);
 1c6:	86 e0       	ldi	r24, 0x06	; 6
 1c8:	0e 94 6f 00 	call	0xde	; 0xde <lcd_wr_command>
	lcd_wr_command(0x0E);
 1cc:	8e e0       	ldi	r24, 0x0E	; 14
 1ce:	0e 94 6f 00 	call	0xde	; 0xde <lcd_wr_command>
	lcd_wr_command(0x80);
 1d2:	80 e8       	ldi	r24, 0x80	; 128
 1d4:	0e 94 6f 00 	call	0xde	; 0xde <lcd_wr_command>
 1d8:	08 95       	ret

000001da <port_init>:
int distance;

//Function to initialize ports
void port_init()
{
	motion_pin_config();
 1da:	0e 94 0b 02 	call	0x416	; 0x416 <motion_pin_config>
	lcd_port_config();
 1de:	0e 94 94 00 	call	0x128	; 0x128 <lcd_port_config>
 1e2:	08 95       	ret

000001e4 <init_devices>:
}

void init_devices (void)
{
	cli(); //Clears the global interrupts
 1e4:	f8 94       	cli
	port_init();
 1e6:	0e 94 ed 00 	call	0x1da	; 0x1da <port_init>
	lcd_init();
 1ea:	0e 94 9b 00 	call	0x136	; 0x136 <lcd_init>
	timer1_init();
 1ee:	0e 94 38 03 	call	0x670	; 0x670 <timer1_init>
	uart0_init();
 1f2:	0e 94 4b 03 	call	0x696	; 0x696 <uart0_init>
	sei(); //Enables the global interrupts
 1f6:	78 94       	sei
 1f8:	08 95       	ret

000001fa <main>:
}

int main()
{
 1fa:	cf 93       	push	r28
 1fc:	df 93       	push	r29
 1fe:	00 d0       	rcall	.+0      	; 0x200 <main+0x6>
 200:	00 d0       	rcall	.+0      	; 0x202 <main+0x8>
 202:	cd b7       	in	r28, 0x3d	; 61
 204:	de b7       	in	r29, 0x3e	; 62
	init_devices();
 206:	0e 94 f2 00 	call	0x1e4	; 0x1e4 <init_devices>

	kp=0.1;
 20a:	8d ec       	ldi	r24, 0xCD	; 205
 20c:	9c ec       	ldi	r25, 0xCC	; 204
 20e:	ac ec       	ldi	r26, 0xCC	; 204
 210:	bd e3       	ldi	r27, 0x3D	; 61
 212:	80 93 85 00 	sts	0x0085, r24	; 0x800085 <kp>
 216:	90 93 86 00 	sts	0x0086, r25	; 0x800086 <kp+0x1>
 21a:	a0 93 87 00 	sts	0x0087, r26	; 0x800087 <kp+0x2>
 21e:	b0 93 88 00 	sts	0x0088, r27	; 0x800088 <kp+0x3>
	V=100;
 222:	84 e6       	ldi	r24, 0x64	; 100
 224:	90 e0       	ldi	r25, 0x00	; 0
 226:	90 93 7a 00 	sts	0x007A, r25	; 0x80007a <V+0x1>
 22a:	80 93 79 00 	sts	0x0079, r24	; 0x800079 <V>
	R=3.5;
 22e:	83 e0       	ldi	r24, 0x03	; 3
 230:	90 e0       	ldi	r25, 0x00	; 0
 232:	90 93 80 00 	sts	0x0080, r25	; 0x800080 <R+0x1>
 236:	80 93 7f 00 	sts	0x007F, r24	; 0x80007f <R>
	L=11.5;
 23a:	8b e0       	ldi	r24, 0x0B	; 11
 23c:	90 e0       	ldi	r25, 0x00	; 0
 23e:	90 93 7c 00 	sts	0x007C, r25	; 0x80007c <L+0x1>
 242:	80 93 7b 00 	sts	0x007B, r24	; 0x80007b <L>
		
	while(1)
	{
		//_delay_ms(100);
 		cli();
 246:	f8 94       	cli
 		update_values();
 248:	0e 94 20 02 	call	0x440	; 0x440 <update_values>
 		sei();
 24c:	78 94       	sei
 		
		distance=sqrt(square(y_req-y_current)+square(x_req-x_current));
 24e:	60 91 69 00 	lds	r22, 0x0069	; 0x800069 <y_req>
 252:	70 91 6a 00 	lds	r23, 0x006A	; 0x80006a <y_req+0x1>
 256:	80 91 75 00 	lds	r24, 0x0075	; 0x800075 <y_current>
 25a:	90 91 76 00 	lds	r25, 0x0076	; 0x800076 <y_current+0x1>
 25e:	68 1b       	sub	r22, r24
 260:	79 0b       	sbc	r23, r25
 262:	07 2e       	mov	r0, r23
 264:	00 0c       	add	r0, r0
 266:	88 0b       	sbc	r24, r24
 268:	99 0b       	sbc	r25, r25
 26a:	0e 94 61 05 	call	0xac2	; 0xac2 <__floatsisf>
 26e:	0e 94 16 07 	call	0xe2c	; 0xe2c <square>
 272:	6b 01       	movw	r12, r22
 274:	7c 01       	movw	r14, r24
 276:	80 91 6f 00 	lds	r24, 0x006F	; 0x80006f <x_req>
 27a:	90 91 70 00 	lds	r25, 0x0070	; 0x800070 <x_req+0x1>
 27e:	20 91 67 00 	lds	r18, 0x0067	; 0x800067 <x_current>
 282:	30 91 68 00 	lds	r19, 0x0068	; 0x800068 <x_current+0x1>
 286:	82 1b       	sub	r24, r18
 288:	93 0b       	sbc	r25, r19
 28a:	bc 01       	movw	r22, r24
 28c:	99 0f       	add	r25, r25
 28e:	88 0b       	sbc	r24, r24
 290:	99 0b       	sbc	r25, r25
 292:	0e 94 61 05 	call	0xac2	; 0xac2 <__floatsisf>
 296:	0e 94 16 07 	call	0xe2c	; 0xe2c <square>
 29a:	4b 01       	movw	r8, r22
 29c:	5c 01       	movw	r10, r24
 29e:	a5 01       	movw	r20, r10
 2a0:	94 01       	movw	r18, r8
 2a2:	c7 01       	movw	r24, r14
 2a4:	b6 01       	movw	r22, r12
 2a6:	0e 94 d4 03 	call	0x7a8	; 0x7a8 <__addsf3>
 2aa:	0e 94 d6 06 	call	0xdac	; 0xdac <sqrt>
 2ae:	0e 94 29 05 	call	0xa52	; 0xa52 <__fixsfsi>
 2b2:	7b 01       	movw	r14, r22
 2b4:	70 93 74 00 	sts	0x0074, r23	; 0x800074 <distance+0x1>
 2b8:	60 93 73 00 	sts	0x0073, r22	; 0x800073 <distance>
		float er2=theta_current-theta_req; //-360 to 360
 2bc:	60 91 83 00 	lds	r22, 0x0083	; 0x800083 <theta_current>
 2c0:	70 91 84 00 	lds	r23, 0x0084	; 0x800084 <theta_current+0x1>
 2c4:	80 91 81 00 	lds	r24, 0x0081	; 0x800081 <theta_req>
 2c8:	90 91 82 00 	lds	r25, 0x0082	; 0x800082 <theta_req+0x1>
 2cc:	68 1b       	sub	r22, r24
 2ce:	79 0b       	sbc	r23, r25
 2d0:	07 2e       	mov	r0, r23
 2d2:	00 0c       	add	r0, r0
 2d4:	88 0b       	sbc	r24, r24
 2d6:	99 0b       	sbc	r25, r25
 2d8:	0e 94 61 05 	call	0xac2	; 0xac2 <__floatsisf>
		
		er2 = atan2(sin(er2*3.14/180), cos(er2*3.14/180))*(180/3.14); //-180 to 180
 2dc:	23 ec       	ldi	r18, 0xC3	; 195
 2de:	35 ef       	ldi	r19, 0xF5	; 245
 2e0:	48 e4       	ldi	r20, 0x48	; 72
 2e2:	50 e4       	ldi	r21, 0x40	; 64
 2e4:	0e 94 5b 06 	call	0xcb6	; 0xcb6 <__mulsf3>
 2e8:	20 e0       	ldi	r18, 0x00	; 0
 2ea:	30 e0       	ldi	r19, 0x00	; 0
 2ec:	44 e3       	ldi	r20, 0x34	; 52
 2ee:	53 e4       	ldi	r21, 0x43	; 67
 2f0:	0e 94 b7 04 	call	0x96e	; 0x96e <__divsf3>
 2f4:	4b 01       	movw	r8, r22
 2f6:	5c 01       	movw	r10, r24
 2f8:	0e 94 b2 04 	call	0x964	; 0x964 <cos>
 2fc:	2b 01       	movw	r4, r22
 2fe:	3c 01       	movw	r6, r24
 300:	c5 01       	movw	r24, r10
 302:	b4 01       	movw	r22, r8
 304:	0e 94 c8 06 	call	0xd90	; 0xd90 <sin>
 308:	a3 01       	movw	r20, r6
 30a:	92 01       	movw	r18, r4
 30c:	0e 94 53 04 	call	0x8a6	; 0x8a6 <atan2>
 310:	23 ea       	ldi	r18, 0xA3	; 163
 312:	3c e4       	ldi	r19, 0x4C	; 76
 314:	45 e6       	ldi	r20, 0x65	; 101
 316:	52 e4       	ldi	r21, 0x42	; 66
 318:	0e 94 5b 06 	call	0xcb6	; 0xcb6 <__mulsf3>
		w=kp*er2;
 31c:	20 91 85 00 	lds	r18, 0x0085	; 0x800085 <kp>
 320:	30 91 86 00 	lds	r19, 0x0086	; 0x800086 <kp+0x1>
 324:	40 91 87 00 	lds	r20, 0x0087	; 0x800087 <kp+0x2>
 328:	50 91 88 00 	lds	r21, 0x0088	; 0x800088 <kp+0x3>
 32c:	0e 94 5b 06 	call	0xcb6	; 0xcb6 <__mulsf3>
 330:	4b 01       	movw	r8, r22
 332:	5c 01       	movw	r10, r24
 334:	60 93 6b 00 	sts	0x006B, r22	; 0x80006b <w>
 338:	70 93 6c 00 	sts	0x006C, r23	; 0x80006c <w+0x1>
 33c:	80 93 6d 00 	sts	0x006D, r24	; 0x80006d <w+0x2>
 340:	90 93 6e 00 	sts	0x006E, r25	; 0x80006e <w+0x3>
		
		if(distance>50)
 344:	83 e3       	ldi	r24, 0x33	; 51
 346:	e8 16       	cp	r14, r24
 348:	f1 04       	cpc	r15, r1
 34a:	0c f4       	brge	.+2      	; 0x34e <main+0x154>
 34c:	5b c0       	rjmp	.+182    	; 0x404 <__LOCK_REGION_LENGTH__+0x4>
		{
			//lcd_home();
			//lcd_string("left   ");
			v_left=((2*V+w*L)/(2*R));
 34e:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <V>
 352:	90 91 7a 00 	lds	r25, 0x007A	; 0x80007a <V+0x1>
 356:	88 0f       	add	r24, r24
 358:	99 1f       	adc	r25, r25
 35a:	bc 01       	movw	r22, r24
 35c:	99 0f       	add	r25, r25
 35e:	88 0b       	sbc	r24, r24
 360:	99 0b       	sbc	r25, r25
 362:	0e 94 61 05 	call	0xac2	; 0xac2 <__floatsisf>
 366:	6b 01       	movw	r12, r22
 368:	7c 01       	movw	r14, r24
 36a:	60 91 7b 00 	lds	r22, 0x007B	; 0x80007b <L>
 36e:	70 91 7c 00 	lds	r23, 0x007C	; 0x80007c <L+0x1>
 372:	07 2e       	mov	r0, r23
 374:	00 0c       	add	r0, r0
 376:	88 0b       	sbc	r24, r24
 378:	99 0b       	sbc	r25, r25
 37a:	0e 94 61 05 	call	0xac2	; 0xac2 <__floatsisf>
 37e:	9b 01       	movw	r18, r22
 380:	ac 01       	movw	r20, r24
 382:	c5 01       	movw	r24, r10
 384:	b4 01       	movw	r22, r8
 386:	0e 94 5b 06 	call	0xcb6	; 0xcb6 <__mulsf3>
 38a:	4b 01       	movw	r8, r22
 38c:	5c 01       	movw	r10, r24
 38e:	80 91 7f 00 	lds	r24, 0x007F	; 0x80007f <R>
 392:	90 91 80 00 	lds	r25, 0x0080	; 0x800080 <R+0x1>
 396:	88 0f       	add	r24, r24
 398:	99 1f       	adc	r25, r25
 39a:	bc 01       	movw	r22, r24
 39c:	99 0f       	add	r25, r25
 39e:	88 0b       	sbc	r24, r24
 3a0:	99 0b       	sbc	r25, r25
 3a2:	0e 94 61 05 	call	0xac2	; 0xac2 <__floatsisf>
 3a6:	69 83       	std	Y+1, r22	; 0x01
 3a8:	7a 83       	std	Y+2, r23	; 0x02
 3aa:	8b 83       	std	Y+3, r24	; 0x03
 3ac:	9c 83       	std	Y+4, r25	; 0x04
 3ae:	a5 01       	movw	r20, r10
 3b0:	94 01       	movw	r18, r8
 3b2:	c7 01       	movw	r24, r14
 3b4:	b6 01       	movw	r22, r12
 3b6:	0e 94 d4 03 	call	0x7a8	; 0x7a8 <__addsf3>
 3ba:	29 81       	ldd	r18, Y+1	; 0x01
 3bc:	3a 81       	ldd	r19, Y+2	; 0x02
 3be:	4b 81       	ldd	r20, Y+3	; 0x03
 3c0:	5c 81       	ldd	r21, Y+4	; 0x04
 3c2:	0e 94 b7 04 	call	0x96e	; 0x96e <__divsf3>
 3c6:	0e 94 29 05 	call	0xa52	; 0xa52 <__fixsfsi>
 3ca:	76 2e       	mov	r7, r22
 3cc:	60 93 71 00 	sts	0x0071, r22	; 0x800071 <v_left>
 3d0:	70 93 72 00 	sts	0x0072, r23	; 0x800072 <v_left+0x1>
			v_right=((2*V-w*L)/(2*R));
 3d4:	a5 01       	movw	r20, r10
 3d6:	94 01       	movw	r18, r8
 3d8:	c7 01       	movw	r24, r14
 3da:	b6 01       	movw	r22, r12
 3dc:	0e 94 d3 03 	call	0x7a6	; 0x7a6 <__subsf3>
 3e0:	29 81       	ldd	r18, Y+1	; 0x01
 3e2:	3a 81       	ldd	r19, Y+2	; 0x02
 3e4:	4b 81       	ldd	r20, Y+3	; 0x03
 3e6:	5c 81       	ldd	r21, Y+4	; 0x04
 3e8:	0e 94 b7 04 	call	0x96e	; 0x96e <__divsf3>
 3ec:	0e 94 29 05 	call	0xa52	; 0xa52 <__fixsfsi>
 3f0:	60 93 7d 00 	sts	0x007D, r22	; 0x80007d <v_right>
 3f4:	70 93 7e 00 	sts	0x007E, r23	; 0x80007e <v_right+0x1>
			velocity(v_left,v_right);
 3f8:	87 2d       	mov	r24, r7
 3fa:	0e 94 46 03 	call	0x68c	; 0x68c <velocity>
			forward();
 3fe:	0e 94 18 02 	call	0x430	; 0x430 <forward>
 402:	21 cf       	rjmp	.-446    	; 0x246 <main+0x4c>
		}
		
		else
		{
			hard_stop();
 404:	0e 94 1c 02 	call	0x438	; 0x438 <hard_stop>
 408:	1e cf       	rjmp	.-452    	; 0x246 <main+0x4c>

0000040a <motion_set>:
	motion_set(0x01);
}

void soft_right_2 (void)    //Left wheel stationary, Right wheel backward
{
	motion_set(0x08);
 40a:	98 b3       	in	r25, 0x18	; 24
 40c:	90 7f       	andi	r25, 0xF0	; 240
 40e:	8f 70       	andi	r24, 0x0F	; 15
 410:	98 2b       	or	r25, r24
 412:	98 bb       	out	0x18, r25	; 24
 414:	08 95       	ret

00000416 <motion_pin_config>:
 416:	87 b3       	in	r24, 0x17	; 23
 418:	8f 60       	ori	r24, 0x0F	; 15
 41a:	87 bb       	out	0x17, r24	; 23
 41c:	88 b3       	in	r24, 0x18	; 24
 41e:	80 7f       	andi	r24, 0xF0	; 240
 420:	88 bb       	out	0x18, r24	; 24
 422:	81 b3       	in	r24, 0x11	; 17
 424:	80 63       	ori	r24, 0x30	; 48
 426:	81 bb       	out	0x11, r24	; 17
 428:	82 b3       	in	r24, 0x12	; 18
 42a:	80 63       	ori	r24, 0x30	; 48
 42c:	82 bb       	out	0x12, r24	; 18
 42e:	08 95       	ret

00000430 <forward>:
 430:	86 e0       	ldi	r24, 0x06	; 6
 432:	0e 94 05 02 	call	0x40a	; 0x40a <motion_set>
 436:	08 95       	ret

00000438 <hard_stop>:
}

void hard_stop (void)       //hard stop(stop suddenly)
{
	motion_set(0x00);
 438:	80 e0       	ldi	r24, 0x00	; 0
 43a:	0e 94 05 02 	call	0x40a	; 0x40a <motion_set>
 43e:	08 95       	ret

00000440 <update_values>:
	lcd_print(1,5,y_current,3);
	lcd_print(1,9,theta_current,3);
}

void update_values()
{
 440:	9f 92       	push	r9
 442:	af 92       	push	r10
 444:	bf 92       	push	r11
 446:	cf 92       	push	r12
 448:	df 92       	push	r13
 44a:	ef 92       	push	r14
 44c:	ff 92       	push	r15
 44e:	0f 93       	push	r16
 450:	1f 93       	push	r17
 452:	cf 93       	push	r28
 454:	df 93       	push	r29
 456:	cd b7       	in	r28, 0x3d	; 61
 458:	de b7       	in	r29, 0x3e	; 62
 45a:	ca 5a       	subi	r28, 0xAA	; 170
 45c:	d1 09       	sbc	r29, r1
 45e:	0f b6       	in	r0, 0x3f	; 63
 460:	f8 94       	cli
 462:	de bf       	out	0x3e, r29	; 62
 464:	0f be       	out	0x3f, r0	; 63
 466:	cd bf       	out	0x3d, r28	; 61
	char parts[7][10];
	char data_string1[100];
	strcpy(data_string1, data_string);
 468:	6b e8       	ldi	r22, 0x8B	; 139
 46a:	70 e0       	ldi	r23, 0x00	; 0
 46c:	ce 01       	movw	r24, r28
 46e:	89 5b       	subi	r24, 0xB9	; 185
 470:	9f 4f       	sbci	r25, 0xFF	; 255
 472:	0e 94 6c 07 	call	0xed8	; 0xed8 <strcpy>
	
	char *p_start, *p_end;
	char i=0;
 476:	91 2c       	mov	r9, r1
	p_start = data_string1;
 478:	ce 01       	movw	r24, r28
 47a:	89 5b       	subi	r24, 0xB9	; 185
 47c:	9f 4f       	sbci	r25, 0xFF	; 255
 47e:	6c 01       	movw	r12, r24
	
	//display_data_string();
	
		while(1) 
		{
			p_end = strchr(p_start, '/');
 480:	6f e2       	ldi	r22, 0x2F	; 47
 482:	70 e0       	ldi	r23, 0x00	; 0
 484:	c6 01       	movw	r24, r12
 486:	0e 94 61 07 	call	0xec2	; 0xec2 <strchr>
 48a:	5c 01       	movw	r10, r24
			if (p_end)
 48c:	00 97       	sbiw	r24, 0x00	; 0
 48e:	49 f1       	breq	.+82     	; 0x4e2 <__stack+0x83>
			{
				strncpy(parts[i], p_start, p_end-p_start);
 490:	7c 01       	movw	r14, r24
 492:	ec 18       	sub	r14, r12
 494:	fd 08       	sbc	r15, r13
 496:	29 2d       	mov	r18, r9
 498:	30 e0       	ldi	r19, 0x00	; 0
 49a:	89 01       	movw	r16, r18
 49c:	00 0f       	add	r16, r16
 49e:	11 1f       	adc	r17, r17
 4a0:	22 0f       	add	r18, r18
 4a2:	33 1f       	adc	r19, r19
 4a4:	22 0f       	add	r18, r18
 4a6:	33 1f       	adc	r19, r19
 4a8:	22 0f       	add	r18, r18
 4aa:	33 1f       	adc	r19, r19
 4ac:	02 0f       	add	r16, r18
 4ae:	13 1f       	adc	r17, r19
 4b0:	a7 01       	movw	r20, r14
 4b2:	b6 01       	movw	r22, r12
 4b4:	81 e0       	ldi	r24, 0x01	; 1
 4b6:	90 e0       	ldi	r25, 0x00	; 0
 4b8:	8c 0f       	add	r24, r28
 4ba:	9d 1f       	adc	r25, r29
 4bc:	80 0f       	add	r24, r16
 4be:	91 1f       	adc	r25, r17
 4c0:	0e 94 73 07 	call	0xee6	; 0xee6 <strncpy>
				parts[i][p_end-p_start] = 0;
 4c4:	0e 0d       	add	r16, r14
 4c6:	1f 1d       	adc	r17, r15
 4c8:	e1 e0       	ldi	r30, 0x01	; 1
 4ca:	f0 e0       	ldi	r31, 0x00	; 0
 4cc:	ec 0f       	add	r30, r28
 4ce:	fd 1f       	adc	r31, r29
 4d0:	e0 0f       	add	r30, r16
 4d2:	f1 1f       	adc	r31, r17
 4d4:	10 82       	st	Z, r1
				i++;
 4d6:	93 94       	inc	r9
				p_start = p_end + 1;
 4d8:	65 01       	movw	r12, r10
 4da:	9f ef       	ldi	r25, 0xFF	; 255
 4dc:	c9 1a       	sub	r12, r25
 4de:	d9 0a       	sbc	r13, r25
			}
			else
			break;
		}
 4e0:	cf cf       	rjmp	.-98     	; 0x480 <__stack+0x21>
		
	id_var = atoi(parts[0]);	
 4e2:	ce 01       	movw	r24, r28
 4e4:	01 96       	adiw	r24, 0x01	; 1
 4e6:	0e 94 43 07 	call	0xe86	; 0xe86 <atoi>
 4ea:	90 93 78 00 	sts	0x0078, r25	; 0x800078 <id_var+0x1>
 4ee:	80 93 77 00 	sts	0x0077, r24	; 0x800077 <id_var>
	if(id_var==id)	
 4f2:	20 91 60 00 	lds	r18, 0x0060	; 0x800060 <__data_start>
 4f6:	30 91 61 00 	lds	r19, 0x0061	; 0x800061 <__data_start+0x1>
 4fa:	82 17       	cp	r24, r18
 4fc:	93 07       	cpc	r25, r19
 4fe:	09 f0       	breq	.+2      	; 0x502 <__stack+0xa3>
 500:	40 c0       	rjmp	.+128    	; 0x582 <__stack+0x123>
	{
		x_current = atoi(parts[1]);
 502:	ce 01       	movw	r24, r28
 504:	0b 96       	adiw	r24, 0x0b	; 11
 506:	0e 94 43 07 	call	0xe86	; 0xe86 <atoi>
 50a:	90 93 68 00 	sts	0x0068, r25	; 0x800068 <x_current+0x1>
 50e:	80 93 67 00 	sts	0x0067, r24	; 0x800067 <x_current>
		y_current = atoi(parts[2]);
 512:	ce 01       	movw	r24, r28
 514:	45 96       	adiw	r24, 0x15	; 21
 516:	0e 94 43 07 	call	0xe86	; 0xe86 <atoi>
 51a:	90 93 76 00 	sts	0x0076, r25	; 0x800076 <y_current+0x1>
 51e:	80 93 75 00 	sts	0x0075, r24	; 0x800075 <y_current>
		theta_current = abs(atoi(parts[3])-360+180-360); //(0)-(360)
 522:	ce 01       	movw	r24, r28
 524:	4f 96       	adiw	r24, 0x1f	; 31
 526:	0e 94 43 07 	call	0xe86	; 0xe86 <atoi>
 52a:	8c 51       	subi	r24, 0x1C	; 28
 52c:	92 40       	sbci	r25, 0x02	; 2
 52e:	9c 01       	movw	r18, r24
 530:	22 f4       	brpl	.+8      	; 0x53a <__stack+0xdb>
 532:	22 27       	eor	r18, r18
 534:	33 27       	eor	r19, r19
 536:	28 1b       	sub	r18, r24
 538:	39 0b       	sbc	r19, r25
 53a:	30 93 84 00 	sts	0x0084, r19	; 0x800084 <theta_current+0x1>
 53e:	20 93 83 00 	sts	0x0083, r18	; 0x800083 <theta_current>
		x_req = atoi(parts[4]);
 542:	ce 01       	movw	r24, r28
 544:	89 96       	adiw	r24, 0x29	; 41
 546:	0e 94 43 07 	call	0xe86	; 0xe86 <atoi>
 54a:	90 93 70 00 	sts	0x0070, r25	; 0x800070 <x_req+0x1>
 54e:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <x_req>
		y_req = atoi(parts[5]);
 552:	ce 01       	movw	r24, r28
 554:	c3 96       	adiw	r24, 0x33	; 51
 556:	0e 94 43 07 	call	0xe86	; 0xe86 <atoi>
 55a:	90 93 6a 00 	sts	0x006A, r25	; 0x80006a <y_req+0x1>
 55e:	80 93 69 00 	sts	0x0069, r24	; 0x800069 <y_req>
		theta_req = abs(atoi(parts[6])-180-360); //(0)-(360)
 562:	ce 01       	movw	r24, r28
 564:	cd 96       	adiw	r24, 0x3d	; 61
 566:	0e 94 43 07 	call	0xe86	; 0xe86 <atoi>
 56a:	8c 51       	subi	r24, 0x1C	; 28
 56c:	92 40       	sbci	r25, 0x02	; 2
 56e:	9c 01       	movw	r18, r24
 570:	22 f4       	brpl	.+8      	; 0x57a <__stack+0x11b>
 572:	22 27       	eor	r18, r18
 574:	33 27       	eor	r19, r19
 576:	28 1b       	sub	r18, r24
 578:	39 0b       	sbc	r19, r25
 57a:	30 93 82 00 	sts	0x0082, r19	; 0x800082 <theta_req+0x1>
 57e:	20 93 81 00 	sts	0x0081, r18	; 0x800081 <theta_req>
	lcd_print(1,13,theta_current,3);
	lcd_print(2,5,x_req,3);
	lcd_print(2,9,y_req,3);
	lcd_print(2,13,theta_req,3);
	*/
}
 582:	c6 55       	subi	r28, 0x56	; 86
 584:	df 4f       	sbci	r29, 0xFF	; 255
 586:	0f b6       	in	r0, 0x3f	; 63
 588:	f8 94       	cli
 58a:	de bf       	out	0x3e, r29	; 62
 58c:	0f be       	out	0x3f, r0	; 63
 58e:	cd bf       	out	0x3d, r28	; 61
 590:	df 91       	pop	r29
 592:	cf 91       	pop	r28
 594:	1f 91       	pop	r17
 596:	0f 91       	pop	r16
 598:	ff 90       	pop	r15
 59a:	ef 90       	pop	r14
 59c:	df 90       	pop	r13
 59e:	cf 90       	pop	r12
 5a0:	bf 90       	pop	r11
 5a2:	af 90       	pop	r10
 5a4:	9f 90       	pop	r9
 5a6:	08 95       	ret

000005a8 <check_id>:

int check_id(char *p_start)
{
 5a8:	9f 92       	push	r9
 5aa:	af 92       	push	r10
 5ac:	bf 92       	push	r11
 5ae:	cf 92       	push	r12
 5b0:	df 92       	push	r13
 5b2:	ef 92       	push	r14
 5b4:	ff 92       	push	r15
 5b6:	0f 93       	push	r16
 5b8:	1f 93       	push	r17
 5ba:	cf 93       	push	r28
 5bc:	df 93       	push	r29
 5be:	cd b7       	in	r28, 0x3d	; 61
 5c0:	de b7       	in	r29, 0x3e	; 62
 5c2:	2a 97       	sbiw	r28, 0x0a	; 10
 5c4:	0f b6       	in	r0, 0x3f	; 63
 5c6:	f8 94       	cli
 5c8:	de bf       	out	0x3e, r29	; 62
 5ca:	0f be       	out	0x3f, r0	; 63
 5cc:	cd bf       	out	0x3d, r28	; 61
 5ce:	5c 01       	movw	r10, r24
		//char data_string1[10];
		//strcpy(data_string1, data_string_var);
		
		//char *p_start, *p_end;
		char *p_end;
		char i=0;
 5d0:	91 2c       	mov	r9, r1
		
		//display_data_string();
		
		while(1)
		{
			p_end = strchr(p_start, '/');
 5d2:	6f e2       	ldi	r22, 0x2F	; 47
 5d4:	70 e0       	ldi	r23, 0x00	; 0
 5d6:	c5 01       	movw	r24, r10
 5d8:	0e 94 61 07 	call	0xec2	; 0xec2 <strchr>
 5dc:	6c 01       	movw	r12, r24
			if (p_end)
 5de:	00 97       	sbiw	r24, 0x00	; 0
 5e0:	29 f1       	breq	.+74     	; 0x62c <check_id+0x84>
			{
				strncpy(parts[i], p_start, p_end-p_start);
 5e2:	8c 01       	movw	r16, r24
 5e4:	0a 19       	sub	r16, r10
 5e6:	1b 09       	sbc	r17, r11
 5e8:	29 2d       	mov	r18, r9
 5ea:	30 e0       	ldi	r19, 0x00	; 0
 5ec:	79 01       	movw	r14, r18
 5ee:	ee 0c       	add	r14, r14
 5f0:	ff 1c       	adc	r15, r15
 5f2:	ee 0c       	add	r14, r14
 5f4:	ff 1c       	adc	r15, r15
 5f6:	e2 0e       	add	r14, r18
 5f8:	f3 1e       	adc	r15, r19
 5fa:	a8 01       	movw	r20, r16
 5fc:	b5 01       	movw	r22, r10
 5fe:	81 e0       	ldi	r24, 0x01	; 1
 600:	90 e0       	ldi	r25, 0x00	; 0
 602:	8c 0f       	add	r24, r28
 604:	9d 1f       	adc	r25, r29
 606:	8e 0d       	add	r24, r14
 608:	9f 1d       	adc	r25, r15
 60a:	0e 94 73 07 	call	0xee6	; 0xee6 <strncpy>
				parts[i][p_end-p_start] = 0;
 60e:	0e 0d       	add	r16, r14
 610:	1f 1d       	adc	r17, r15
 612:	e1 e0       	ldi	r30, 0x01	; 1
 614:	f0 e0       	ldi	r31, 0x00	; 0
 616:	ec 0f       	add	r30, r28
 618:	fd 1f       	adc	r31, r29
 61a:	e0 0f       	add	r30, r16
 61c:	f1 1f       	adc	r31, r17
 61e:	10 82       	st	Z, r1
				i++;
 620:	93 94       	inc	r9
				p_start = p_end + 1;
 622:	56 01       	movw	r10, r12
 624:	8f ef       	ldi	r24, 0xFF	; 255
 626:	a8 1a       	sub	r10, r24
 628:	b8 0a       	sbc	r11, r24
			}
			else
			break;
		}
 62a:	d3 cf       	rjmp	.-90     	; 0x5d2 <check_id+0x2a>
		
		if (atoi(parts[0])==id)
 62c:	ce 01       	movw	r24, r28
 62e:	01 96       	adiw	r24, 0x01	; 1
 630:	0e 94 43 07 	call	0xe86	; 0xe86 <atoi>
 634:	21 e0       	ldi	r18, 0x01	; 1
 636:	30 e0       	ldi	r19, 0x00	; 0
 638:	40 91 60 00 	lds	r20, 0x0060	; 0x800060 <__data_start>
 63c:	50 91 61 00 	lds	r21, 0x0061	; 0x800061 <__data_start+0x1>
 640:	84 17       	cp	r24, r20
 642:	95 07       	cpc	r25, r21
 644:	11 f0       	breq	.+4      	; 0x64a <check_id+0xa2>
 646:	20 e0       	ldi	r18, 0x00	; 0
 648:	30 e0       	ldi	r19, 0x00	; 0
		{
			return 1;
		}
	return 0;
 64a:	c9 01       	movw	r24, r18
 64c:	2a 96       	adiw	r28, 0x0a	; 10
 64e:	0f b6       	in	r0, 0x3f	; 63
 650:	f8 94       	cli
 652:	de bf       	out	0x3e, r29	; 62
 654:	0f be       	out	0x3f, r0	; 63
 656:	cd bf       	out	0x3d, r28	; 61
 658:	df 91       	pop	r29
 65a:	cf 91       	pop	r28
 65c:	1f 91       	pop	r17
 65e:	0f 91       	pop	r16
 660:	ff 90       	pop	r15
 662:	ef 90       	pop	r14
 664:	df 90       	pop	r13
 666:	cf 90       	pop	r12
 668:	bf 90       	pop	r11
 66a:	af 90       	pop	r10
 66c:	9f 90       	pop	r9
 66e:	08 95       	ret

00000670 <timer1_init>:
// WGM: 5) PWM 8bit fast, TOP=0x00FF
// desired value: 450Hz
// actual value: 450.000Hz (0.0%)
void timer1_init(void)
{
	TCCR1B = 0x00; //stop
 670:	1e bc       	out	0x2e, r1	; 46
	TCNT1H = 0xFF; //higher byte constant frequency value of PWM cycle
 672:	8f ef       	ldi	r24, 0xFF	; 255
 674:	8d bd       	out	0x2d, r24	; 45
	TCNT1L = 0x01; //lower byte constant frequency value of PWM cycle
 676:	91 e0       	ldi	r25, 0x01	; 1
 678:	9c bd       	out	0x2c, r25	; 44
	OCR1AH = 0x00;
 67a:	1b bc       	out	0x2b, r1	; 43
	OCR1AL = 0xFF;
 67c:	8a bd       	out	0x2a, r24	; 42
	OCR1BH = 0x00;
 67e:	19 bc       	out	0x29, r1	; 41
	OCR1BL = 0xFF;
 680:	88 bd       	out	0x28, r24	; 40
	// ICR1H  = 0x00;
	// ICR1L  = 0xFF;
	TCCR1A = 0xA1;
 682:	81 ea       	ldi	r24, 0xA1	; 161
 684:	8f bd       	out	0x2f, r24	; 47
	TCCR1B = 0x0D; //start Timer
 686:	8d e0       	ldi	r24, 0x0D	; 13
 688:	8e bd       	out	0x2e, r24	; 46
 68a:	08 95       	ret

0000068c <velocity>:
void velocity (unsigned char left_motor, unsigned char right_motor)
{
	//lcd_print(1,8,left_motor,3);
	//lcd_print(1,12,right_motor,3);
	
	OCR1AH = 0x00;
 68c:	1b bc       	out	0x2b, r1	; 43
	OCR1BH = 0x00;
 68e:	19 bc       	out	0x29, r1	; 41
	
	if(0<=left_motor && left_motor<=255)
	{
		OCR1AL = left_motor;     // duty cycle 'ON' period of PWM out for Left motor
 690:	8a bd       	out	0x2a, r24	; 42
		lcd_string("Error 2");
	}

	if(0<=right_motor && right_motor<=255)
	{
		OCR1BL = right_motor;     // duty cycle 'ON' period of PWM out for Right motor
 692:	68 bd       	out	0x28, r22	; 40
 694:	08 95       	ret

00000696 <uart0_init>:
char size: 8 bit
parity: Disabled
*/
void uart0_init(void)
{
 UCSRB = 0x00; //disable while setting baud rate
 696:	1a b8       	out	0x0a, r1	; 10
 UCSRA = 0x00;
 698:	1b b8       	out	0x0b, r1	; 11
 UCSRC = 0x86;
 69a:	86 e8       	ldi	r24, 0x86	; 134
 69c:	80 bd       	out	0x20, r24	; 32
 UBRRL = 0x2F; //set baud rate lo  //67 is for 16MHz 9600 baudrate
 69e:	8f e2       	ldi	r24, 0x2F	; 47
 6a0:	89 b9       	out	0x09, r24	; 9
 UBRRH = 0x00; //set baud rate hi
 6a2:	10 bc       	out	0x20, r1	; 32
 UCSRB = 0x98; 
 6a4:	88 e9       	ldi	r24, 0x98	; 152
 6a6:	8a b9       	out	0x0a, r24	; 10
 6a8:	08 95       	ret

000006aa <__vector_11>:
}

//ISR(SIG_UART_RECV)  		// ISR for receive complete interrupt //, ISR_NOBLOCK
ISR(USART_RXC_vect)
{
 6aa:	1f 92       	push	r1
 6ac:	0f 92       	push	r0
 6ae:	0f b6       	in	r0, 0x3f	; 63
 6b0:	0f 92       	push	r0
 6b2:	11 24       	eor	r1, r1
 6b4:	2f 93       	push	r18
 6b6:	3f 93       	push	r19
 6b8:	4f 93       	push	r20
 6ba:	5f 93       	push	r21
 6bc:	6f 93       	push	r22
 6be:	7f 93       	push	r23
 6c0:	8f 93       	push	r24
 6c2:	9f 93       	push	r25
 6c4:	af 93       	push	r26
 6c6:	bf 93       	push	r27
 6c8:	ef 93       	push	r30
 6ca:	ff 93       	push	r31
	data = UDR; 				//making copy of data from UDR0 in 'data' variable
 6cc:	8c b1       	in	r24, 0x0c	; 12
 6ce:	80 93 ef 00 	sts	0x00EF, r24	; 0x8000ef <data>
	
	if (data == 0x2E) // ascii of .
 6d2:	80 91 ef 00 	lds	r24, 0x00EF	; 0x8000ef <data>
 6d6:	8e 32       	cpi	r24, 0x2E	; 46
 6d8:	61 f4       	brne	.+24     	; 0x6f2 <__vector_11+0x48>
	{
		i=0;
 6da:	10 92 66 00 	sts	0x0066, r1	; 0x800066 <i+0x1>
 6de:	10 92 65 00 	sts	0x0065, r1	; 0x800065 <i>
		j=0;
 6e2:	10 92 64 00 	sts	0x0064, r1	; 0x800064 <j+0x1>
 6e6:	10 92 63 00 	sts	0x0063, r1	; 0x800063 <j>
		append_on = 1;
 6ea:	81 e0       	ldi	r24, 0x01	; 1
 6ec:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__data_end>
 6f0:	23 c0       	rjmp	.+70     	; 0x738 <__vector_11+0x8e>
	}
	
	else if (append_on==1)
 6f2:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__data_end>
 6f6:	81 30       	cpi	r24, 0x01	; 1
 6f8:	f9 f4       	brne	.+62     	; 0x738 <__vector_11+0x8e>
	{
		data_string_var[i]=data;
 6fa:	e0 91 65 00 	lds	r30, 0x0065	; 0x800065 <i>
 6fe:	f0 91 66 00 	lds	r31, 0x0066	; 0x800066 <i+0x1>
 702:	80 91 ef 00 	lds	r24, 0x00EF	; 0x8000ef <data>
 706:	e0 51       	subi	r30, 0x10	; 16
 708:	ff 4f       	sbci	r31, 0xFF	; 255
 70a:	80 83       	st	Z, r24
		i++;
 70c:	80 91 65 00 	lds	r24, 0x0065	; 0x800065 <i>
 710:	90 91 66 00 	lds	r25, 0x0066	; 0x800066 <i+0x1>
 714:	01 96       	adiw	r24, 0x01	; 1
 716:	90 93 66 00 	sts	0x0066, r25	; 0x800066 <i+0x1>
 71a:	80 93 65 00 	sts	0x0065, r24	; 0x800065 <i>
	 
	 //count the number of /
	 if (data == 0x2F) // ascii of /
 71e:	80 91 ef 00 	lds	r24, 0x00EF	; 0x8000ef <data>
 722:	8f 32       	cpi	r24, 0x2F	; 47
 724:	49 f4       	brne	.+18     	; 0x738 <__vector_11+0x8e>
	 {
		 j++; 
 726:	80 91 63 00 	lds	r24, 0x0063	; 0x800063 <j>
 72a:	90 91 64 00 	lds	r25, 0x0064	; 0x800064 <j+0x1>
 72e:	01 96       	adiw	r24, 0x01	; 1
 730:	90 93 64 00 	sts	0x0064, r25	; 0x800064 <j+0x1>
 734:	80 93 63 00 	sts	0x0063, r24	; 0x800063 <j>
	 }
	}
	
	//checks to see if id matches
	if (j==1)
 738:	80 91 63 00 	lds	r24, 0x0063	; 0x800063 <j>
 73c:	90 91 64 00 	lds	r25, 0x0064	; 0x800064 <j+0x1>
 740:	01 97       	sbiw	r24, 0x01	; 1
 742:	31 f4       	brne	.+12     	; 0x750 <__vector_11+0xa6>
	{
		append_on = check_id(data_string_var); 
 744:	80 ef       	ldi	r24, 0xF0	; 240
 746:	90 e0       	ldi	r25, 0x00	; 0
 748:	0e 94 d4 02 	call	0x5a8	; 0x5a8 <check_id>
 74c:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__data_end>
	}
	
	//checks to see if entire string is received, if yes save it
	if (j==7 && append_on==1)
 750:	80 91 63 00 	lds	r24, 0x0063	; 0x800063 <j>
 754:	90 91 64 00 	lds	r25, 0x0064	; 0x800064 <j+0x1>
 758:	07 97       	sbiw	r24, 0x07	; 7
 75a:	a1 f4       	brne	.+40     	; 0x784 <__vector_11+0xda>
 75c:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__data_end>
 760:	81 30       	cpi	r24, 0x01	; 1
 762:	81 f4       	brne	.+32     	; 0x784 <__vector_11+0xda>
	{
		i=0;
 764:	10 92 66 00 	sts	0x0066, r1	; 0x800066 <i+0x1>
 768:	10 92 65 00 	sts	0x0065, r1	; 0x800065 <i>
		j=0;
 76c:	10 92 64 00 	sts	0x0064, r1	; 0x800064 <j+0x1>
 770:	10 92 63 00 	sts	0x0063, r1	; 0x800063 <j>
		append_on=0;
 774:	10 92 62 00 	sts	0x0062, r1	; 0x800062 <__data_end>
		strcpy(data_string, data_string_var); //Entire string received!! Save it!!
 778:	60 ef       	ldi	r22, 0xF0	; 240
 77a:	70 e0       	ldi	r23, 0x00	; 0
 77c:	8b e8       	ldi	r24, 0x8B	; 139
 77e:	90 e0       	ldi	r25, 0x00	; 0
 780:	0e 94 6c 07 	call	0xed8	; 0xed8 <strcpy>
	}
 784:	ff 91       	pop	r31
 786:	ef 91       	pop	r30
 788:	bf 91       	pop	r27
 78a:	af 91       	pop	r26
 78c:	9f 91       	pop	r25
 78e:	8f 91       	pop	r24
 790:	7f 91       	pop	r23
 792:	6f 91       	pop	r22
 794:	5f 91       	pop	r21
 796:	4f 91       	pop	r20
 798:	3f 91       	pop	r19
 79a:	2f 91       	pop	r18
 79c:	0f 90       	pop	r0
 79e:	0f be       	out	0x3f, r0	; 63
 7a0:	0f 90       	pop	r0
 7a2:	1f 90       	pop	r1
 7a4:	18 95       	reti

000007a6 <__subsf3>:
 7a6:	50 58       	subi	r21, 0x80	; 128

000007a8 <__addsf3>:
 7a8:	bb 27       	eor	r27, r27
 7aa:	aa 27       	eor	r26, r26
 7ac:	0e 94 eb 03 	call	0x7d6	; 0x7d6 <__addsf3x>
 7b0:	0c 94 05 06 	jmp	0xc0a	; 0xc0a <__fp_round>
 7b4:	0e 94 cc 05 	call	0xb98	; 0xb98 <__fp_pscA>
 7b8:	38 f0       	brcs	.+14     	; 0x7c8 <__addsf3+0x20>
 7ba:	0e 94 d3 05 	call	0xba6	; 0xba6 <__fp_pscB>
 7be:	20 f0       	brcs	.+8      	; 0x7c8 <__addsf3+0x20>
 7c0:	39 f4       	brne	.+14     	; 0x7d0 <__addsf3+0x28>
 7c2:	9f 3f       	cpi	r25, 0xFF	; 255
 7c4:	19 f4       	brne	.+6      	; 0x7cc <__addsf3+0x24>
 7c6:	26 f4       	brtc	.+8      	; 0x7d0 <__addsf3+0x28>
 7c8:	0c 94 a2 05 	jmp	0xb44	; 0xb44 <__fp_nan>
 7cc:	0e f4       	brtc	.+2      	; 0x7d0 <__addsf3+0x28>
 7ce:	e0 95       	com	r30
 7d0:	e7 fb       	bst	r30, 7
 7d2:	0c 94 9c 05 	jmp	0xb38	; 0xb38 <__fp_inf>

000007d6 <__addsf3x>:
 7d6:	e9 2f       	mov	r30, r25
 7d8:	0e 94 2a 06 	call	0xc54	; 0xc54 <__fp_split3>
 7dc:	58 f3       	brcs	.-42     	; 0x7b4 <__addsf3+0xc>
 7de:	ba 17       	cp	r27, r26
 7e0:	62 07       	cpc	r22, r18
 7e2:	73 07       	cpc	r23, r19
 7e4:	84 07       	cpc	r24, r20
 7e6:	95 07       	cpc	r25, r21
 7e8:	20 f0       	brcs	.+8      	; 0x7f2 <__addsf3x+0x1c>
 7ea:	79 f4       	brne	.+30     	; 0x80a <__addsf3x+0x34>
 7ec:	a6 f5       	brtc	.+104    	; 0x856 <__addsf3x+0x80>
 7ee:	0c 94 4c 06 	jmp	0xc98	; 0xc98 <__fp_zero>
 7f2:	0e f4       	brtc	.+2      	; 0x7f6 <__addsf3x+0x20>
 7f4:	e0 95       	com	r30
 7f6:	0b 2e       	mov	r0, r27
 7f8:	ba 2f       	mov	r27, r26
 7fa:	a0 2d       	mov	r26, r0
 7fc:	0b 01       	movw	r0, r22
 7fe:	b9 01       	movw	r22, r18
 800:	90 01       	movw	r18, r0
 802:	0c 01       	movw	r0, r24
 804:	ca 01       	movw	r24, r20
 806:	a0 01       	movw	r20, r0
 808:	11 24       	eor	r1, r1
 80a:	ff 27       	eor	r31, r31
 80c:	59 1b       	sub	r21, r25
 80e:	99 f0       	breq	.+38     	; 0x836 <__addsf3x+0x60>
 810:	59 3f       	cpi	r21, 0xF9	; 249
 812:	50 f4       	brcc	.+20     	; 0x828 <__addsf3x+0x52>
 814:	50 3e       	cpi	r21, 0xE0	; 224
 816:	68 f1       	brcs	.+90     	; 0x872 <__addsf3x+0x9c>
 818:	1a 16       	cp	r1, r26
 81a:	f0 40       	sbci	r31, 0x00	; 0
 81c:	a2 2f       	mov	r26, r18
 81e:	23 2f       	mov	r18, r19
 820:	34 2f       	mov	r19, r20
 822:	44 27       	eor	r20, r20
 824:	58 5f       	subi	r21, 0xF8	; 248
 826:	f3 cf       	rjmp	.-26     	; 0x80e <__addsf3x+0x38>
 828:	46 95       	lsr	r20
 82a:	37 95       	ror	r19
 82c:	27 95       	ror	r18
 82e:	a7 95       	ror	r26
 830:	f0 40       	sbci	r31, 0x00	; 0
 832:	53 95       	inc	r21
 834:	c9 f7       	brne	.-14     	; 0x828 <__addsf3x+0x52>
 836:	7e f4       	brtc	.+30     	; 0x856 <__addsf3x+0x80>
 838:	1f 16       	cp	r1, r31
 83a:	ba 0b       	sbc	r27, r26
 83c:	62 0b       	sbc	r22, r18
 83e:	73 0b       	sbc	r23, r19
 840:	84 0b       	sbc	r24, r20
 842:	ba f0       	brmi	.+46     	; 0x872 <__addsf3x+0x9c>
 844:	91 50       	subi	r25, 0x01	; 1
 846:	a1 f0       	breq	.+40     	; 0x870 <__addsf3x+0x9a>
 848:	ff 0f       	add	r31, r31
 84a:	bb 1f       	adc	r27, r27
 84c:	66 1f       	adc	r22, r22
 84e:	77 1f       	adc	r23, r23
 850:	88 1f       	adc	r24, r24
 852:	c2 f7       	brpl	.-16     	; 0x844 <__addsf3x+0x6e>
 854:	0e c0       	rjmp	.+28     	; 0x872 <__addsf3x+0x9c>
 856:	ba 0f       	add	r27, r26
 858:	62 1f       	adc	r22, r18
 85a:	73 1f       	adc	r23, r19
 85c:	84 1f       	adc	r24, r20
 85e:	48 f4       	brcc	.+18     	; 0x872 <__addsf3x+0x9c>
 860:	87 95       	ror	r24
 862:	77 95       	ror	r23
 864:	67 95       	ror	r22
 866:	b7 95       	ror	r27
 868:	f7 95       	ror	r31
 86a:	9e 3f       	cpi	r25, 0xFE	; 254
 86c:	08 f0       	brcs	.+2      	; 0x870 <__addsf3x+0x9a>
 86e:	b0 cf       	rjmp	.-160    	; 0x7d0 <__addsf3+0x28>
 870:	93 95       	inc	r25
 872:	88 0f       	add	r24, r24
 874:	08 f0       	brcs	.+2      	; 0x878 <__addsf3x+0xa2>
 876:	99 27       	eor	r25, r25
 878:	ee 0f       	add	r30, r30
 87a:	97 95       	ror	r25
 87c:	87 95       	ror	r24
 87e:	08 95       	ret
 880:	0e 94 cc 05 	call	0xb98	; 0xb98 <__fp_pscA>
 884:	60 f0       	brcs	.+24     	; 0x89e <__addsf3x+0xc8>
 886:	80 e8       	ldi	r24, 0x80	; 128
 888:	91 e0       	ldi	r25, 0x01	; 1
 88a:	09 f4       	brne	.+2      	; 0x88e <__addsf3x+0xb8>
 88c:	9e ef       	ldi	r25, 0xFE	; 254
 88e:	0e 94 d3 05 	call	0xba6	; 0xba6 <__fp_pscB>
 892:	28 f0       	brcs	.+10     	; 0x89e <__addsf3x+0xc8>
 894:	40 e8       	ldi	r20, 0x80	; 128
 896:	51 e0       	ldi	r21, 0x01	; 1
 898:	71 f4       	brne	.+28     	; 0x8b6 <atan2+0x10>
 89a:	5e ef       	ldi	r21, 0xFE	; 254
 89c:	0c c0       	rjmp	.+24     	; 0x8b6 <atan2+0x10>
 89e:	0c 94 a2 05 	jmp	0xb44	; 0xb44 <__fp_nan>
 8a2:	0c 94 4c 06 	jmp	0xc98	; 0xc98 <__fp_zero>

000008a6 <atan2>:
 8a6:	e9 2f       	mov	r30, r25
 8a8:	e0 78       	andi	r30, 0x80	; 128
 8aa:	0e 94 2a 06 	call	0xc54	; 0xc54 <__fp_split3>
 8ae:	40 f3       	brcs	.-48     	; 0x880 <__addsf3x+0xaa>
 8b0:	09 2e       	mov	r0, r25
 8b2:	05 2a       	or	r0, r21
 8b4:	b1 f3       	breq	.-20     	; 0x8a2 <__addsf3x+0xcc>
 8b6:	26 17       	cp	r18, r22
 8b8:	37 07       	cpc	r19, r23
 8ba:	48 07       	cpc	r20, r24
 8bc:	59 07       	cpc	r21, r25
 8be:	38 f0       	brcs	.+14     	; 0x8ce <atan2+0x28>
 8c0:	0e 2e       	mov	r0, r30
 8c2:	07 f8       	bld	r0, 7
 8c4:	e0 25       	eor	r30, r0
 8c6:	69 f0       	breq	.+26     	; 0x8e2 <atan2+0x3c>
 8c8:	e0 25       	eor	r30, r0
 8ca:	e0 64       	ori	r30, 0x40	; 64
 8cc:	0a c0       	rjmp	.+20     	; 0x8e2 <atan2+0x3c>
 8ce:	ef 63       	ori	r30, 0x3F	; 63
 8d0:	07 f8       	bld	r0, 7
 8d2:	00 94       	com	r0
 8d4:	07 fa       	bst	r0, 7
 8d6:	db 01       	movw	r26, r22
 8d8:	b9 01       	movw	r22, r18
 8da:	9d 01       	movw	r18, r26
 8dc:	dc 01       	movw	r26, r24
 8de:	ca 01       	movw	r24, r20
 8e0:	ad 01       	movw	r20, r26
 8e2:	ef 93       	push	r30
 8e4:	0e 94 ce 04 	call	0x99c	; 0x99c <__divsf3_pse>
 8e8:	0e 94 05 06 	call	0xc0a	; 0xc0a <__fp_round>
 8ec:	0e 94 83 04 	call	0x906	; 0x906 <atan>
 8f0:	5f 91       	pop	r21
 8f2:	55 23       	and	r21, r21
 8f4:	39 f0       	breq	.+14     	; 0x904 <atan2+0x5e>
 8f6:	2b ed       	ldi	r18, 0xDB	; 219
 8f8:	3f e0       	ldi	r19, 0x0F	; 15
 8fa:	49 e4       	ldi	r20, 0x49	; 73
 8fc:	50 fd       	sbrc	r21, 0
 8fe:	49 ec       	ldi	r20, 0xC9	; 201
 900:	0c 94 d4 03 	jmp	0x7a8	; 0x7a8 <__addsf3>
 904:	08 95       	ret

00000906 <atan>:
 906:	df 93       	push	r29
 908:	dd 27       	eor	r29, r29
 90a:	b9 2f       	mov	r27, r25
 90c:	bf 77       	andi	r27, 0x7F	; 127
 90e:	40 e8       	ldi	r20, 0x80	; 128
 910:	5f e3       	ldi	r21, 0x3F	; 63
 912:	16 16       	cp	r1, r22
 914:	17 06       	cpc	r1, r23
 916:	48 07       	cpc	r20, r24
 918:	5b 07       	cpc	r21, r27
 91a:	18 f4       	brcc	.+6      	; 0x922 <atan+0x1c>
 91c:	d9 2f       	mov	r29, r25
 91e:	0e 94 53 06 	call	0xca6	; 0xca6 <inverse>
 922:	9f 93       	push	r25
 924:	8f 93       	push	r24
 926:	7f 93       	push	r23
 928:	6f 93       	push	r22
 92a:	0e 94 16 07 	call	0xe2c	; 0xe2c <square>
 92e:	e4 e5       	ldi	r30, 0x54	; 84
 930:	f0 e0       	ldi	r31, 0x00	; 0
 932:	0e 94 a5 05 	call	0xb4a	; 0xb4a <__fp_powser>
 936:	0e 94 05 06 	call	0xc0a	; 0xc0a <__fp_round>
 93a:	2f 91       	pop	r18
 93c:	3f 91       	pop	r19
 93e:	4f 91       	pop	r20
 940:	5f 91       	pop	r21
 942:	0e 94 6e 06 	call	0xcdc	; 0xcdc <__mulsf3x>
 946:	dd 23       	and	r29, r29
 948:	51 f0       	breq	.+20     	; 0x95e <atan+0x58>
 94a:	90 58       	subi	r25, 0x80	; 128
 94c:	a2 ea       	ldi	r26, 0xA2	; 162
 94e:	2a ed       	ldi	r18, 0xDA	; 218
 950:	3f e0       	ldi	r19, 0x0F	; 15
 952:	49 ec       	ldi	r20, 0xC9	; 201
 954:	5f e3       	ldi	r21, 0x3F	; 63
 956:	d0 78       	andi	r29, 0x80	; 128
 958:	5d 27       	eor	r21, r29
 95a:	0e 94 eb 03 	call	0x7d6	; 0x7d6 <__addsf3x>
 95e:	df 91       	pop	r29
 960:	0c 94 05 06 	jmp	0xc0a	; 0xc0a <__fp_round>

00000964 <cos>:
 964:	0e 94 dc 05 	call	0xbb8	; 0xbb8 <__fp_rempio2>
 968:	e3 95       	inc	r30
 96a:	0c 94 16 06 	jmp	0xc2c	; 0xc2c <__fp_sinus>

0000096e <__divsf3>:
 96e:	0e 94 cb 04 	call	0x996	; 0x996 <__divsf3x>
 972:	0c 94 05 06 	jmp	0xc0a	; 0xc0a <__fp_round>
 976:	0e 94 d3 05 	call	0xba6	; 0xba6 <__fp_pscB>
 97a:	58 f0       	brcs	.+22     	; 0x992 <__divsf3+0x24>
 97c:	0e 94 cc 05 	call	0xb98	; 0xb98 <__fp_pscA>
 980:	40 f0       	brcs	.+16     	; 0x992 <__divsf3+0x24>
 982:	29 f4       	brne	.+10     	; 0x98e <__divsf3+0x20>
 984:	5f 3f       	cpi	r21, 0xFF	; 255
 986:	29 f0       	breq	.+10     	; 0x992 <__divsf3+0x24>
 988:	0c 94 9c 05 	jmp	0xb38	; 0xb38 <__fp_inf>
 98c:	51 11       	cpse	r21, r1
 98e:	0c 94 4d 06 	jmp	0xc9a	; 0xc9a <__fp_szero>
 992:	0c 94 a2 05 	jmp	0xb44	; 0xb44 <__fp_nan>

00000996 <__divsf3x>:
 996:	0e 94 2a 06 	call	0xc54	; 0xc54 <__fp_split3>
 99a:	68 f3       	brcs	.-38     	; 0x976 <__divsf3+0x8>

0000099c <__divsf3_pse>:
 99c:	99 23       	and	r25, r25
 99e:	b1 f3       	breq	.-20     	; 0x98c <__divsf3+0x1e>
 9a0:	55 23       	and	r21, r21
 9a2:	91 f3       	breq	.-28     	; 0x988 <__divsf3+0x1a>
 9a4:	95 1b       	sub	r25, r21
 9a6:	55 0b       	sbc	r21, r21
 9a8:	bb 27       	eor	r27, r27
 9aa:	aa 27       	eor	r26, r26
 9ac:	62 17       	cp	r22, r18
 9ae:	73 07       	cpc	r23, r19
 9b0:	84 07       	cpc	r24, r20
 9b2:	38 f0       	brcs	.+14     	; 0x9c2 <__divsf3_pse+0x26>
 9b4:	9f 5f       	subi	r25, 0xFF	; 255
 9b6:	5f 4f       	sbci	r21, 0xFF	; 255
 9b8:	22 0f       	add	r18, r18
 9ba:	33 1f       	adc	r19, r19
 9bc:	44 1f       	adc	r20, r20
 9be:	aa 1f       	adc	r26, r26
 9c0:	a9 f3       	breq	.-22     	; 0x9ac <__divsf3_pse+0x10>
 9c2:	35 d0       	rcall	.+106    	; 0xa2e <__divsf3_pse+0x92>
 9c4:	0e 2e       	mov	r0, r30
 9c6:	3a f0       	brmi	.+14     	; 0x9d6 <__divsf3_pse+0x3a>
 9c8:	e0 e8       	ldi	r30, 0x80	; 128
 9ca:	32 d0       	rcall	.+100    	; 0xa30 <__divsf3_pse+0x94>
 9cc:	91 50       	subi	r25, 0x01	; 1
 9ce:	50 40       	sbci	r21, 0x00	; 0
 9d0:	e6 95       	lsr	r30
 9d2:	00 1c       	adc	r0, r0
 9d4:	ca f7       	brpl	.-14     	; 0x9c8 <__divsf3_pse+0x2c>
 9d6:	2b d0       	rcall	.+86     	; 0xa2e <__divsf3_pse+0x92>
 9d8:	fe 2f       	mov	r31, r30
 9da:	29 d0       	rcall	.+82     	; 0xa2e <__divsf3_pse+0x92>
 9dc:	66 0f       	add	r22, r22
 9de:	77 1f       	adc	r23, r23
 9e0:	88 1f       	adc	r24, r24
 9e2:	bb 1f       	adc	r27, r27
 9e4:	26 17       	cp	r18, r22
 9e6:	37 07       	cpc	r19, r23
 9e8:	48 07       	cpc	r20, r24
 9ea:	ab 07       	cpc	r26, r27
 9ec:	b0 e8       	ldi	r27, 0x80	; 128
 9ee:	09 f0       	breq	.+2      	; 0x9f2 <__divsf3_pse+0x56>
 9f0:	bb 0b       	sbc	r27, r27
 9f2:	80 2d       	mov	r24, r0
 9f4:	bf 01       	movw	r22, r30
 9f6:	ff 27       	eor	r31, r31
 9f8:	93 58       	subi	r25, 0x83	; 131
 9fa:	5f 4f       	sbci	r21, 0xFF	; 255
 9fc:	3a f0       	brmi	.+14     	; 0xa0c <__divsf3_pse+0x70>
 9fe:	9e 3f       	cpi	r25, 0xFE	; 254
 a00:	51 05       	cpc	r21, r1
 a02:	78 f0       	brcs	.+30     	; 0xa22 <__divsf3_pse+0x86>
 a04:	0c 94 9c 05 	jmp	0xb38	; 0xb38 <__fp_inf>
 a08:	0c 94 4d 06 	jmp	0xc9a	; 0xc9a <__fp_szero>
 a0c:	5f 3f       	cpi	r21, 0xFF	; 255
 a0e:	e4 f3       	brlt	.-8      	; 0xa08 <__divsf3_pse+0x6c>
 a10:	98 3e       	cpi	r25, 0xE8	; 232
 a12:	d4 f3       	brlt	.-12     	; 0xa08 <__divsf3_pse+0x6c>
 a14:	86 95       	lsr	r24
 a16:	77 95       	ror	r23
 a18:	67 95       	ror	r22
 a1a:	b7 95       	ror	r27
 a1c:	f7 95       	ror	r31
 a1e:	9f 5f       	subi	r25, 0xFF	; 255
 a20:	c9 f7       	brne	.-14     	; 0xa14 <__divsf3_pse+0x78>
 a22:	88 0f       	add	r24, r24
 a24:	91 1d       	adc	r25, r1
 a26:	96 95       	lsr	r25
 a28:	87 95       	ror	r24
 a2a:	97 f9       	bld	r25, 7
 a2c:	08 95       	ret
 a2e:	e1 e0       	ldi	r30, 0x01	; 1
 a30:	66 0f       	add	r22, r22
 a32:	77 1f       	adc	r23, r23
 a34:	88 1f       	adc	r24, r24
 a36:	bb 1f       	adc	r27, r27
 a38:	62 17       	cp	r22, r18
 a3a:	73 07       	cpc	r23, r19
 a3c:	84 07       	cpc	r24, r20
 a3e:	ba 07       	cpc	r27, r26
 a40:	20 f0       	brcs	.+8      	; 0xa4a <__divsf3_pse+0xae>
 a42:	62 1b       	sub	r22, r18
 a44:	73 0b       	sbc	r23, r19
 a46:	84 0b       	sbc	r24, r20
 a48:	ba 0b       	sbc	r27, r26
 a4a:	ee 1f       	adc	r30, r30
 a4c:	88 f7       	brcc	.-30     	; 0xa30 <__divsf3_pse+0x94>
 a4e:	e0 95       	com	r30
 a50:	08 95       	ret

00000a52 <__fixsfsi>:
 a52:	0e 94 30 05 	call	0xa60	; 0xa60 <__fixunssfsi>
 a56:	68 94       	set
 a58:	b1 11       	cpse	r27, r1
 a5a:	0c 94 4d 06 	jmp	0xc9a	; 0xc9a <__fp_szero>
 a5e:	08 95       	ret

00000a60 <__fixunssfsi>:
 a60:	0e 94 32 06 	call	0xc64	; 0xc64 <__fp_splitA>
 a64:	88 f0       	brcs	.+34     	; 0xa88 <__fixunssfsi+0x28>
 a66:	9f 57       	subi	r25, 0x7F	; 127
 a68:	98 f0       	brcs	.+38     	; 0xa90 <__fixunssfsi+0x30>
 a6a:	b9 2f       	mov	r27, r25
 a6c:	99 27       	eor	r25, r25
 a6e:	b7 51       	subi	r27, 0x17	; 23
 a70:	b0 f0       	brcs	.+44     	; 0xa9e <__fixunssfsi+0x3e>
 a72:	e1 f0       	breq	.+56     	; 0xaac <__fixunssfsi+0x4c>
 a74:	66 0f       	add	r22, r22
 a76:	77 1f       	adc	r23, r23
 a78:	88 1f       	adc	r24, r24
 a7a:	99 1f       	adc	r25, r25
 a7c:	1a f0       	brmi	.+6      	; 0xa84 <__fixunssfsi+0x24>
 a7e:	ba 95       	dec	r27
 a80:	c9 f7       	brne	.-14     	; 0xa74 <__fixunssfsi+0x14>
 a82:	14 c0       	rjmp	.+40     	; 0xaac <__fixunssfsi+0x4c>
 a84:	b1 30       	cpi	r27, 0x01	; 1
 a86:	91 f0       	breq	.+36     	; 0xaac <__fixunssfsi+0x4c>
 a88:	0e 94 4c 06 	call	0xc98	; 0xc98 <__fp_zero>
 a8c:	b1 e0       	ldi	r27, 0x01	; 1
 a8e:	08 95       	ret
 a90:	0c 94 4c 06 	jmp	0xc98	; 0xc98 <__fp_zero>
 a94:	67 2f       	mov	r22, r23
 a96:	78 2f       	mov	r23, r24
 a98:	88 27       	eor	r24, r24
 a9a:	b8 5f       	subi	r27, 0xF8	; 248
 a9c:	39 f0       	breq	.+14     	; 0xaac <__fixunssfsi+0x4c>
 a9e:	b9 3f       	cpi	r27, 0xF9	; 249
 aa0:	cc f3       	brlt	.-14     	; 0xa94 <__fixunssfsi+0x34>
 aa2:	86 95       	lsr	r24
 aa4:	77 95       	ror	r23
 aa6:	67 95       	ror	r22
 aa8:	b3 95       	inc	r27
 aaa:	d9 f7       	brne	.-10     	; 0xaa2 <__fixunssfsi+0x42>
 aac:	3e f4       	brtc	.+14     	; 0xabc <__fixunssfsi+0x5c>
 aae:	90 95       	com	r25
 ab0:	80 95       	com	r24
 ab2:	70 95       	com	r23
 ab4:	61 95       	neg	r22
 ab6:	7f 4f       	sbci	r23, 0xFF	; 255
 ab8:	8f 4f       	sbci	r24, 0xFF	; 255
 aba:	9f 4f       	sbci	r25, 0xFF	; 255
 abc:	08 95       	ret

00000abe <__floatunsisf>:
 abe:	e8 94       	clt
 ac0:	09 c0       	rjmp	.+18     	; 0xad4 <__floatsisf+0x12>

00000ac2 <__floatsisf>:
 ac2:	97 fb       	bst	r25, 7
 ac4:	3e f4       	brtc	.+14     	; 0xad4 <__floatsisf+0x12>
 ac6:	90 95       	com	r25
 ac8:	80 95       	com	r24
 aca:	70 95       	com	r23
 acc:	61 95       	neg	r22
 ace:	7f 4f       	sbci	r23, 0xFF	; 255
 ad0:	8f 4f       	sbci	r24, 0xFF	; 255
 ad2:	9f 4f       	sbci	r25, 0xFF	; 255
 ad4:	99 23       	and	r25, r25
 ad6:	a9 f0       	breq	.+42     	; 0xb02 <__floatsisf+0x40>
 ad8:	f9 2f       	mov	r31, r25
 ada:	96 e9       	ldi	r25, 0x96	; 150
 adc:	bb 27       	eor	r27, r27
 ade:	93 95       	inc	r25
 ae0:	f6 95       	lsr	r31
 ae2:	87 95       	ror	r24
 ae4:	77 95       	ror	r23
 ae6:	67 95       	ror	r22
 ae8:	b7 95       	ror	r27
 aea:	f1 11       	cpse	r31, r1
 aec:	f8 cf       	rjmp	.-16     	; 0xade <__floatsisf+0x1c>
 aee:	fa f4       	brpl	.+62     	; 0xb2e <__floatsisf+0x6c>
 af0:	bb 0f       	add	r27, r27
 af2:	11 f4       	brne	.+4      	; 0xaf8 <__floatsisf+0x36>
 af4:	60 ff       	sbrs	r22, 0
 af6:	1b c0       	rjmp	.+54     	; 0xb2e <__floatsisf+0x6c>
 af8:	6f 5f       	subi	r22, 0xFF	; 255
 afa:	7f 4f       	sbci	r23, 0xFF	; 255
 afc:	8f 4f       	sbci	r24, 0xFF	; 255
 afe:	9f 4f       	sbci	r25, 0xFF	; 255
 b00:	16 c0       	rjmp	.+44     	; 0xb2e <__floatsisf+0x6c>
 b02:	88 23       	and	r24, r24
 b04:	11 f0       	breq	.+4      	; 0xb0a <__floatsisf+0x48>
 b06:	96 e9       	ldi	r25, 0x96	; 150
 b08:	11 c0       	rjmp	.+34     	; 0xb2c <__floatsisf+0x6a>
 b0a:	77 23       	and	r23, r23
 b0c:	21 f0       	breq	.+8      	; 0xb16 <__floatsisf+0x54>
 b0e:	9e e8       	ldi	r25, 0x8E	; 142
 b10:	87 2f       	mov	r24, r23
 b12:	76 2f       	mov	r23, r22
 b14:	05 c0       	rjmp	.+10     	; 0xb20 <__floatsisf+0x5e>
 b16:	66 23       	and	r22, r22
 b18:	71 f0       	breq	.+28     	; 0xb36 <__floatsisf+0x74>
 b1a:	96 e8       	ldi	r25, 0x86	; 134
 b1c:	86 2f       	mov	r24, r22
 b1e:	70 e0       	ldi	r23, 0x00	; 0
 b20:	60 e0       	ldi	r22, 0x00	; 0
 b22:	2a f0       	brmi	.+10     	; 0xb2e <__floatsisf+0x6c>
 b24:	9a 95       	dec	r25
 b26:	66 0f       	add	r22, r22
 b28:	77 1f       	adc	r23, r23
 b2a:	88 1f       	adc	r24, r24
 b2c:	da f7       	brpl	.-10     	; 0xb24 <__floatsisf+0x62>
 b2e:	88 0f       	add	r24, r24
 b30:	96 95       	lsr	r25
 b32:	87 95       	ror	r24
 b34:	97 f9       	bld	r25, 7
 b36:	08 95       	ret

00000b38 <__fp_inf>:
 b38:	97 f9       	bld	r25, 7
 b3a:	9f 67       	ori	r25, 0x7F	; 127
 b3c:	80 e8       	ldi	r24, 0x80	; 128
 b3e:	70 e0       	ldi	r23, 0x00	; 0
 b40:	60 e0       	ldi	r22, 0x00	; 0
 b42:	08 95       	ret

00000b44 <__fp_nan>:
 b44:	9f ef       	ldi	r25, 0xFF	; 255
 b46:	80 ec       	ldi	r24, 0xC0	; 192
 b48:	08 95       	ret

00000b4a <__fp_powser>:
 b4a:	df 93       	push	r29
 b4c:	cf 93       	push	r28
 b4e:	1f 93       	push	r17
 b50:	0f 93       	push	r16
 b52:	ff 92       	push	r15
 b54:	ef 92       	push	r14
 b56:	df 92       	push	r13
 b58:	7b 01       	movw	r14, r22
 b5a:	8c 01       	movw	r16, r24
 b5c:	68 94       	set
 b5e:	06 c0       	rjmp	.+12     	; 0xb6c <__fp_powser+0x22>
 b60:	da 2e       	mov	r13, r26
 b62:	ef 01       	movw	r28, r30
 b64:	0e 94 6e 06 	call	0xcdc	; 0xcdc <__mulsf3x>
 b68:	fe 01       	movw	r30, r28
 b6a:	e8 94       	clt
 b6c:	a5 91       	lpm	r26, Z+
 b6e:	25 91       	lpm	r18, Z+
 b70:	35 91       	lpm	r19, Z+
 b72:	45 91       	lpm	r20, Z+
 b74:	55 91       	lpm	r21, Z+
 b76:	a6 f3       	brts	.-24     	; 0xb60 <__fp_powser+0x16>
 b78:	ef 01       	movw	r28, r30
 b7a:	0e 94 eb 03 	call	0x7d6	; 0x7d6 <__addsf3x>
 b7e:	fe 01       	movw	r30, r28
 b80:	97 01       	movw	r18, r14
 b82:	a8 01       	movw	r20, r16
 b84:	da 94       	dec	r13
 b86:	69 f7       	brne	.-38     	; 0xb62 <__fp_powser+0x18>
 b88:	df 90       	pop	r13
 b8a:	ef 90       	pop	r14
 b8c:	ff 90       	pop	r15
 b8e:	0f 91       	pop	r16
 b90:	1f 91       	pop	r17
 b92:	cf 91       	pop	r28
 b94:	df 91       	pop	r29
 b96:	08 95       	ret

00000b98 <__fp_pscA>:
 b98:	00 24       	eor	r0, r0
 b9a:	0a 94       	dec	r0
 b9c:	16 16       	cp	r1, r22
 b9e:	17 06       	cpc	r1, r23
 ba0:	18 06       	cpc	r1, r24
 ba2:	09 06       	cpc	r0, r25
 ba4:	08 95       	ret

00000ba6 <__fp_pscB>:
 ba6:	00 24       	eor	r0, r0
 ba8:	0a 94       	dec	r0
 baa:	12 16       	cp	r1, r18
 bac:	13 06       	cpc	r1, r19
 bae:	14 06       	cpc	r1, r20
 bb0:	05 06       	cpc	r0, r21
 bb2:	08 95       	ret
 bb4:	0c 94 a2 05 	jmp	0xb44	; 0xb44 <__fp_nan>

00000bb8 <__fp_rempio2>:
 bb8:	0e 94 32 06 	call	0xc64	; 0xc64 <__fp_splitA>
 bbc:	d8 f3       	brcs	.-10     	; 0xbb4 <__fp_pscB+0xe>
 bbe:	e8 94       	clt
 bc0:	e0 e0       	ldi	r30, 0x00	; 0
 bc2:	bb 27       	eor	r27, r27
 bc4:	9f 57       	subi	r25, 0x7F	; 127
 bc6:	f0 f0       	brcs	.+60     	; 0xc04 <__fp_rempio2+0x4c>
 bc8:	2a ed       	ldi	r18, 0xDA	; 218
 bca:	3f e0       	ldi	r19, 0x0F	; 15
 bcc:	49 ec       	ldi	r20, 0xC9	; 201
 bce:	06 c0       	rjmp	.+12     	; 0xbdc <__fp_rempio2+0x24>
 bd0:	ee 0f       	add	r30, r30
 bd2:	bb 0f       	add	r27, r27
 bd4:	66 1f       	adc	r22, r22
 bd6:	77 1f       	adc	r23, r23
 bd8:	88 1f       	adc	r24, r24
 bda:	28 f0       	brcs	.+10     	; 0xbe6 <__fp_rempio2+0x2e>
 bdc:	b2 3a       	cpi	r27, 0xA2	; 162
 bde:	62 07       	cpc	r22, r18
 be0:	73 07       	cpc	r23, r19
 be2:	84 07       	cpc	r24, r20
 be4:	28 f0       	brcs	.+10     	; 0xbf0 <__fp_rempio2+0x38>
 be6:	b2 5a       	subi	r27, 0xA2	; 162
 be8:	62 0b       	sbc	r22, r18
 bea:	73 0b       	sbc	r23, r19
 bec:	84 0b       	sbc	r24, r20
 bee:	e3 95       	inc	r30
 bf0:	9a 95       	dec	r25
 bf2:	72 f7       	brpl	.-36     	; 0xbd0 <__fp_rempio2+0x18>
 bf4:	80 38       	cpi	r24, 0x80	; 128
 bf6:	30 f4       	brcc	.+12     	; 0xc04 <__fp_rempio2+0x4c>
 bf8:	9a 95       	dec	r25
 bfa:	bb 0f       	add	r27, r27
 bfc:	66 1f       	adc	r22, r22
 bfe:	77 1f       	adc	r23, r23
 c00:	88 1f       	adc	r24, r24
 c02:	d2 f7       	brpl	.-12     	; 0xbf8 <__fp_rempio2+0x40>
 c04:	90 48       	sbci	r25, 0x80	; 128
 c06:	0c 94 1c 07 	jmp	0xe38	; 0xe38 <__fp_mpack_finite>

00000c0a <__fp_round>:
 c0a:	09 2e       	mov	r0, r25
 c0c:	03 94       	inc	r0
 c0e:	00 0c       	add	r0, r0
 c10:	11 f4       	brne	.+4      	; 0xc16 <__fp_round+0xc>
 c12:	88 23       	and	r24, r24
 c14:	52 f0       	brmi	.+20     	; 0xc2a <__fp_round+0x20>
 c16:	bb 0f       	add	r27, r27
 c18:	40 f4       	brcc	.+16     	; 0xc2a <__fp_round+0x20>
 c1a:	bf 2b       	or	r27, r31
 c1c:	11 f4       	brne	.+4      	; 0xc22 <__fp_round+0x18>
 c1e:	60 ff       	sbrs	r22, 0
 c20:	04 c0       	rjmp	.+8      	; 0xc2a <__fp_round+0x20>
 c22:	6f 5f       	subi	r22, 0xFF	; 255
 c24:	7f 4f       	sbci	r23, 0xFF	; 255
 c26:	8f 4f       	sbci	r24, 0xFF	; 255
 c28:	9f 4f       	sbci	r25, 0xFF	; 255
 c2a:	08 95       	ret

00000c2c <__fp_sinus>:
 c2c:	ef 93       	push	r30
 c2e:	e0 ff       	sbrs	r30, 0
 c30:	07 c0       	rjmp	.+14     	; 0xc40 <__fp_sinus+0x14>
 c32:	a2 ea       	ldi	r26, 0xA2	; 162
 c34:	2a ed       	ldi	r18, 0xDA	; 218
 c36:	3f e0       	ldi	r19, 0x0F	; 15
 c38:	49 ec       	ldi	r20, 0xC9	; 201
 c3a:	5f eb       	ldi	r21, 0xBF	; 191
 c3c:	0e 94 eb 03 	call	0x7d6	; 0x7d6 <__addsf3x>
 c40:	0e 94 05 06 	call	0xc0a	; 0xc0a <__fp_round>
 c44:	0f 90       	pop	r0
 c46:	03 94       	inc	r0
 c48:	01 fc       	sbrc	r0, 1
 c4a:	90 58       	subi	r25, 0x80	; 128
 c4c:	e1 e8       	ldi	r30, 0x81	; 129
 c4e:	f0 e0       	ldi	r31, 0x00	; 0
 c50:	0c 94 2f 07 	jmp	0xe5e	; 0xe5e <__fp_powsodd>

00000c54 <__fp_split3>:
 c54:	57 fd       	sbrc	r21, 7
 c56:	90 58       	subi	r25, 0x80	; 128
 c58:	44 0f       	add	r20, r20
 c5a:	55 1f       	adc	r21, r21
 c5c:	59 f0       	breq	.+22     	; 0xc74 <__fp_splitA+0x10>
 c5e:	5f 3f       	cpi	r21, 0xFF	; 255
 c60:	71 f0       	breq	.+28     	; 0xc7e <__fp_splitA+0x1a>
 c62:	47 95       	ror	r20

00000c64 <__fp_splitA>:
 c64:	88 0f       	add	r24, r24
 c66:	97 fb       	bst	r25, 7
 c68:	99 1f       	adc	r25, r25
 c6a:	61 f0       	breq	.+24     	; 0xc84 <__fp_splitA+0x20>
 c6c:	9f 3f       	cpi	r25, 0xFF	; 255
 c6e:	79 f0       	breq	.+30     	; 0xc8e <__fp_splitA+0x2a>
 c70:	87 95       	ror	r24
 c72:	08 95       	ret
 c74:	12 16       	cp	r1, r18
 c76:	13 06       	cpc	r1, r19
 c78:	14 06       	cpc	r1, r20
 c7a:	55 1f       	adc	r21, r21
 c7c:	f2 cf       	rjmp	.-28     	; 0xc62 <__fp_split3+0xe>
 c7e:	46 95       	lsr	r20
 c80:	f1 df       	rcall	.-30     	; 0xc64 <__fp_splitA>
 c82:	08 c0       	rjmp	.+16     	; 0xc94 <__fp_splitA+0x30>
 c84:	16 16       	cp	r1, r22
 c86:	17 06       	cpc	r1, r23
 c88:	18 06       	cpc	r1, r24
 c8a:	99 1f       	adc	r25, r25
 c8c:	f1 cf       	rjmp	.-30     	; 0xc70 <__fp_splitA+0xc>
 c8e:	86 95       	lsr	r24
 c90:	71 05       	cpc	r23, r1
 c92:	61 05       	cpc	r22, r1
 c94:	08 94       	sec
 c96:	08 95       	ret

00000c98 <__fp_zero>:
 c98:	e8 94       	clt

00000c9a <__fp_szero>:
 c9a:	bb 27       	eor	r27, r27
 c9c:	66 27       	eor	r22, r22
 c9e:	77 27       	eor	r23, r23
 ca0:	cb 01       	movw	r24, r22
 ca2:	97 f9       	bld	r25, 7
 ca4:	08 95       	ret

00000ca6 <inverse>:
 ca6:	9b 01       	movw	r18, r22
 ca8:	ac 01       	movw	r20, r24
 caa:	60 e0       	ldi	r22, 0x00	; 0
 cac:	70 e0       	ldi	r23, 0x00	; 0
 cae:	80 e8       	ldi	r24, 0x80	; 128
 cb0:	9f e3       	ldi	r25, 0x3F	; 63
 cb2:	0c 94 b7 04 	jmp	0x96e	; 0x96e <__divsf3>

00000cb6 <__mulsf3>:
 cb6:	0e 94 6e 06 	call	0xcdc	; 0xcdc <__mulsf3x>
 cba:	0c 94 05 06 	jmp	0xc0a	; 0xc0a <__fp_round>
 cbe:	0e 94 cc 05 	call	0xb98	; 0xb98 <__fp_pscA>
 cc2:	38 f0       	brcs	.+14     	; 0xcd2 <__mulsf3+0x1c>
 cc4:	0e 94 d3 05 	call	0xba6	; 0xba6 <__fp_pscB>
 cc8:	20 f0       	brcs	.+8      	; 0xcd2 <__mulsf3+0x1c>
 cca:	95 23       	and	r25, r21
 ccc:	11 f0       	breq	.+4      	; 0xcd2 <__mulsf3+0x1c>
 cce:	0c 94 9c 05 	jmp	0xb38	; 0xb38 <__fp_inf>
 cd2:	0c 94 a2 05 	jmp	0xb44	; 0xb44 <__fp_nan>
 cd6:	11 24       	eor	r1, r1
 cd8:	0c 94 4d 06 	jmp	0xc9a	; 0xc9a <__fp_szero>

00000cdc <__mulsf3x>:
 cdc:	0e 94 2a 06 	call	0xc54	; 0xc54 <__fp_split3>
 ce0:	70 f3       	brcs	.-36     	; 0xcbe <__mulsf3+0x8>

00000ce2 <__mulsf3_pse>:
 ce2:	95 9f       	mul	r25, r21
 ce4:	c1 f3       	breq	.-16     	; 0xcd6 <__mulsf3+0x20>
 ce6:	95 0f       	add	r25, r21
 ce8:	50 e0       	ldi	r21, 0x00	; 0
 cea:	55 1f       	adc	r21, r21
 cec:	62 9f       	mul	r22, r18
 cee:	f0 01       	movw	r30, r0
 cf0:	72 9f       	mul	r23, r18
 cf2:	bb 27       	eor	r27, r27
 cf4:	f0 0d       	add	r31, r0
 cf6:	b1 1d       	adc	r27, r1
 cf8:	63 9f       	mul	r22, r19
 cfa:	aa 27       	eor	r26, r26
 cfc:	f0 0d       	add	r31, r0
 cfe:	b1 1d       	adc	r27, r1
 d00:	aa 1f       	adc	r26, r26
 d02:	64 9f       	mul	r22, r20
 d04:	66 27       	eor	r22, r22
 d06:	b0 0d       	add	r27, r0
 d08:	a1 1d       	adc	r26, r1
 d0a:	66 1f       	adc	r22, r22
 d0c:	82 9f       	mul	r24, r18
 d0e:	22 27       	eor	r18, r18
 d10:	b0 0d       	add	r27, r0
 d12:	a1 1d       	adc	r26, r1
 d14:	62 1f       	adc	r22, r18
 d16:	73 9f       	mul	r23, r19
 d18:	b0 0d       	add	r27, r0
 d1a:	a1 1d       	adc	r26, r1
 d1c:	62 1f       	adc	r22, r18
 d1e:	83 9f       	mul	r24, r19
 d20:	a0 0d       	add	r26, r0
 d22:	61 1d       	adc	r22, r1
 d24:	22 1f       	adc	r18, r18
 d26:	74 9f       	mul	r23, r20
 d28:	33 27       	eor	r19, r19
 d2a:	a0 0d       	add	r26, r0
 d2c:	61 1d       	adc	r22, r1
 d2e:	23 1f       	adc	r18, r19
 d30:	84 9f       	mul	r24, r20
 d32:	60 0d       	add	r22, r0
 d34:	21 1d       	adc	r18, r1
 d36:	82 2f       	mov	r24, r18
 d38:	76 2f       	mov	r23, r22
 d3a:	6a 2f       	mov	r22, r26
 d3c:	11 24       	eor	r1, r1
 d3e:	9f 57       	subi	r25, 0x7F	; 127
 d40:	50 40       	sbci	r21, 0x00	; 0
 d42:	9a f0       	brmi	.+38     	; 0xd6a <__mulsf3_pse+0x88>
 d44:	f1 f0       	breq	.+60     	; 0xd82 <__mulsf3_pse+0xa0>
 d46:	88 23       	and	r24, r24
 d48:	4a f0       	brmi	.+18     	; 0xd5c <__mulsf3_pse+0x7a>
 d4a:	ee 0f       	add	r30, r30
 d4c:	ff 1f       	adc	r31, r31
 d4e:	bb 1f       	adc	r27, r27
 d50:	66 1f       	adc	r22, r22
 d52:	77 1f       	adc	r23, r23
 d54:	88 1f       	adc	r24, r24
 d56:	91 50       	subi	r25, 0x01	; 1
 d58:	50 40       	sbci	r21, 0x00	; 0
 d5a:	a9 f7       	brne	.-22     	; 0xd46 <__mulsf3_pse+0x64>
 d5c:	9e 3f       	cpi	r25, 0xFE	; 254
 d5e:	51 05       	cpc	r21, r1
 d60:	80 f0       	brcs	.+32     	; 0xd82 <__mulsf3_pse+0xa0>
 d62:	0c 94 9c 05 	jmp	0xb38	; 0xb38 <__fp_inf>
 d66:	0c 94 4d 06 	jmp	0xc9a	; 0xc9a <__fp_szero>
 d6a:	5f 3f       	cpi	r21, 0xFF	; 255
 d6c:	e4 f3       	brlt	.-8      	; 0xd66 <__mulsf3_pse+0x84>
 d6e:	98 3e       	cpi	r25, 0xE8	; 232
 d70:	d4 f3       	brlt	.-12     	; 0xd66 <__mulsf3_pse+0x84>
 d72:	86 95       	lsr	r24
 d74:	77 95       	ror	r23
 d76:	67 95       	ror	r22
 d78:	b7 95       	ror	r27
 d7a:	f7 95       	ror	r31
 d7c:	e7 95       	ror	r30
 d7e:	9f 5f       	subi	r25, 0xFF	; 255
 d80:	c1 f7       	brne	.-16     	; 0xd72 <__mulsf3_pse+0x90>
 d82:	fe 2b       	or	r31, r30
 d84:	88 0f       	add	r24, r24
 d86:	91 1d       	adc	r25, r1
 d88:	96 95       	lsr	r25
 d8a:	87 95       	ror	r24
 d8c:	97 f9       	bld	r25, 7
 d8e:	08 95       	ret

00000d90 <sin>:
 d90:	9f 93       	push	r25
 d92:	0e 94 dc 05 	call	0xbb8	; 0xbb8 <__fp_rempio2>
 d96:	0f 90       	pop	r0
 d98:	07 fc       	sbrc	r0, 7
 d9a:	ee 5f       	subi	r30, 0xFE	; 254
 d9c:	0c 94 16 06 	jmp	0xc2c	; 0xc2c <__fp_sinus>
 da0:	19 f4       	brne	.+6      	; 0xda8 <sin+0x18>
 da2:	16 f4       	brtc	.+4      	; 0xda8 <sin+0x18>
 da4:	0c 94 a2 05 	jmp	0xb44	; 0xb44 <__fp_nan>
 da8:	0c 94 1a 07 	jmp	0xe34	; 0xe34 <__fp_mpack>

00000dac <sqrt>:
 dac:	0e 94 32 06 	call	0xc64	; 0xc64 <__fp_splitA>
 db0:	b8 f3       	brcs	.-18     	; 0xda0 <sin+0x10>
 db2:	99 23       	and	r25, r25
 db4:	c9 f3       	breq	.-14     	; 0xda8 <sin+0x18>
 db6:	b6 f3       	brts	.-20     	; 0xda4 <sin+0x14>
 db8:	9f 57       	subi	r25, 0x7F	; 127
 dba:	55 0b       	sbc	r21, r21
 dbc:	87 ff       	sbrs	r24, 7
 dbe:	0e 94 28 07 	call	0xe50	; 0xe50 <__fp_norm2>
 dc2:	00 24       	eor	r0, r0
 dc4:	a0 e6       	ldi	r26, 0x60	; 96
 dc6:	40 ea       	ldi	r20, 0xA0	; 160
 dc8:	90 01       	movw	r18, r0
 dca:	80 58       	subi	r24, 0x80	; 128
 dcc:	56 95       	lsr	r21
 dce:	97 95       	ror	r25
 dd0:	28 f4       	brcc	.+10     	; 0xddc <sqrt+0x30>
 dd2:	80 5c       	subi	r24, 0xC0	; 192
 dd4:	66 0f       	add	r22, r22
 dd6:	77 1f       	adc	r23, r23
 dd8:	88 1f       	adc	r24, r24
 dda:	20 f0       	brcs	.+8      	; 0xde4 <sqrt+0x38>
 ddc:	26 17       	cp	r18, r22
 dde:	37 07       	cpc	r19, r23
 de0:	48 07       	cpc	r20, r24
 de2:	30 f4       	brcc	.+12     	; 0xdf0 <sqrt+0x44>
 de4:	62 1b       	sub	r22, r18
 de6:	73 0b       	sbc	r23, r19
 de8:	84 0b       	sbc	r24, r20
 dea:	20 29       	or	r18, r0
 dec:	31 29       	or	r19, r1
 dee:	4a 2b       	or	r20, r26
 df0:	a6 95       	lsr	r26
 df2:	17 94       	ror	r1
 df4:	07 94       	ror	r0
 df6:	20 25       	eor	r18, r0
 df8:	31 25       	eor	r19, r1
 dfa:	4a 27       	eor	r20, r26
 dfc:	58 f7       	brcc	.-42     	; 0xdd4 <sqrt+0x28>
 dfe:	66 0f       	add	r22, r22
 e00:	77 1f       	adc	r23, r23
 e02:	88 1f       	adc	r24, r24
 e04:	20 f0       	brcs	.+8      	; 0xe0e <sqrt+0x62>
 e06:	26 17       	cp	r18, r22
 e08:	37 07       	cpc	r19, r23
 e0a:	48 07       	cpc	r20, r24
 e0c:	30 f4       	brcc	.+12     	; 0xe1a <sqrt+0x6e>
 e0e:	62 0b       	sbc	r22, r18
 e10:	73 0b       	sbc	r23, r19
 e12:	84 0b       	sbc	r24, r20
 e14:	20 0d       	add	r18, r0
 e16:	31 1d       	adc	r19, r1
 e18:	41 1d       	adc	r20, r1
 e1a:	a0 95       	com	r26
 e1c:	81 f7       	brne	.-32     	; 0xdfe <sqrt+0x52>
 e1e:	b9 01       	movw	r22, r18
 e20:	84 2f       	mov	r24, r20
 e22:	91 58       	subi	r25, 0x81	; 129
 e24:	88 0f       	add	r24, r24
 e26:	96 95       	lsr	r25
 e28:	87 95       	ror	r24
 e2a:	08 95       	ret

00000e2c <square>:
 e2c:	9b 01       	movw	r18, r22
 e2e:	ac 01       	movw	r20, r24
 e30:	0c 94 5b 06 	jmp	0xcb6	; 0xcb6 <__mulsf3>

00000e34 <__fp_mpack>:
 e34:	9f 3f       	cpi	r25, 0xFF	; 255
 e36:	31 f0       	breq	.+12     	; 0xe44 <__fp_mpack_finite+0xc>

00000e38 <__fp_mpack_finite>:
 e38:	91 50       	subi	r25, 0x01	; 1
 e3a:	20 f4       	brcc	.+8      	; 0xe44 <__fp_mpack_finite+0xc>
 e3c:	87 95       	ror	r24
 e3e:	77 95       	ror	r23
 e40:	67 95       	ror	r22
 e42:	b7 95       	ror	r27
 e44:	88 0f       	add	r24, r24
 e46:	91 1d       	adc	r25, r1
 e48:	96 95       	lsr	r25
 e4a:	87 95       	ror	r24
 e4c:	97 f9       	bld	r25, 7
 e4e:	08 95       	ret

00000e50 <__fp_norm2>:
 e50:	91 50       	subi	r25, 0x01	; 1
 e52:	50 40       	sbci	r21, 0x00	; 0
 e54:	66 0f       	add	r22, r22
 e56:	77 1f       	adc	r23, r23
 e58:	88 1f       	adc	r24, r24
 e5a:	d2 f7       	brpl	.-12     	; 0xe50 <__fp_norm2>
 e5c:	08 95       	ret

00000e5e <__fp_powsodd>:
 e5e:	9f 93       	push	r25
 e60:	8f 93       	push	r24
 e62:	7f 93       	push	r23
 e64:	6f 93       	push	r22
 e66:	ff 93       	push	r31
 e68:	ef 93       	push	r30
 e6a:	9b 01       	movw	r18, r22
 e6c:	ac 01       	movw	r20, r24
 e6e:	0e 94 5b 06 	call	0xcb6	; 0xcb6 <__mulsf3>
 e72:	ef 91       	pop	r30
 e74:	ff 91       	pop	r31
 e76:	0e 94 a5 05 	call	0xb4a	; 0xb4a <__fp_powser>
 e7a:	2f 91       	pop	r18
 e7c:	3f 91       	pop	r19
 e7e:	4f 91       	pop	r20
 e80:	5f 91       	pop	r21
 e82:	0c 94 5b 06 	jmp	0xcb6	; 0xcb6 <__mulsf3>

00000e86 <atoi>:
 e86:	fc 01       	movw	r30, r24
 e88:	88 27       	eor	r24, r24
 e8a:	99 27       	eor	r25, r25
 e8c:	e8 94       	clt
 e8e:	21 91       	ld	r18, Z+
 e90:	20 32       	cpi	r18, 0x20	; 32
 e92:	e9 f3       	breq	.-6      	; 0xe8e <atoi+0x8>
 e94:	29 30       	cpi	r18, 0x09	; 9
 e96:	10 f0       	brcs	.+4      	; 0xe9c <atoi+0x16>
 e98:	2e 30       	cpi	r18, 0x0E	; 14
 e9a:	c8 f3       	brcs	.-14     	; 0xe8e <atoi+0x8>
 e9c:	2b 32       	cpi	r18, 0x2B	; 43
 e9e:	41 f0       	breq	.+16     	; 0xeb0 <atoi+0x2a>
 ea0:	2d 32       	cpi	r18, 0x2D	; 45
 ea2:	39 f4       	brne	.+14     	; 0xeb2 <atoi+0x2c>
 ea4:	68 94       	set
 ea6:	04 c0       	rjmp	.+8      	; 0xeb0 <atoi+0x2a>
 ea8:	0e 94 82 07 	call	0xf04	; 0xf04 <__mulhi_const_10>
 eac:	82 0f       	add	r24, r18
 eae:	91 1d       	adc	r25, r1
 eb0:	21 91       	ld	r18, Z+
 eb2:	20 53       	subi	r18, 0x30	; 48
 eb4:	2a 30       	cpi	r18, 0x0A	; 10
 eb6:	c0 f3       	brcs	.-16     	; 0xea8 <atoi+0x22>
 eb8:	1e f4       	brtc	.+6      	; 0xec0 <atoi+0x3a>
 eba:	90 95       	com	r25
 ebc:	81 95       	neg	r24
 ebe:	9f 4f       	sbci	r25, 0xFF	; 255
 ec0:	08 95       	ret

00000ec2 <strchr>:
 ec2:	fc 01       	movw	r30, r24
 ec4:	81 91       	ld	r24, Z+
 ec6:	86 17       	cp	r24, r22
 ec8:	21 f0       	breq	.+8      	; 0xed2 <strchr+0x10>
 eca:	88 23       	and	r24, r24
 ecc:	d9 f7       	brne	.-10     	; 0xec4 <strchr+0x2>
 ece:	99 27       	eor	r25, r25
 ed0:	08 95       	ret
 ed2:	31 97       	sbiw	r30, 0x01	; 1
 ed4:	cf 01       	movw	r24, r30
 ed6:	08 95       	ret

00000ed8 <strcpy>:
 ed8:	fb 01       	movw	r30, r22
 eda:	dc 01       	movw	r26, r24
 edc:	01 90       	ld	r0, Z+
 ede:	0d 92       	st	X+, r0
 ee0:	00 20       	and	r0, r0
 ee2:	e1 f7       	brne	.-8      	; 0xedc <strcpy+0x4>
 ee4:	08 95       	ret

00000ee6 <strncpy>:
 ee6:	fb 01       	movw	r30, r22
 ee8:	dc 01       	movw	r26, r24
 eea:	41 50       	subi	r20, 0x01	; 1
 eec:	50 40       	sbci	r21, 0x00	; 0
 eee:	48 f0       	brcs	.+18     	; 0xf02 <strncpy+0x1c>
 ef0:	01 90       	ld	r0, Z+
 ef2:	0d 92       	st	X+, r0
 ef4:	00 20       	and	r0, r0
 ef6:	c9 f7       	brne	.-14     	; 0xeea <strncpy+0x4>
 ef8:	01 c0       	rjmp	.+2      	; 0xefc <strncpy+0x16>
 efa:	1d 92       	st	X+, r1
 efc:	41 50       	subi	r20, 0x01	; 1
 efe:	50 40       	sbci	r21, 0x00	; 0
 f00:	e0 f7       	brcc	.-8      	; 0xefa <strncpy+0x14>
 f02:	08 95       	ret

00000f04 <__mulhi_const_10>:
 f04:	7a e0       	ldi	r23, 0x0A	; 10
 f06:	97 9f       	mul	r25, r23
 f08:	90 2d       	mov	r25, r0
 f0a:	87 9f       	mul	r24, r23
 f0c:	80 2d       	mov	r24, r0
 f0e:	91 0d       	add	r25, r1
 f10:	11 24       	eor	r1, r1
 f12:	08 95       	ret

00000f14 <_exit>:
 f14:	f8 94       	cli

00000f16 <__stop_program>:
 f16:	ff cf       	rjmp	.-2      	; 0xf16 <__stop_program>
