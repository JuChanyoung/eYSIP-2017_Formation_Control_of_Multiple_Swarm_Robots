
AVR1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001398  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  0000140c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000087  00800060  00800060  0000140c  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000140c  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000143c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000002a0  00000000  00000000  00001478  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000026fc  00000000  00000000  00001718  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000fb1  00000000  00000000  00003e14  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001558  00000000  00000000  00004dc5  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000006a8  00000000  00000000  00006320  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000008e9  00000000  00000000  000069c8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000142a  00000000  00000000  000072b1  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000220  00000000  00000000  000086db  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__ctors_end>
       4:	0c 94 72 03 	jmp	0x6e4	; 0x6e4 <__vector_1>
       8:	0c 94 4d 03 	jmp	0x69a	; 0x69a <__vector_2>
       c:	0c 94 6d 00 	jmp	0xda	; 0xda <__bad_interrupt>
      10:	0c 94 6d 00 	jmp	0xda	; 0xda <__bad_interrupt>
      14:	0c 94 6d 00 	jmp	0xda	; 0xda <__bad_interrupt>
      18:	0c 94 6d 00 	jmp	0xda	; 0xda <__bad_interrupt>
      1c:	0c 94 6d 00 	jmp	0xda	; 0xda <__bad_interrupt>
      20:	0c 94 3f 05 	jmp	0xa7e	; 0xa7e <__vector_8>
      24:	0c 94 6d 00 	jmp	0xda	; 0xda <__bad_interrupt>
      28:	0c 94 6d 00 	jmp	0xda	; 0xda <__bad_interrupt>
      2c:	0c 94 a9 05 	jmp	0xb52	; 0xb52 <__vector_11>
      30:	0c 94 6d 00 	jmp	0xda	; 0xda <__bad_interrupt>
      34:	0c 94 6d 00 	jmp	0xda	; 0xda <__bad_interrupt>
      38:	0c 94 6d 00 	jmp	0xda	; 0xda <__bad_interrupt>
      3c:	0c 94 6d 00 	jmp	0xda	; 0xda <__bad_interrupt>
      40:	0c 94 6d 00 	jmp	0xda	; 0xda <__bad_interrupt>
      44:	0c 94 6d 00 	jmp	0xda	; 0xda <__bad_interrupt>
      48:	0c 94 6d 00 	jmp	0xda	; 0xda <__bad_interrupt>
      4c:	0c 94 6d 00 	jmp	0xda	; 0xda <__bad_interrupt>
      50:	0c 94 6d 00 	jmp	0xda	; 0xda <__bad_interrupt>
      54:	08 4a       	sbci	r16, 0xA8	; 168
      56:	d7 3b       	cpi	r29, 0xB7	; 183
      58:	3b ce       	rjmp	.-906    	; 0xfffffcd0 <__eeprom_end+0xff7efcd0>
      5a:	01 6e       	ori	r16, 0xE1	; 225
      5c:	84 bc       	out	0x24, r8	; 36
      5e:	bf fd       	.word	0xfdbf	; ????
      60:	c1 2f       	mov	r28, r17
      62:	3d 6c       	ori	r19, 0xCD	; 205
      64:	74 31       	cpi	r23, 0x14	; 20
      66:	9a bd       	out	0x2a, r25	; 42
      68:	56 83       	std	Z+6, r21	; 0x06
      6a:	3d da       	rcall	.-2950   	; 0xfffff4e6 <__eeprom_end+0xff7ef4e6>
      6c:	3d 00       	.word	0x003d	; ????
      6e:	c7 7f       	andi	r28, 0xF7	; 247
      70:	11 be       	out	0x31, r1	; 49
      72:	d9 e4       	ldi	r29, 0x49	; 73
      74:	bb 4c       	sbci	r27, 0xCB	; 203
      76:	3e 91       	ld	r19, -X
      78:	6b aa       	std	Y+51, r6	; 0x33
      7a:	aa be       	out	0x3a, r10	; 58
      7c:	00 00       	nop
      7e:	00 80       	ld	r0, Z
      80:	3f 05       	cpc	r19, r15
      82:	a8 4c       	sbci	r26, 0xC8	; 200
      84:	cd b2       	in	r12, 0x1d	; 29
      86:	d4 4e       	sbci	r29, 0xE4	; 228
      88:	b9 38       	cpi	r27, 0x89	; 137
      8a:	36 a9       	ldd	r19, Z+54	; 0x36
      8c:	02 0c       	add	r0, r2
      8e:	50 b9       	out	0x00, r21	; 0
      90:	91 86       	std	Z+9, r9	; 0x09
      92:	88 08       	sbc	r8, r8
      94:	3c a6       	std	Y+44, r3	; 0x2c
      96:	aa aa       	std	Y+50, r10	; 0x32
      98:	2a be       	out	0x3a, r2	; 58
      9a:	00 00       	nop
      9c:	00 80       	ld	r0, Z
      9e:	3f 00       	.word	0x003f	; ????

000000a0 <__ctors_end>:
      a0:	11 24       	eor	r1, r1
      a2:	1f be       	out	0x3f, r1	; 63
      a4:	cf e5       	ldi	r28, 0x5F	; 95
      a6:	d4 e0       	ldi	r29, 0x04	; 4
      a8:	de bf       	out	0x3e, r29	; 62
      aa:	cd bf       	out	0x3d, r28	; 61

000000ac <__do_copy_data>:
      ac:	10 e0       	ldi	r17, 0x00	; 0
      ae:	a0 e6       	ldi	r26, 0x60	; 96
      b0:	b0 e0       	ldi	r27, 0x00	; 0
      b2:	e8 e9       	ldi	r30, 0x98	; 152
      b4:	f3 e1       	ldi	r31, 0x13	; 19
      b6:	02 c0       	rjmp	.+4      	; 0xbc <__do_copy_data+0x10>
      b8:	05 90       	lpm	r0, Z+
      ba:	0d 92       	st	X+, r0
      bc:	a0 36       	cpi	r26, 0x60	; 96
      be:	b1 07       	cpc	r27, r17
      c0:	d9 f7       	brne	.-10     	; 0xb8 <__do_copy_data+0xc>

000000c2 <__do_clear_bss>:
      c2:	20 e0       	ldi	r18, 0x00	; 0
      c4:	a0 e6       	ldi	r26, 0x60	; 96
      c6:	b0 e0       	ldi	r27, 0x00	; 0
      c8:	01 c0       	rjmp	.+2      	; 0xcc <.do_clear_bss_start>

000000ca <.do_clear_bss_loop>:
      ca:	1d 92       	st	X+, r1

000000cc <.do_clear_bss_start>:
      cc:	a7 3e       	cpi	r26, 0xE7	; 231
      ce:	b2 07       	cpc	r27, r18
      d0:	e1 f7       	brne	.-8      	; 0xca <.do_clear_bss_loop>
      d2:	0e 94 f4 02 	call	0x5e8	; 0x5e8 <main>
      d6:	0c 94 ca 09 	jmp	0x1394	; 0x1394 <_exit>

000000da <__bad_interrupt>:
      da:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000de <buzzer_pin_config>:
* Logic: Setting PORTC3 as output which is the pin connected to the buzzer
* Example Call: buzzer_pin_config()
*/
void buzzer_pin_config (void)
{
	DDRC = DDRC | 0x08;		//Setting PORTC 3 as output
      de:	a3 9a       	sbi	0x14, 3	; 20
	PORTC = PORTC & 0xF7;		//Setting PORTC 3 logic low to turnoff buzzer
      e0:	ab 98       	cbi	0x15, 3	; 21
      e2:	08 95       	ret

000000e4 <buzzer_on>:
* Example Call: buzzer_on ()
*/
void buzzer_on (void)
{
	unsigned char port_restore = 0;
	port_restore = PINC;
      e4:	83 b3       	in	r24, 0x13	; 19
	port_restore = port_restore | 0x08;
      e6:	88 60       	ori	r24, 0x08	; 8
	PORTC = port_restore;
      e8:	85 bb       	out	0x15, r24	; 21
      ea:	08 95       	ret

000000ec <buzzer_off>:
* Example Call: buzzer_off()
*/
void buzzer_off (void)
{
	unsigned char port_restore = 0;
	port_restore = PINC;
      ec:	83 b3       	in	r24, 0x13	; 19
	port_restore = port_restore & 0xF7;
      ee:	87 7f       	andi	r24, 0xF7	; 247
	PORTC = port_restore;
      f0:	85 bb       	out	0x15, r24	; 21
      f2:	08 95       	ret

000000f4 <lcd_wr_command>:
	lcd_port |= letter;
	sbit(lcd_port,RS);
	cbit(lcd_port,RW);
	sbit(lcd_port,EN);
	_delay_ms(5);
	cbit(lcd_port,EN);
      f4:	95 b3       	in	r25, 0x15	; 21
      f6:	9f 70       	andi	r25, 0x0F	; 15
      f8:	95 bb       	out	0x15, r25	; 21
      fa:	95 b3       	in	r25, 0x15	; 21
      fc:	28 2f       	mov	r18, r24
      fe:	20 7f       	andi	r18, 0xF0	; 240
     100:	92 2b       	or	r25, r18
     102:	95 bb       	out	0x15, r25	; 21
     104:	a8 98       	cbi	0x15, 0	; 21
     106:	a9 98       	cbi	0x15, 1	; 21
     108:	aa 9a       	sbi	0x15, 2	; 21
     10a:	ef ef       	ldi	r30, 0xFF	; 255
     10c:	f3 e2       	ldi	r31, 0x23	; 35
     10e:	31 97       	sbiw	r30, 0x01	; 1
     110:	f1 f7       	brne	.-4      	; 0x10e <lcd_wr_command+0x1a>
     112:	00 c0       	rjmp	.+0      	; 0x114 <lcd_wr_command+0x20>
     114:	00 00       	nop
     116:	aa 98       	cbi	0x15, 2	; 21
     118:	95 b3       	in	r25, 0x15	; 21
     11a:	9f 70       	andi	r25, 0x0F	; 15
     11c:	95 bb       	out	0x15, r25	; 21
     11e:	95 b3       	in	r25, 0x15	; 21
     120:	82 95       	swap	r24
     122:	80 7f       	andi	r24, 0xF0	; 240
     124:	89 2b       	or	r24, r25
     126:	85 bb       	out	0x15, r24	; 21
     128:	a8 98       	cbi	0x15, 0	; 21
     12a:	a9 98       	cbi	0x15, 1	; 21
     12c:	aa 9a       	sbi	0x15, 2	; 21
     12e:	8f ef       	ldi	r24, 0xFF	; 255
     130:	93 e2       	ldi	r25, 0x23	; 35
     132:	01 97       	sbiw	r24, 0x01	; 1
     134:	f1 f7       	brne	.-4      	; 0x132 <lcd_wr_command+0x3e>
     136:	00 c0       	rjmp	.+0      	; 0x138 <lcd_wr_command+0x44>
     138:	00 00       	nop
     13a:	aa 98       	cbi	0x15, 2	; 21
     13c:	08 95       	ret

0000013e <lcd_port_config>:
     13e:	84 b3       	in	r24, 0x14	; 20
     140:	87 6f       	ori	r24, 0xF7	; 247
     142:	84 bb       	out	0x14, r24	; 20
     144:	85 b3       	in	r24, 0x15	; 21
     146:	80 78       	andi	r24, 0x80	; 128
     148:	85 bb       	out	0x15, r24	; 21
     14a:	08 95       	ret

0000014c <lcd_init>:
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     14c:	83 e3       	ldi	r24, 0x33	; 51
     14e:	97 e0       	ldi	r25, 0x07	; 7
     150:	01 97       	sbiw	r24, 0x01	; 1
     152:	f1 f7       	brne	.-4      	; 0x150 <lcd_init+0x4>
*/
static void lcd_set_4bit()
{
	_delay_ms(1);

	cbit(lcd_port,RS);				//RS=0 --- Command Input
     154:	a8 98       	cbi	0x15, 0	; 21
	cbit(lcd_port,RW);				//RW=0 --- Writing to LCD
     156:	a9 98       	cbi	0x15, 1	; 21
	lcd_port = 0x30;				//Sending 3
     158:	80 e3       	ldi	r24, 0x30	; 48
     15a:	85 bb       	out	0x15, r24	; 21
	sbit(lcd_port,EN);				//Set Enable Pin
     15c:	aa 9a       	sbi	0x15, 2	; 21
     15e:	ef ef       	ldi	r30, 0xFF	; 255
     160:	f3 e2       	ldi	r31, 0x23	; 35
     162:	31 97       	sbiw	r30, 0x01	; 1
     164:	f1 f7       	brne	.-4      	; 0x162 <lcd_init+0x16>
     166:	00 c0       	rjmp	.+0      	; 0x168 <lcd_init+0x1c>
     168:	00 00       	nop
	_delay_ms(5);					//Delay
	cbit(lcd_port,EN);				//Clear Enable Pin
     16a:	aa 98       	cbi	0x15, 2	; 21
     16c:	e3 e3       	ldi	r30, 0x33	; 51
     16e:	f7 e0       	ldi	r31, 0x07	; 7
     170:	31 97       	sbiw	r30, 0x01	; 1
     172:	f1 f7       	brne	.-4      	; 0x170 <lcd_init+0x24>

	_delay_ms(1);

	cbit(lcd_port,RS);				//RS=0 --- Command Input
     174:	a8 98       	cbi	0x15, 0	; 21
	cbit(lcd_port,RW);				//RW=0 --- Writing to LCD
     176:	a9 98       	cbi	0x15, 1	; 21
	lcd_port = 0x30;				//Sending 3
     178:	85 bb       	out	0x15, r24	; 21
	sbit(lcd_port,EN);				//Set Enable Pin
     17a:	aa 9a       	sbi	0x15, 2	; 21
     17c:	ef ef       	ldi	r30, 0xFF	; 255
     17e:	f3 e2       	ldi	r31, 0x23	; 35
     180:	31 97       	sbiw	r30, 0x01	; 1
     182:	f1 f7       	brne	.-4      	; 0x180 <lcd_init+0x34>
     184:	00 c0       	rjmp	.+0      	; 0x186 <lcd_init+0x3a>
     186:	00 00       	nop
	_delay_ms(5);					//Delay
	cbit(lcd_port,EN);				//Clear Enable Pin
     188:	aa 98       	cbi	0x15, 2	; 21
     18a:	e3 e3       	ldi	r30, 0x33	; 51
     18c:	f7 e0       	ldi	r31, 0x07	; 7
     18e:	31 97       	sbiw	r30, 0x01	; 1
     190:	f1 f7       	brne	.-4      	; 0x18e <lcd_init+0x42>

	_delay_ms(1);

	cbit(lcd_port,RS);				//RS=0 --- Command Input
     192:	a8 98       	cbi	0x15, 0	; 21
	cbit(lcd_port,RW);				//RW=0 --- Writing to LCD
     194:	a9 98       	cbi	0x15, 1	; 21
	lcd_port = 0x30;				//Sending 3
     196:	85 bb       	out	0x15, r24	; 21
	sbit(lcd_port,EN);				//Set Enable Pin
     198:	aa 9a       	sbi	0x15, 2	; 21
     19a:	8f ef       	ldi	r24, 0xFF	; 255
     19c:	93 e2       	ldi	r25, 0x23	; 35
     19e:	01 97       	sbiw	r24, 0x01	; 1
     1a0:	f1 f7       	brne	.-4      	; 0x19e <lcd_init+0x52>
     1a2:	00 c0       	rjmp	.+0      	; 0x1a4 <lcd_init+0x58>
     1a4:	00 00       	nop
	_delay_ms(5);					//Delay
	cbit(lcd_port,EN);				//Clear Enable Pin
     1a6:	aa 98       	cbi	0x15, 2	; 21
     1a8:	e3 e3       	ldi	r30, 0x33	; 51
     1aa:	f7 e0       	ldi	r31, 0x07	; 7
     1ac:	31 97       	sbiw	r30, 0x01	; 1
     1ae:	f1 f7       	brne	.-4      	; 0x1ac <lcd_init+0x60>

	_delay_ms(1);

	cbit(lcd_port,RS);				//RS=0 --- Command Input
     1b0:	a8 98       	cbi	0x15, 0	; 21
	cbit(lcd_port,RW);				//RW=0 --- Writing to LCD
     1b2:	a9 98       	cbi	0x15, 1	; 21
	lcd_port = 0x20;				//Sending 2 to initialise LCD 4-bit mode
     1b4:	80 e2       	ldi	r24, 0x20	; 32
     1b6:	85 bb       	out	0x15, r24	; 21
	sbit(lcd_port,EN);				//Set Enable Pin
     1b8:	aa 9a       	sbi	0x15, 2	; 21
     1ba:	8f ef       	ldi	r24, 0xFF	; 255
     1bc:	93 e2       	ldi	r25, 0x23	; 35
     1be:	01 97       	sbiw	r24, 0x01	; 1
     1c0:	f1 f7       	brne	.-4      	; 0x1be <lcd_init+0x72>
     1c2:	00 c0       	rjmp	.+0      	; 0x1c4 <lcd_init+0x78>
     1c4:	00 00       	nop
	_delay_ms(5);					//Delay
	cbit(lcd_port,EN);				//Clear Enable Pin
     1c6:	aa 98       	cbi	0x15, 2	; 21
     1c8:	e3 e3       	ldi	r30, 0x33	; 51
     1ca:	f7 e0       	ldi	r31, 0x07	; 7
     1cc:	31 97       	sbiw	r30, 0x01	; 1
     1ce:	f1 f7       	brne	.-4      	; 0x1cc <lcd_init+0x80>
{
	lcd_set_4bit();
	
	_delay_ms(1);

	lcd_wr_command(0x28);			//LCD 4-bit mode and 2 lines.
     1d0:	88 e2       	ldi	r24, 0x28	; 40
     1d2:	0e 94 7a 00 	call	0xf4	; 0xf4 <lcd_wr_command>
	lcd_wr_command(0x01);
     1d6:	81 e0       	ldi	r24, 0x01	; 1
     1d8:	0e 94 7a 00 	call	0xf4	; 0xf4 <lcd_wr_command>
	lcd_wr_command(0x06);
     1dc:	86 e0       	ldi	r24, 0x06	; 6
     1de:	0e 94 7a 00 	call	0xf4	; 0xf4 <lcd_wr_command>
	lcd_wr_command(0x0E);
     1e2:	8e e0       	ldi	r24, 0x0E	; 14
     1e4:	0e 94 7a 00 	call	0xf4	; 0xf4 <lcd_wr_command>
	lcd_wr_command(0x80);
     1e8:	80 e8       	ldi	r24, 0x80	; 128
     1ea:	0e 94 7a 00 	call	0xf4	; 0xf4 <lcd_wr_command>
     1ee:	08 95       	ret

000001f0 <port_init>:
}

int convert_ms_to_ticks(unsigned int ms)
{
	return ms*450/1000;
}
     1f0:	0e 94 97 03 	call	0x72e	; 0x72e <motion_pin_config>
     1f4:	0e 94 9f 00 	call	0x13e	; 0x13e <lcd_port_config>
     1f8:	0e 94 b8 03 	call	0x770	; 0x770 <left_encoder_pin_config>
     1fc:	0e 94 bb 03 	call	0x776	; 0x776 <right_encoder_pin_config>
     200:	0e 94 6f 00 	call	0xde	; 0xde <buzzer_pin_config>
     204:	08 95       	ret

00000206 <init_devices>:
     206:	f8 94       	cli
     208:	0e 94 f8 00 	call	0x1f0	; 0x1f0 <port_init>
     20c:	0e 94 a6 00 	call	0x14c	; 0x14c <lcd_init>
     210:	0e 94 2f 05 	call	0xa5e	; 0xa5e <timer1_init>
     214:	0e 94 9f 05 	call	0xb3e	; 0xb3e <uart0_init>
     218:	0e 94 be 03 	call	0x77c	; 0x77c <left_position_encoder_interrupt_init>
     21c:	0e 94 c5 03 	call	0x78a	; 0x78a <right_position_encoder_interrupt_init>
     220:	78 94       	sei
     222:	08 95       	ret

00000224 <avoid_obstacle>:
     224:	80 91 89 00 	lds	r24, 0x0089	; 0x800089 <trigger>
     228:	90 91 8a 00 	lds	r25, 0x008A	; 0x80008a <trigger+0x1>
     22c:	81 30       	cpi	r24, 0x01	; 1
     22e:	91 05       	cpc	r25, r1
     230:	31 f5       	brne	.+76     	; 0x27e <avoid_obstacle+0x5a>
     232:	0e 94 b4 03 	call	0x768	; 0x768 <hard_stop>
     236:	2f ef       	ldi	r18, 0xFF	; 255
     238:	8f e3       	ldi	r24, 0x3F	; 63
     23a:	92 e0       	ldi	r25, 0x02	; 2
     23c:	21 50       	subi	r18, 0x01	; 1
     23e:	80 40       	sbci	r24, 0x00	; 0
     240:	90 40       	sbci	r25, 0x00	; 0
     242:	e1 f7       	brne	.-8      	; 0x23c <avoid_obstacle+0x18>
     244:	00 c0       	rjmp	.+0      	; 0x246 <avoid_obstacle+0x22>
     246:	00 00       	nop
     248:	6a e5       	ldi	r22, 0x5A	; 90
     24a:	8a e5       	ldi	r24, 0x5A	; 90
     24c:	0e 94 9c 05 	call	0xb38	; 0xb38 <velocity2>
     250:	80 91 8b 00 	lds	r24, 0x008B	; 0x80008b <trigger_angle>
     254:	90 91 8c 00 	lds	r25, 0x008C	; 0x80008c <trigger_angle+0x1>
     258:	c3 97       	sbiw	r24, 0x33	; 51
     25a:	24 f0       	brlt	.+8      	; 0x264 <avoid_obstacle+0x40>
     25c:	82 e3       	ldi	r24, 0x32	; 50
     25e:	90 e0       	ldi	r25, 0x00	; 0
     260:	0e 94 60 04 	call	0x8c0	; 0x8c0 <back_mm>
     264:	80 91 8b 00 	lds	r24, 0x008B	; 0x80008b <trigger_angle>
     268:	90 91 8c 00 	lds	r25, 0x008C	; 0x80008c <trigger_angle+0x1>
     26c:	0e 94 6b 04 	call	0x8d6	; 0x8d6 <left_degrees>
     270:	82 e3       	ldi	r24, 0x32	; 50
     272:	90 e0       	ldi	r25, 0x00	; 0
     274:	0e 94 55 04 	call	0x8aa	; 0x8aa <forward_mm>
     278:	0e 94 b4 03 	call	0x768	; 0x768 <hard_stop>
     27c:	08 95       	ret
     27e:	02 97       	sbiw	r24, 0x02	; 2
     280:	29 f5       	brne	.+74     	; 0x2cc <avoid_obstacle+0xa8>
     282:	0e 94 b4 03 	call	0x768	; 0x768 <hard_stop>
     286:	2f ef       	ldi	r18, 0xFF	; 255
     288:	8f e3       	ldi	r24, 0x3F	; 63
     28a:	92 e0       	ldi	r25, 0x02	; 2
     28c:	21 50       	subi	r18, 0x01	; 1
     28e:	80 40       	sbci	r24, 0x00	; 0
     290:	90 40       	sbci	r25, 0x00	; 0
     292:	e1 f7       	brne	.-8      	; 0x28c <avoid_obstacle+0x68>
     294:	00 c0       	rjmp	.+0      	; 0x296 <avoid_obstacle+0x72>
     296:	00 00       	nop
     298:	6a e5       	ldi	r22, 0x5A	; 90
     29a:	8a e5       	ldi	r24, 0x5A	; 90
     29c:	0e 94 9c 05 	call	0xb38	; 0xb38 <velocity2>
     2a0:	80 91 8b 00 	lds	r24, 0x008B	; 0x80008b <trigger_angle>
     2a4:	90 91 8c 00 	lds	r25, 0x008C	; 0x80008c <trigger_angle+0x1>
     2a8:	c3 97       	sbiw	r24, 0x33	; 51
     2aa:	24 f0       	brlt	.+8      	; 0x2b4 <avoid_obstacle+0x90>
     2ac:	82 e3       	ldi	r24, 0x32	; 50
     2ae:	90 e0       	ldi	r25, 0x00	; 0
     2b0:	0e 94 60 04 	call	0x8c0	; 0x8c0 <back_mm>
     2b4:	80 91 8b 00 	lds	r24, 0x008B	; 0x80008b <trigger_angle>
     2b8:	90 91 8c 00 	lds	r25, 0x008C	; 0x80008c <trigger_angle+0x1>
     2bc:	0e 94 76 04 	call	0x8ec	; 0x8ec <right_degrees>
     2c0:	82 e3       	ldi	r24, 0x32	; 50
     2c2:	90 e0       	ldi	r25, 0x00	; 0
     2c4:	0e 94 55 04 	call	0x8aa	; 0x8aa <forward_mm>
     2c8:	0e 94 b4 03 	call	0x768	; 0x768 <hard_stop>
     2cc:	08 95       	ret

000002ce <PID>:
     2ce:	2f 92       	push	r2
     2d0:	3f 92       	push	r3
     2d2:	4f 92       	push	r4
     2d4:	5f 92       	push	r5
     2d6:	6f 92       	push	r6
     2d8:	7f 92       	push	r7
     2da:	8f 92       	push	r8
     2dc:	9f 92       	push	r9
     2de:	af 92       	push	r10
     2e0:	bf 92       	push	r11
     2e2:	cf 92       	push	r12
     2e4:	df 92       	push	r13
     2e6:	ef 92       	push	r14
     2e8:	ff 92       	push	r15
     2ea:	0f 93       	push	r16
     2ec:	1f 93       	push	r17
     2ee:	cf 93       	push	r28
     2f0:	df 93       	push	r29
     2f2:	cd b7       	in	r28, 0x3d	; 61
     2f4:	de b7       	in	r29, 0x3e	; 62
     2f6:	2a 97       	sbiw	r28, 0x0a	; 10
     2f8:	0f b6       	in	r0, 0x3f	; 63
     2fa:	f8 94       	cli
     2fc:	de bf       	out	0x3e, r29	; 62
     2fe:	0f be       	out	0x3f, r0	; 63
     300:	cd bf       	out	0x3d, r28	; 61
     302:	9a 83       	std	Y+2, r25	; 0x02
     304:	89 83       	std	Y+1, r24	; 0x01
     306:	e0 90 81 00 	lds	r14, 0x0081	; 0x800081 <y_req>
     30a:	f0 90 82 00 	lds	r15, 0x0082	; 0x800082 <y_req+0x1>
     30e:	80 91 85 00 	lds	r24, 0x0085	; 0x800085 <y_current>
     312:	90 91 86 00 	lds	r25, 0x0086	; 0x800086 <y_current+0x1>
     316:	b7 01       	movw	r22, r14
     318:	68 1b       	sub	r22, r24
     31a:	79 0b       	sbc	r23, r25
     31c:	07 2e       	mov	r0, r23
     31e:	00 0c       	add	r0, r0
     320:	88 0b       	sbc	r24, r24
     322:	99 0b       	sbc	r25, r25
     324:	0e 94 a1 07 	call	0xf42	; 0xf42 <__floatsisf>
     328:	0e 94 56 09 	call	0x12ac	; 0x12ac <square>
     32c:	4b 01       	movw	r8, r22
     32e:	5c 01       	movw	r10, r24
     330:	00 91 83 00 	lds	r16, 0x0083	; 0x800083 <x_req>
     334:	10 91 84 00 	lds	r17, 0x0084	; 0x800084 <x_req+0x1>
     338:	80 91 7f 00 	lds	r24, 0x007F	; 0x80007f <x_current>
     33c:	90 91 80 00 	lds	r25, 0x0080	; 0x800080 <x_current+0x1>
     340:	98 01       	movw	r18, r16
     342:	28 1b       	sub	r18, r24
     344:	39 0b       	sbc	r19, r25
     346:	b9 01       	movw	r22, r18
     348:	33 0f       	add	r19, r19
     34a:	88 0b       	sbc	r24, r24
     34c:	99 0b       	sbc	r25, r25
     34e:	0e 94 a1 07 	call	0xf42	; 0xf42 <__floatsisf>
     352:	0e 94 56 09 	call	0x12ac	; 0x12ac <square>
     356:	2b 01       	movw	r4, r22
     358:	3c 01       	movw	r6, r24
     35a:	a3 01       	movw	r20, r6
     35c:	92 01       	movw	r18, r4
     35e:	c5 01       	movw	r24, r10
     360:	b4 01       	movw	r22, r8
     362:	0e 94 14 06 	call	0xc28	; 0xc28 <__addsf3>
     366:	0e 94 16 09 	call	0x122c	; 0x122c <sqrt>
     36a:	0e 94 69 07 	call	0xed2	; 0xed2 <__fixsfsi>
     36e:	81 e0       	ldi	r24, 0x01	; 1
     370:	64 36       	cpi	r22, 0x64	; 100
     372:	71 05       	cpc	r23, r1
     374:	0c f0       	brlt	.+2      	; 0x378 <PID+0xaa>
     376:	80 e0       	ldi	r24, 0x00	; 0
     378:	a8 2f       	mov	r26, r24
     37a:	b0 e0       	ldi	r27, 0x00	; 0
     37c:	ba 87       	std	Y+10, r27	; 0x0a
     37e:	a9 87       	std	Y+9, r26	; 0x09
     380:	b0 93 61 00 	sts	0x0061, r27	; 0x800061 <__data_end+0x1>
     384:	a0 93 60 00 	sts	0x0060, r26	; 0x800060 <__data_end>
     388:	01 2b       	or	r16, r17
     38a:	11 f0       	breq	.+4      	; 0x390 <PID+0xc2>
     38c:	ef 28       	or	r14, r15
     38e:	49 f4       	brne	.+18     	; 0x3a2 <PID+0xd4>
     390:	0e 94 b4 03 	call	0x768	; 0x768 <hard_stop>
     394:	81 e0       	ldi	r24, 0x01	; 1
     396:	90 e0       	ldi	r25, 0x00	; 0
     398:	90 93 61 00 	sts	0x0061, r25	; 0x800061 <__data_end+0x1>
     39c:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__data_end>
     3a0:	0a c1       	rjmp	.+532    	; 0x5b6 <__stack+0x157>
     3a2:	88 23       	and	r24, r24
     3a4:	61 f0       	breq	.+24     	; 0x3be <PID+0xf0>
     3a6:	08 ec       	ldi	r16, 0xC8	; 200
     3a8:	10 e0       	ldi	r17, 0x00	; 0
     3aa:	0f 2e       	mov	r0, r31
     3ac:	fd ec       	ldi	r31, 0xCD	; 205
     3ae:	2f 2e       	mov	r2, r31
     3b0:	fc ec       	ldi	r31, 0xCC	; 204
     3b2:	3f 2e       	mov	r3, r31
     3b4:	43 2c       	mov	r4, r3
     3b6:	fe e3       	ldi	r31, 0x3E	; 62
     3b8:	5f 2e       	mov	r5, r31
     3ba:	f0 2d       	mov	r31, r0
     3bc:	0a c0       	rjmp	.+20     	; 0x3d2 <PID+0x104>
     3be:	00 e9       	ldi	r16, 0x90	; 144
     3c0:	11 e0       	ldi	r17, 0x01	; 1
     3c2:	0f 2e       	mov	r0, r31
     3c4:	f3 e3       	ldi	r31, 0x33	; 51
     3c6:	2f 2e       	mov	r2, r31
     3c8:	32 2c       	mov	r3, r2
     3ca:	42 2c       	mov	r4, r2
     3cc:	ff e3       	ldi	r31, 0x3F	; 63
     3ce:	5f 2e       	mov	r5, r31
     3d0:	f0 2d       	mov	r31, r0
     3d2:	65 31       	cpi	r22, 0x15	; 21
     3d4:	71 05       	cpc	r23, r1
     3d6:	0c f4       	brge	.+2      	; 0x3da <PID+0x10c>
     3d8:	ec c0       	rjmp	.+472    	; 0x5b2 <__stack+0x153>
     3da:	60 91 8f 00 	lds	r22, 0x008F	; 0x80008f <theta_current>
     3de:	70 91 90 00 	lds	r23, 0x0090	; 0x800090 <theta_current+0x1>
     3e2:	80 91 8d 00 	lds	r24, 0x008D	; 0x80008d <theta_req>
     3e6:	90 91 8e 00 	lds	r25, 0x008E	; 0x80008e <theta_req+0x1>
     3ea:	68 1b       	sub	r22, r24
     3ec:	79 0b       	sbc	r23, r25
     3ee:	07 2e       	mov	r0, r23
     3f0:	00 0c       	add	r0, r0
     3f2:	88 0b       	sbc	r24, r24
     3f4:	99 0b       	sbc	r25, r25
     3f6:	0e 94 a1 07 	call	0xf42	; 0xf42 <__floatsisf>
     3fa:	23 ec       	ldi	r18, 0xC3	; 195
     3fc:	35 ef       	ldi	r19, 0xF5	; 245
     3fe:	48 e4       	ldi	r20, 0x48	; 72
     400:	50 e4       	ldi	r21, 0x40	; 64
     402:	0e 94 9b 08 	call	0x1136	; 0x1136 <__mulsf3>
     406:	20 e0       	ldi	r18, 0x00	; 0
     408:	30 e0       	ldi	r19, 0x00	; 0
     40a:	44 e3       	ldi	r20, 0x34	; 52
     40c:	53 e4       	ldi	r21, 0x43	; 67
     40e:	0e 94 f7 06 	call	0xdee	; 0xdee <__divsf3>
     412:	6b 01       	movw	r12, r22
     414:	7c 01       	movw	r14, r24
     416:	0e 94 f2 06 	call	0xde4	; 0xde4 <cos>
     41a:	4b 01       	movw	r8, r22
     41c:	5c 01       	movw	r10, r24
     41e:	c7 01       	movw	r24, r14
     420:	b6 01       	movw	r22, r12
     422:	0e 94 08 09 	call	0x1210	; 0x1210 <sin>
     426:	a5 01       	movw	r20, r10
     428:	94 01       	movw	r18, r8
     42a:	0e 94 93 06 	call	0xd26	; 0xd26 <atan2>
     42e:	23 ea       	ldi	r18, 0xA3	; 163
     430:	3c e4       	ldi	r19, 0x4C	; 76
     432:	45 e6       	ldi	r20, 0x65	; 101
     434:	52 e4       	ldi	r21, 0x42	; 66
     436:	0e 94 9b 08 	call	0x1136	; 0x1136 <__mulsf3>
     43a:	6b 01       	movw	r12, r22
     43c:	7c 01       	movw	r14, r24
     43e:	60 93 91 00 	sts	0x0091, r22	; 0x800091 <er>
     442:	70 93 92 00 	sts	0x0092, r23	; 0x800092 <er+0x1>
     446:	80 93 93 00 	sts	0x0093, r24	; 0x800093 <er+0x2>
     44a:	90 93 94 00 	sts	0x0094, r25	; 0x800094 <er+0x3>
     44e:	e9 81       	ldd	r30, Y+1	; 0x01
     450:	fa 81       	ldd	r31, Y+2	; 0x02
     452:	bf 01       	movw	r22, r30
     454:	ff 0f       	add	r31, r31
     456:	88 0b       	sbc	r24, r24
     458:	99 0b       	sbc	r25, r25
     45a:	0e 94 a1 07 	call	0xf42	; 0xf42 <__floatsisf>
     45e:	4b 01       	movw	r8, r22
     460:	5c 01       	movw	r10, r24
     462:	9b 01       	movw	r18, r22
     464:	ac 01       	movw	r20, r24
     466:	c7 01       	movw	r24, r14
     468:	b6 01       	movw	r22, r12
     46a:	0e 94 9b 08 	call	0x1136	; 0x1136 <__mulsf3>
     46e:	20 91 6a 00 	lds	r18, 0x006A	; 0x80006a <integral>
     472:	30 91 6b 00 	lds	r19, 0x006B	; 0x80006b <integral+0x1>
     476:	40 91 6c 00 	lds	r20, 0x006C	; 0x80006c <integral+0x2>
     47a:	50 91 6d 00 	lds	r21, 0x006D	; 0x80006d <integral+0x3>
     47e:	0e 94 14 06 	call	0xc28	; 0xc28 <__addsf3>
     482:	6d 83       	std	Y+5, r22	; 0x05
     484:	7e 83       	std	Y+6, r23	; 0x06
     486:	8f 83       	std	Y+7, r24	; 0x07
     488:	98 87       	std	Y+8, r25	; 0x08
     48a:	60 93 6a 00 	sts	0x006A, r22	; 0x80006a <integral>
     48e:	70 93 6b 00 	sts	0x006B, r23	; 0x80006b <integral+0x1>
     492:	80 93 6c 00 	sts	0x006C, r24	; 0x80006c <integral+0x2>
     496:	90 93 6d 00 	sts	0x006D, r25	; 0x80006d <integral+0x3>
     49a:	20 91 6e 00 	lds	r18, 0x006E	; 0x80006e <previous_er>
     49e:	30 91 6f 00 	lds	r19, 0x006F	; 0x80006f <previous_er+0x1>
     4a2:	40 91 70 00 	lds	r20, 0x0070	; 0x800070 <previous_er+0x2>
     4a6:	50 91 71 00 	lds	r21, 0x0071	; 0x800071 <previous_er+0x3>
     4aa:	c7 01       	movw	r24, r14
     4ac:	b6 01       	movw	r22, r12
     4ae:	0e 94 13 06 	call	0xc26	; 0xc26 <__subsf3>
     4b2:	a5 01       	movw	r20, r10
     4b4:	94 01       	movw	r18, r8
     4b6:	0e 94 f7 06 	call	0xdee	; 0xdee <__divsf3>
     4ba:	4b 01       	movw	r8, r22
     4bc:	5c 01       	movw	r10, r24
     4be:	60 93 66 00 	sts	0x0066, r22	; 0x800066 <derivative>
     4c2:	70 93 67 00 	sts	0x0067, r23	; 0x800067 <derivative+0x1>
     4c6:	80 93 68 00 	sts	0x0068, r24	; 0x800068 <derivative+0x2>
     4ca:	90 93 69 00 	sts	0x0069, r25	; 0x800069 <derivative+0x3>
     4ce:	c0 92 6e 00 	sts	0x006E, r12	; 0x80006e <previous_er>
     4d2:	d0 92 6f 00 	sts	0x006F, r13	; 0x80006f <previous_er+0x1>
     4d6:	e0 92 70 00 	sts	0x0070, r14	; 0x800070 <previous_er+0x2>
     4da:	f0 92 71 00 	sts	0x0071, r15	; 0x800071 <previous_er+0x3>
     4de:	b8 01       	movw	r22, r16
     4e0:	66 0f       	add	r22, r22
     4e2:	77 1f       	adc	r23, r23
     4e4:	07 2e       	mov	r0, r23
     4e6:	00 0c       	add	r0, r0
     4e8:	88 0b       	sbc	r24, r24
     4ea:	99 0b       	sbc	r25, r25
     4ec:	0e 94 a1 07 	call	0xf42	; 0xf42 <__floatsisf>
     4f0:	69 83       	std	Y+1, r22	; 0x01
     4f2:	7a 83       	std	Y+2, r23	; 0x02
     4f4:	8b 83       	std	Y+3, r24	; 0x03
     4f6:	9c 83       	std	Y+4, r25	; 0x04
     4f8:	a7 01       	movw	r20, r14
     4fa:	96 01       	movw	r18, r12
     4fc:	c2 01       	movw	r24, r4
     4fe:	b1 01       	movw	r22, r2
     500:	0e 94 9b 08 	call	0x1136	; 0x1136 <__mulsf3>
     504:	6b 01       	movw	r12, r22
     506:	7c 01       	movw	r14, r24
     508:	20 e0       	ldi	r18, 0x00	; 0
     50a:	30 e0       	ldi	r19, 0x00	; 0
     50c:	a9 01       	movw	r20, r18
     50e:	6d 81       	ldd	r22, Y+5	; 0x05
     510:	7e 81       	ldd	r23, Y+6	; 0x06
     512:	8f 81       	ldd	r24, Y+7	; 0x07
     514:	98 85       	ldd	r25, Y+8	; 0x08
     516:	0e 94 9b 08 	call	0x1136	; 0x1136 <__mulsf3>
     51a:	9b 01       	movw	r18, r22
     51c:	ac 01       	movw	r20, r24
     51e:	c7 01       	movw	r24, r14
     520:	b6 01       	movw	r22, r12
     522:	0e 94 14 06 	call	0xc28	; 0xc28 <__addsf3>
     526:	6b 01       	movw	r12, r22
     528:	7c 01       	movw	r14, r24
     52a:	20 e0       	ldi	r18, 0x00	; 0
     52c:	30 e0       	ldi	r19, 0x00	; 0
     52e:	4c e8       	ldi	r20, 0x8C	; 140
     530:	52 e4       	ldi	r21, 0x42	; 66
     532:	c5 01       	movw	r24, r10
     534:	b4 01       	movw	r22, r8
     536:	0e 94 9b 08 	call	0x1136	; 0x1136 <__mulsf3>
     53a:	9b 01       	movw	r18, r22
     53c:	ac 01       	movw	r20, r24
     53e:	c7 01       	movw	r24, r14
     540:	b6 01       	movw	r22, r12
     542:	0e 94 14 06 	call	0xc28	; 0xc28 <__addsf3>
     546:	20 e0       	ldi	r18, 0x00	; 0
     548:	30 e0       	ldi	r19, 0x00	; 0
     54a:	40 e3       	ldi	r20, 0x30	; 48
     54c:	51 e4       	ldi	r21, 0x41	; 65
     54e:	0e 94 9b 08 	call	0x1136	; 0x1136 <__mulsf3>
     552:	6b 01       	movw	r12, r22
     554:	7c 01       	movw	r14, r24
     556:	9b 01       	movw	r18, r22
     558:	ac 01       	movw	r20, r24
     55a:	69 81       	ldd	r22, Y+1	; 0x01
     55c:	7a 81       	ldd	r23, Y+2	; 0x02
     55e:	8b 81       	ldd	r24, Y+3	; 0x03
     560:	9c 81       	ldd	r25, Y+4	; 0x04
     562:	0e 94 13 06 	call	0xc26	; 0xc26 <__subsf3>
     566:	20 e0       	ldi	r18, 0x00	; 0
     568:	30 e0       	ldi	r19, 0x00	; 0
     56a:	40 ec       	ldi	r20, 0xC0	; 192
     56c:	50 e4       	ldi	r21, 0x40	; 64
     56e:	0e 94 f7 06 	call	0xdee	; 0xdee <__divsf3>
     572:	0e 94 69 07 	call	0xed2	; 0xed2 <__fixsfsi>
     576:	2b 01       	movw	r4, r22
     578:	3c 01       	movw	r6, r24
     57a:	a7 01       	movw	r20, r14
     57c:	96 01       	movw	r18, r12
     57e:	69 81       	ldd	r22, Y+1	; 0x01
     580:	7a 81       	ldd	r23, Y+2	; 0x02
     582:	8b 81       	ldd	r24, Y+3	; 0x03
     584:	9c 81       	ldd	r25, Y+4	; 0x04
     586:	0e 94 14 06 	call	0xc28	; 0xc28 <__addsf3>
     58a:	20 e0       	ldi	r18, 0x00	; 0
     58c:	30 e0       	ldi	r19, 0x00	; 0
     58e:	40 ec       	ldi	r20, 0xC0	; 192
     590:	50 e4       	ldi	r21, 0x40	; 64
     592:	0e 94 f7 06 	call	0xdee	; 0xdee <__divsf3>
     596:	0e 94 69 07 	call	0xed2	; 0xed2 <__fixsfsi>
     59a:	dc 01       	movw	r26, r24
     59c:	cb 01       	movw	r24, r22
     59e:	b2 01       	movw	r22, r4
     5a0:	0e 94 56 05 	call	0xaac	; 0xaac <velocity>
     5a4:	29 85       	ldd	r18, Y+9	; 0x09
     5a6:	3a 85       	ldd	r19, Y+10	; 0x0a
     5a8:	30 93 61 00 	sts	0x0061, r19	; 0x800061 <__data_end+0x1>
     5ac:	20 93 60 00 	sts	0x0060, r18	; 0x800060 <__data_end>
     5b0:	02 c0       	rjmp	.+4      	; 0x5b6 <__stack+0x157>
     5b2:	0e 94 b4 03 	call	0x768	; 0x768 <hard_stop>
     5b6:	2a 96       	adiw	r28, 0x0a	; 10
     5b8:	0f b6       	in	r0, 0x3f	; 63
     5ba:	f8 94       	cli
     5bc:	de bf       	out	0x3e, r29	; 62
     5be:	0f be       	out	0x3f, r0	; 63
     5c0:	cd bf       	out	0x3d, r28	; 61
     5c2:	df 91       	pop	r29
     5c4:	cf 91       	pop	r28
     5c6:	1f 91       	pop	r17
     5c8:	0f 91       	pop	r16
     5ca:	ff 90       	pop	r15
     5cc:	ef 90       	pop	r14
     5ce:	df 90       	pop	r13
     5d0:	cf 90       	pop	r12
     5d2:	bf 90       	pop	r11
     5d4:	af 90       	pop	r10
     5d6:	9f 90       	pop	r9
     5d8:	8f 90       	pop	r8
     5da:	7f 90       	pop	r7
     5dc:	6f 90       	pop	r6
     5de:	5f 90       	pop	r5
     5e0:	4f 90       	pop	r4
     5e2:	3f 90       	pop	r3
     5e4:	2f 90       	pop	r2
     5e6:	08 95       	ret

000005e8 <main>:

int main()
{
	init_devices();
     5e8:	0e 94 03 01 	call	0x206	; 0x206 <init_devices>
	const int dt = 50;
	
	buzzer_on();
     5ec:	0e 94 72 00 	call	0xe4	; 0xe4 <buzzer_on>
     5f0:	2f ef       	ldi	r18, 0xFF	; 255
     5f2:	8f e3       	ldi	r24, 0x3F	; 63
     5f4:	92 e0       	ldi	r25, 0x02	; 2
     5f6:	21 50       	subi	r18, 0x01	; 1
     5f8:	80 40       	sbci	r24, 0x00	; 0
     5fa:	90 40       	sbci	r25, 0x00	; 0
     5fc:	e1 f7       	brne	.-8      	; 0x5f6 <main+0xe>
     5fe:	00 c0       	rjmp	.+0      	; 0x600 <main+0x18>
     600:	00 00       	nop
	_delay_ms(100);
	buzzer_off();
     602:	0e 94 76 00 	call	0xec	; 0xec <buzzer_off>
					
	while(1)
	{
		if((stopwatch-previous_PID_time)>convert_ms_to_ticks(dt))
     606:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <stopwatch>
     60a:	90 91 7b 00 	lds	r25, 0x007B	; 0x80007b <stopwatch+0x1>
     60e:	20 91 64 00 	lds	r18, 0x0064	; 0x800064 <previous_PID_time>
     612:	30 91 65 00 	lds	r19, 0x0065	; 0x800065 <previous_PID_time+0x1>
     616:	82 1b       	sub	r24, r18
     618:	93 0b       	sbc	r25, r19
     61a:	47 97       	sbiw	r24, 0x17	; 23
     61c:	a0 f0       	brcs	.+40     	; 0x646 <main+0x5e>
		{
			previous_PID_time=stopwatch;
     61e:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <stopwatch>
     622:	90 91 7b 00 	lds	r25, 0x007B	; 0x80007b <stopwatch+0x1>
     626:	90 93 65 00 	sts	0x0065, r25	; 0x800065 <previous_PID_time+0x1>
     62a:	80 93 64 00 	sts	0x0064, r24	; 0x800064 <previous_PID_time>
			update_values();
     62e:	0e 94 81 04 	call	0x902	; 0x902 <update_values>
			
			if (trigger==0)
     632:	80 91 89 00 	lds	r24, 0x0089	; 0x800089 <trigger>
     636:	90 91 8a 00 	lds	r25, 0x008A	; 0x80008a <trigger+0x1>
     63a:	89 2b       	or	r24, r25
     63c:	21 f4       	brne	.+8      	; 0x646 <main+0x5e>
				PID(dt);
     63e:	82 e3       	ldi	r24, 0x32	; 50
     640:	90 e0       	ldi	r25, 0x00	; 0
     642:	0e 94 67 01 	call	0x2ce	; 0x2ce <PID>
		}
		
		if ((stopwatch-previous_obs_time)>convert_ms_to_ticks(50))
     646:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <stopwatch>
     64a:	90 91 7b 00 	lds	r25, 0x007B	; 0x80007b <stopwatch+0x1>
     64e:	20 91 62 00 	lds	r18, 0x0062	; 0x800062 <previous_obs_time>
     652:	30 91 63 00 	lds	r19, 0x0063	; 0x800063 <previous_obs_time+0x1>
     656:	82 1b       	sub	r24, r18
     658:	93 0b       	sbc	r25, r19
     65a:	47 97       	sbiw	r24, 0x17	; 23
     65c:	a0 f2       	brcs	.-88     	; 0x606 <main+0x1e>
		{
			previous_obs_time=stopwatch;
     65e:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <stopwatch>
     662:	90 91 7b 00 	lds	r25, 0x007B	; 0x80007b <stopwatch+0x1>
     666:	90 93 63 00 	sts	0x0063, r25	; 0x800063 <previous_obs_time+0x1>
     66a:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <previous_obs_time>
			if (trigger && !destination)
     66e:	80 91 89 00 	lds	r24, 0x0089	; 0x800089 <trigger>
     672:	90 91 8a 00 	lds	r25, 0x008A	; 0x80008a <trigger+0x1>
     676:	89 2b       	or	r24, r25
     678:	31 f2       	breq	.-116    	; 0x606 <main+0x1e>
     67a:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__data_end>
     67e:	90 91 61 00 	lds	r25, 0x0061	; 0x800061 <__data_end+0x1>
     682:	89 2b       	or	r24, r25
     684:	09 f0       	breq	.+2      	; 0x688 <main+0xa0>
     686:	bf cf       	rjmp	.-130    	; 0x606 <main+0x1e>
			{
				avoid_obstacle();
     688:	0e 94 12 01 	call	0x224	; 0x224 <avoid_obstacle>
     68c:	bc cf       	rjmp	.-136    	; 0x606 <main+0x1e>

0000068e <motion_set>:
	motion_set(0x00);
}

void soft_stop (void)       //soft stop(stops slowly)
{
	motion_set(0x0F);
     68e:	98 b3       	in	r25, 0x18	; 24
     690:	90 7f       	andi	r25, 0xF0	; 240
     692:	8f 70       	andi	r24, 0x0F	; 15
     694:	98 2b       	or	r25, r24
     696:	98 bb       	out	0x18, r25	; 24
     698:	08 95       	ret

0000069a <__vector_2>:
     69a:	1f 92       	push	r1
     69c:	0f 92       	push	r0
     69e:	0f b6       	in	r0, 0x3f	; 63
     6a0:	0f 92       	push	r0
     6a2:	11 24       	eor	r1, r1
     6a4:	8f 93       	push	r24
     6a6:	9f 93       	push	r25
     6a8:	af 93       	push	r26
     6aa:	bf 93       	push	r27
     6ac:	80 91 72 00 	lds	r24, 0x0072	; 0x800072 <ShaftCountRight>
     6b0:	90 91 73 00 	lds	r25, 0x0073	; 0x800073 <ShaftCountRight+0x1>
     6b4:	a0 91 74 00 	lds	r26, 0x0074	; 0x800074 <ShaftCountRight+0x2>
     6b8:	b0 91 75 00 	lds	r27, 0x0075	; 0x800075 <ShaftCountRight+0x3>
     6bc:	01 96       	adiw	r24, 0x01	; 1
     6be:	a1 1d       	adc	r26, r1
     6c0:	b1 1d       	adc	r27, r1
     6c2:	80 93 72 00 	sts	0x0072, r24	; 0x800072 <ShaftCountRight>
     6c6:	90 93 73 00 	sts	0x0073, r25	; 0x800073 <ShaftCountRight+0x1>
     6ca:	a0 93 74 00 	sts	0x0074, r26	; 0x800074 <ShaftCountRight+0x2>
     6ce:	b0 93 75 00 	sts	0x0075, r27	; 0x800075 <ShaftCountRight+0x3>
     6d2:	bf 91       	pop	r27
     6d4:	af 91       	pop	r26
     6d6:	9f 91       	pop	r25
     6d8:	8f 91       	pop	r24
     6da:	0f 90       	pop	r0
     6dc:	0f be       	out	0x3f, r0	; 63
     6de:	0f 90       	pop	r0
     6e0:	1f 90       	pop	r1
     6e2:	18 95       	reti

000006e4 <__vector_1>:
     6e4:	1f 92       	push	r1
     6e6:	0f 92       	push	r0
     6e8:	0f b6       	in	r0, 0x3f	; 63
     6ea:	0f 92       	push	r0
     6ec:	11 24       	eor	r1, r1
     6ee:	8f 93       	push	r24
     6f0:	9f 93       	push	r25
     6f2:	af 93       	push	r26
     6f4:	bf 93       	push	r27
     6f6:	80 91 76 00 	lds	r24, 0x0076	; 0x800076 <ShaftCountLeft>
     6fa:	90 91 77 00 	lds	r25, 0x0077	; 0x800077 <ShaftCountLeft+0x1>
     6fe:	a0 91 78 00 	lds	r26, 0x0078	; 0x800078 <ShaftCountLeft+0x2>
     702:	b0 91 79 00 	lds	r27, 0x0079	; 0x800079 <ShaftCountLeft+0x3>
     706:	01 96       	adiw	r24, 0x01	; 1
     708:	a1 1d       	adc	r26, r1
     70a:	b1 1d       	adc	r27, r1
     70c:	80 93 76 00 	sts	0x0076, r24	; 0x800076 <ShaftCountLeft>
     710:	90 93 77 00 	sts	0x0077, r25	; 0x800077 <ShaftCountLeft+0x1>
     714:	a0 93 78 00 	sts	0x0078, r26	; 0x800078 <ShaftCountLeft+0x2>
     718:	b0 93 79 00 	sts	0x0079, r27	; 0x800079 <ShaftCountLeft+0x3>
     71c:	bf 91       	pop	r27
     71e:	af 91       	pop	r26
     720:	9f 91       	pop	r25
     722:	8f 91       	pop	r24
     724:	0f 90       	pop	r0
     726:	0f be       	out	0x3f, r0	; 63
     728:	0f 90       	pop	r0
     72a:	1f 90       	pop	r1
     72c:	18 95       	reti

0000072e <motion_pin_config>:
     72e:	87 b3       	in	r24, 0x17	; 23
     730:	8f 60       	ori	r24, 0x0F	; 15
     732:	87 bb       	out	0x17, r24	; 23
     734:	88 b3       	in	r24, 0x18	; 24
     736:	80 7f       	andi	r24, 0xF0	; 240
     738:	88 bb       	out	0x18, r24	; 24
     73a:	81 b3       	in	r24, 0x11	; 17
     73c:	80 63       	ori	r24, 0x30	; 48
     73e:	81 bb       	out	0x11, r24	; 17
     740:	82 b3       	in	r24, 0x12	; 18
     742:	80 63       	ori	r24, 0x30	; 48
     744:	82 bb       	out	0x12, r24	; 18
     746:	08 95       	ret

00000748 <forward>:
     748:	86 e0       	ldi	r24, 0x06	; 6
     74a:	0e 94 47 03 	call	0x68e	; 0x68e <motion_set>
     74e:	08 95       	ret

00000750 <back>:
     750:	89 e0       	ldi	r24, 0x09	; 9
     752:	0e 94 47 03 	call	0x68e	; 0x68e <motion_set>
     756:	08 95       	ret

00000758 <left>:
     758:	85 e0       	ldi	r24, 0x05	; 5
     75a:	0e 94 47 03 	call	0x68e	; 0x68e <motion_set>
     75e:	08 95       	ret

00000760 <right>:
     760:	8a e0       	ldi	r24, 0x0A	; 10
     762:	0e 94 47 03 	call	0x68e	; 0x68e <motion_set>
     766:	08 95       	ret

00000768 <hard_stop>:
     768:	80 e0       	ldi	r24, 0x00	; 0
     76a:	0e 94 47 03 	call	0x68e	; 0x68e <motion_set>
     76e:	08 95       	ret

00000770 <left_encoder_pin_config>:
* Logic: PORTD 3 pin is set as input-xxxx0xxx
* Example Call: left_encoder_pin_config ()
*/
void left_encoder_pin_config (void)
{
	DDRD  = DDRD & 0xF7;  //Set the direction of the PORTD 3 pin as input
     770:	8b 98       	cbi	0x11, 3	; 17
	PORTD = PORTD | 0x08; //Enable internal pull-up for PORTD 3 pin
     772:	93 9a       	sbi	0x12, 3	; 18
     774:	08 95       	ret

00000776 <right_encoder_pin_config>:
* Logic: PORTD 2 pin is set as input-xxxxx0xx
* Example Call: right_encoder_pin_config ()
*/
void right_encoder_pin_config (void)
{
	DDRD  = DDRD & 0xFB;  //Set the direction of the PORTD 2 pin as input
     776:	8a 98       	cbi	0x11, 2	; 17
	PORTD = PORTD | 0x04; //Enable internal pull-up for PORTD 2 pin
     778:	92 9a       	sbi	0x12, 2	; 18
     77a:	08 95       	ret

0000077c <left_position_encoder_interrupt_init>:
* Logic: Given alongside the code
* Example Call: left_position_encoder_interrupt_init ()
*/
void left_position_encoder_interrupt_init (void)
{
	MCUCR = MCUCR | 0x04; // INT1 is set to trigger with a falling or rising edge
     77c:	85 b7       	in	r24, 0x35	; 53
     77e:	84 60       	ori	r24, 0x04	; 4
     780:	85 bf       	out	0x35, r24	; 53
	GICR = GICR | 0x80;   // Enable Interrupt INT1 for left position encoder
     782:	8b b7       	in	r24, 0x3b	; 59
     784:	80 68       	ori	r24, 0x80	; 128
     786:	8b bf       	out	0x3b, r24	; 59
     788:	08 95       	ret

0000078a <right_position_encoder_interrupt_init>:
* Logic: Given alongside the code
* Example Call: right_position_encoder_interrupt_init ()
*/
void right_position_encoder_interrupt_init (void) //Interrupt 0 enable
{
	MCUCR = MCUCR | 0x01; // INT0 is set to trigger with a falling or rising edge
     78a:	85 b7       	in	r24, 0x35	; 53
     78c:	81 60       	ori	r24, 0x01	; 1
     78e:	85 bf       	out	0x35, r24	; 53
	GICR = GICR | 0x40;   // Enable Interrupt INT5 for right position encoder
     790:	8b b7       	in	r24, 0x3b	; 59
     792:	80 64       	ori	r24, 0x40	; 64
     794:	8b bf       	out	0x3b, r24	; 59
     796:	08 95       	ret

00000798 <stop>:
* Output: Stops the bot
* Example Call: stop()
*/
void stop (void)
{
	motion_set(0x00);
     798:	80 e0       	ldi	r24, 0x00	; 0
     79a:	0e 94 47 03 	call	0x68e	; 0x68e <motion_set>
     79e:	08 95       	ret

000007a0 <angle_rotate>:
		 3.Wait for TurnCount to become equal to the required count
		 4.Stop the Bot
* Example Call: angle_rotate(90)
*/
void angle_rotate(unsigned int Degrees)
{
     7a0:	0f 93       	push	r16
     7a2:	1f 93       	push	r17
	float ReqdShaftCount = 0;
	unsigned long int ReqdShaftCountInt = 0;

	ReqdShaftCount = (float) 2*Degrees/ 12.85; // division by resolution to get shaft count
     7a4:	bc 01       	movw	r22, r24
     7a6:	80 e0       	ldi	r24, 0x00	; 0
     7a8:	90 e0       	ldi	r25, 0x00	; 0
     7aa:	0e 94 9f 07 	call	0xf3e	; 0xf3e <__floatunsisf>
     7ae:	9b 01       	movw	r18, r22
     7b0:	ac 01       	movw	r20, r24
     7b2:	0e 94 14 06 	call	0xc28	; 0xc28 <__addsf3>
     7b6:	2a e9       	ldi	r18, 0x9A	; 154
     7b8:	39 e9       	ldi	r19, 0x99	; 153
     7ba:	4d e4       	ldi	r20, 0x4D	; 77
     7bc:	51 e4       	ldi	r21, 0x41	; 65
     7be:	0e 94 f7 06 	call	0xdee	; 0xdee <__divsf3>
	ReqdShaftCountInt = (unsigned int) ReqdShaftCount;
     7c2:	0e 94 70 07 	call	0xee0	; 0xee0 <__fixunssfsi>
     7c6:	8b 01       	movw	r16, r22
     7c8:	20 e0       	ldi	r18, 0x00	; 0
     7ca:	30 e0       	ldi	r19, 0x00	; 0
	ShaftCountRight = 0;
     7cc:	10 92 72 00 	sts	0x0072, r1	; 0x800072 <ShaftCountRight>
     7d0:	10 92 73 00 	sts	0x0073, r1	; 0x800073 <ShaftCountRight+0x1>
     7d4:	10 92 74 00 	sts	0x0074, r1	; 0x800074 <ShaftCountRight+0x2>
     7d8:	10 92 75 00 	sts	0x0075, r1	; 0x800075 <ShaftCountRight+0x3>
	ShaftCountLeft = 0;
     7dc:	10 92 76 00 	sts	0x0076, r1	; 0x800076 <ShaftCountLeft>
     7e0:	10 92 77 00 	sts	0x0077, r1	; 0x800077 <ShaftCountLeft+0x1>
     7e4:	10 92 78 00 	sts	0x0078, r1	; 0x800078 <ShaftCountLeft+0x2>
     7e8:	10 92 79 00 	sts	0x0079, r1	; 0x800079 <ShaftCountLeft+0x3>

	while (1)
	{
		if((ShaftCountRight+ShaftCountLeft)/2 >= ReqdShaftCountInt)
     7ec:	80 91 72 00 	lds	r24, 0x0072	; 0x800072 <ShaftCountRight>
     7f0:	90 91 73 00 	lds	r25, 0x0073	; 0x800073 <ShaftCountRight+0x1>
     7f4:	a0 91 74 00 	lds	r26, 0x0074	; 0x800074 <ShaftCountRight+0x2>
     7f8:	b0 91 75 00 	lds	r27, 0x0075	; 0x800075 <ShaftCountRight+0x3>
     7fc:	40 91 76 00 	lds	r20, 0x0076	; 0x800076 <ShaftCountLeft>
     800:	50 91 77 00 	lds	r21, 0x0077	; 0x800077 <ShaftCountLeft+0x1>
     804:	60 91 78 00 	lds	r22, 0x0078	; 0x800078 <ShaftCountLeft+0x2>
     808:	70 91 79 00 	lds	r23, 0x0079	; 0x800079 <ShaftCountLeft+0x3>
     80c:	84 0f       	add	r24, r20
     80e:	95 1f       	adc	r25, r21
     810:	a6 1f       	adc	r26, r22
     812:	b7 1f       	adc	r27, r23
     814:	b6 95       	lsr	r27
     816:	a7 95       	ror	r26
     818:	97 95       	ror	r25
     81a:	87 95       	ror	r24
     81c:	80 17       	cp	r24, r16
     81e:	91 07       	cpc	r25, r17
     820:	a2 07       	cpc	r26, r18
     822:	b3 07       	cpc	r27, r19
     824:	18 f3       	brcs	.-58     	; 0x7ec <angle_rotate+0x4c>
		break;
	}
	stop(); //Stop robot
     826:	0e 94 cc 03 	call	0x798	; 0x798 <stop>
}
     82a:	1f 91       	pop	r17
     82c:	0f 91       	pop	r16
     82e:	08 95       	ret

00000830 <linear_distance_mm>:
		 3.Wait for ReqdShaftCountInt to become equal to the required count
		 4.Stop the Bot
* Example Call: linear_distance_mm(1000) -> Move one meter
*/
void linear_distance_mm(unsigned int DistanceInMM)
{
     830:	0f 93       	push	r16
     832:	1f 93       	push	r17
	float ReqdShaftCount = 0;
	unsigned long int ReqdShaftCountInt = 0;

	ReqdShaftCount = 2*DistanceInMM / 12.92; // division by resolution to get shaft count
     834:	88 0f       	add	r24, r24
     836:	99 1f       	adc	r25, r25
     838:	bc 01       	movw	r22, r24
     83a:	80 e0       	ldi	r24, 0x00	; 0
     83c:	90 e0       	ldi	r25, 0x00	; 0
     83e:	0e 94 9f 07 	call	0xf3e	; 0xf3e <__floatunsisf>
     842:	22 e5       	ldi	r18, 0x52	; 82
     844:	38 eb       	ldi	r19, 0xB8	; 184
     846:	4e e4       	ldi	r20, 0x4E	; 78
     848:	51 e4       	ldi	r21, 0x41	; 65
     84a:	0e 94 f7 06 	call	0xdee	; 0xdee <__divsf3>
	ReqdShaftCountInt = (unsigned long int) ReqdShaftCount;
     84e:	0e 94 70 07 	call	0xee0	; 0xee0 <__fixunssfsi>
     852:	8b 01       	movw	r16, r22
     854:	9c 01       	movw	r18, r24
	
	ShaftCountRight = 0;
     856:	10 92 72 00 	sts	0x0072, r1	; 0x800072 <ShaftCountRight>
     85a:	10 92 73 00 	sts	0x0073, r1	; 0x800073 <ShaftCountRight+0x1>
     85e:	10 92 74 00 	sts	0x0074, r1	; 0x800074 <ShaftCountRight+0x2>
     862:	10 92 75 00 	sts	0x0075, r1	; 0x800075 <ShaftCountRight+0x3>
	while(1)
	{
		if((ShaftCountRight+ShaftCountLeft)/2 >= ReqdShaftCountInt)
     866:	80 91 72 00 	lds	r24, 0x0072	; 0x800072 <ShaftCountRight>
     86a:	90 91 73 00 	lds	r25, 0x0073	; 0x800073 <ShaftCountRight+0x1>
     86e:	a0 91 74 00 	lds	r26, 0x0074	; 0x800074 <ShaftCountRight+0x2>
     872:	b0 91 75 00 	lds	r27, 0x0075	; 0x800075 <ShaftCountRight+0x3>
     876:	40 91 76 00 	lds	r20, 0x0076	; 0x800076 <ShaftCountLeft>
     87a:	50 91 77 00 	lds	r21, 0x0077	; 0x800077 <ShaftCountLeft+0x1>
     87e:	60 91 78 00 	lds	r22, 0x0078	; 0x800078 <ShaftCountLeft+0x2>
     882:	70 91 79 00 	lds	r23, 0x0079	; 0x800079 <ShaftCountLeft+0x3>
     886:	84 0f       	add	r24, r20
     888:	95 1f       	adc	r25, r21
     88a:	a6 1f       	adc	r26, r22
     88c:	b7 1f       	adc	r27, r23
     88e:	b6 95       	lsr	r27
     890:	a7 95       	ror	r26
     892:	97 95       	ror	r25
     894:	87 95       	ror	r24
     896:	80 17       	cp	r24, r16
     898:	91 07       	cpc	r25, r17
     89a:	a2 07       	cpc	r26, r18
     89c:	b3 07       	cpc	r27, r19
     89e:	18 f3       	brcs	.-58     	; 0x866 <linear_distance_mm+0x36>
		{
			break;
		}
	}
	stop(); //Stop robot
     8a0:	0e 94 cc 03 	call	0x798	; 0x798 <stop>
}
     8a4:	1f 91       	pop	r17
     8a6:	0f 91       	pop	r16
     8a8:	08 95       	ret

000008aa <forward_mm>:
* Logic: 1.Move forward
		 2.Stop after specified distance is reached
* Example Call: forward_mm(1000) -> Move forward one meter
*/
void forward_mm(unsigned int DistanceInMM)
{
     8aa:	cf 93       	push	r28
     8ac:	df 93       	push	r29
     8ae:	ec 01       	movw	r28, r24
	forward();
     8b0:	0e 94 a4 03 	call	0x748	; 0x748 <forward>
	linear_distance_mm(DistanceInMM);
     8b4:	ce 01       	movw	r24, r28
     8b6:	0e 94 18 04 	call	0x830	; 0x830 <linear_distance_mm>
}
     8ba:	df 91       	pop	r29
     8bc:	cf 91       	pop	r28
     8be:	08 95       	ret

000008c0 <back_mm>:
* Logic: 1.Move backwards
		 2.Stop after specified distance is reached
* Example Call: back_mm(1000) -> Move back one meter
*/
void back_mm(unsigned int DistanceInMM)
{
     8c0:	cf 93       	push	r28
     8c2:	df 93       	push	r29
     8c4:	ec 01       	movw	r28, r24
	back();
     8c6:	0e 94 a8 03 	call	0x750	; 0x750 <back>
	linear_distance_mm(DistanceInMM);
     8ca:	ce 01       	movw	r24, r28
     8cc:	0e 94 18 04 	call	0x830	; 0x830 <linear_distance_mm>
}
     8d0:	df 91       	pop	r29
     8d2:	cf 91       	pop	r28
     8d4:	08 95       	ret

000008d6 <left_degrees>:
* Logic: 1.Turn counter-clockwise
		 2.Stop after specified degrees is reached
* Example Call: left_degrees(90) -> Turn left by 90 degrees
*/
void left_degrees(unsigned int Degrees)
{
     8d6:	cf 93       	push	r28
     8d8:	df 93       	push	r29
     8da:	ec 01       	movw	r28, r24
	// 28 pulses for 360 degrees rotation 12.92 degrees per count
	left(); //Turn left
     8dc:	0e 94 ac 03 	call	0x758	; 0x758 <left>
	angle_rotate(Degrees);
     8e0:	ce 01       	movw	r24, r28
     8e2:	0e 94 d0 03 	call	0x7a0	; 0x7a0 <angle_rotate>
}
     8e6:	df 91       	pop	r29
     8e8:	cf 91       	pop	r28
     8ea:	08 95       	ret

000008ec <right_degrees>:
* Logic: 1.Turn clockwise
		 2.Stop after specified degrees is reached
* Example Call: right_degrees(90) -> Turn right by 90 degrees
*/
void right_degrees(unsigned int Degrees)
{
     8ec:	cf 93       	push	r28
     8ee:	df 93       	push	r29
     8f0:	ec 01       	movw	r28, r24
	// 28 pulses for 360 degrees rotation 12.92 degrees per count
	right(); //Turn right
     8f2:	0e 94 b0 03 	call	0x760	; 0x760 <right>
	angle_rotate(Degrees);
     8f6:	ce 01       	movw	r24, r28
     8f8:	0e 94 d0 03 	call	0x7a0	; 0x7a0 <angle_rotate>
}
     8fc:	df 91       	pop	r29
     8fe:	cf 91       	pop	r28
     900:	08 95       	ret

00000902 <update_values>:
		 The string is split into a 2D array using strchr function.
		 The strings are then converted to integer type using atoi function.
* Example Call: update_values()
*/
void update_values()
{
     902:	9f 92       	push	r9
     904:	af 92       	push	r10
     906:	bf 92       	push	r11
     908:	cf 92       	push	r12
     90a:	df 92       	push	r13
     90c:	ef 92       	push	r14
     90e:	ff 92       	push	r15
     910:	0f 93       	push	r16
     912:	1f 93       	push	r17
     914:	cf 93       	push	r28
     916:	df 93       	push	r29
     918:	cd b7       	in	r28, 0x3d	; 61
     91a:	de b7       	in	r29, 0x3e	; 62
     91c:	ca 55       	subi	r28, 0x5A	; 90
     91e:	d1 09       	sbc	r29, r1
     920:	0f b6       	in	r0, 0x3f	; 63
     922:	f8 94       	cli
     924:	de bf       	out	0x3e, r29	; 62
     926:	0f be       	out	0x3f, r0	; 63
     928:	cd bf       	out	0x3d, r28	; 61
	char parts[10][5];
	char data_string1[40];
	strcpy((char*)data_string1, (const char*)data_string);
     92a:	65 e9       	ldi	r22, 0x95	; 149
     92c:	70 e0       	ldi	r23, 0x00	; 0
     92e:	ce 01       	movw	r24, r28
     930:	c3 96       	adiw	r24, 0x33	; 51
     932:	0e 94 ac 09 	call	0x1358	; 0x1358 <strcpy>
	
	char *p_start, *p_end;
	unsigned char i=0;
     936:	91 2c       	mov	r9, r1
	p_start = data_string1;
     938:	ce 01       	movw	r24, r28
     93a:	c3 96       	adiw	r24, 0x33	; 51
     93c:	5c 01       	movw	r10, r24
	
	//Split the data_string1 into parts which are separated by a /
		while(1) 
		{
			p_end = strchr(p_start, '/');
     93e:	6f e2       	ldi	r22, 0x2F	; 47
     940:	70 e0       	ldi	r23, 0x00	; 0
     942:	c5 01       	movw	r24, r10
     944:	0e 94 a1 09 	call	0x1342	; 0x1342 <strchr>
     948:	6c 01       	movw	r12, r24
			if (p_end)
     94a:	00 97       	sbiw	r24, 0x00	; 0
     94c:	29 f1       	breq	.+74     	; 0x998 <update_values+0x96>
			{
				strncpy(parts[i], p_start, p_end-p_start);
     94e:	8c 01       	movw	r16, r24
     950:	0a 19       	sub	r16, r10
     952:	1b 09       	sbc	r17, r11
     954:	29 2d       	mov	r18, r9
     956:	30 e0       	ldi	r19, 0x00	; 0
     958:	79 01       	movw	r14, r18
     95a:	ee 0c       	add	r14, r14
     95c:	ff 1c       	adc	r15, r15
     95e:	ee 0c       	add	r14, r14
     960:	ff 1c       	adc	r15, r15
     962:	e2 0e       	add	r14, r18
     964:	f3 1e       	adc	r15, r19
     966:	a8 01       	movw	r20, r16
     968:	b5 01       	movw	r22, r10
     96a:	81 e0       	ldi	r24, 0x01	; 1
     96c:	90 e0       	ldi	r25, 0x00	; 0
     96e:	8c 0f       	add	r24, r28
     970:	9d 1f       	adc	r25, r29
     972:	8e 0d       	add	r24, r14
     974:	9f 1d       	adc	r25, r15
     976:	0e 94 b3 09 	call	0x1366	; 0x1366 <strncpy>
				parts[i][p_end-p_start] = 0;
     97a:	0e 0d       	add	r16, r14
     97c:	1f 1d       	adc	r17, r15
     97e:	e1 e0       	ldi	r30, 0x01	; 1
     980:	f0 e0       	ldi	r31, 0x00	; 0
     982:	ec 0f       	add	r30, r28
     984:	fd 1f       	adc	r31, r29
     986:	e0 0f       	add	r30, r16
     988:	f1 1f       	adc	r31, r17
     98a:	10 82       	st	Z, r1
				i++;
     98c:	93 94       	inc	r9
				p_start = p_end + 1;
     98e:	56 01       	movw	r10, r12
     990:	9f ef       	ldi	r25, 0xFF	; 255
     992:	a9 1a       	sub	r10, r25
     994:	b9 0a       	sbc	r11, r25
			}
			else
			break;
		}
     996:	d3 cf       	rjmp	.-90     	; 0x93e <update_values+0x3c>
		
		//Convert the string to int using atoi function
		if (1)//(checksum == atoi(parts[9]))	//If you want a checksum at the end of the data string
		{
			//id_var = atoi(parts[0]);
			x_current = atoi(parts[1]);
     998:	ce 01       	movw	r24, r28
     99a:	06 96       	adiw	r24, 0x06	; 6
     99c:	0e 94 83 09 	call	0x1306	; 0x1306 <atoi>
     9a0:	90 93 80 00 	sts	0x0080, r25	; 0x800080 <x_current+0x1>
     9a4:	80 93 7f 00 	sts	0x007F, r24	; 0x80007f <x_current>
			y_current = atoi(parts[2]);
     9a8:	ce 01       	movw	r24, r28
     9aa:	0b 96       	adiw	r24, 0x0b	; 11
     9ac:	0e 94 83 09 	call	0x1306	; 0x1306 <atoi>
     9b0:	90 93 86 00 	sts	0x0086, r25	; 0x800086 <y_current+0x1>
     9b4:	80 93 85 00 	sts	0x0085, r24	; 0x800085 <y_current>
			theta_current = abs(atoi(parts[3])-360+180-360); //(0)-(360)
     9b8:	ce 01       	movw	r24, r28
     9ba:	40 96       	adiw	r24, 0x10	; 16
     9bc:	0e 94 83 09 	call	0x1306	; 0x1306 <atoi>
     9c0:	8c 51       	subi	r24, 0x1C	; 28
     9c2:	92 40       	sbci	r25, 0x02	; 2
     9c4:	9c 01       	movw	r18, r24
     9c6:	22 f4       	brpl	.+8      	; 0x9d0 <update_values+0xce>
     9c8:	22 27       	eor	r18, r18
     9ca:	33 27       	eor	r19, r19
     9cc:	28 1b       	sub	r18, r24
     9ce:	39 0b       	sbc	r19, r25
     9d0:	30 93 90 00 	sts	0x0090, r19	; 0x800090 <theta_current+0x1>
     9d4:	20 93 8f 00 	sts	0x008F, r18	; 0x80008f <theta_current>
			x_req = atoi(parts[4]);
     9d8:	ce 01       	movw	r24, r28
     9da:	45 96       	adiw	r24, 0x15	; 21
     9dc:	0e 94 83 09 	call	0x1306	; 0x1306 <atoi>
     9e0:	90 93 84 00 	sts	0x0084, r25	; 0x800084 <x_req+0x1>
     9e4:	80 93 83 00 	sts	0x0083, r24	; 0x800083 <x_req>
			y_req = atoi(parts[5]);
     9e8:	ce 01       	movw	r24, r28
     9ea:	4a 96       	adiw	r24, 0x1a	; 26
     9ec:	0e 94 83 09 	call	0x1306	; 0x1306 <atoi>
     9f0:	90 93 82 00 	sts	0x0082, r25	; 0x800082 <y_req+0x1>
     9f4:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <y_req>
			theta_req = abs(atoi(parts[6])-180-360); //(0)-(360)
     9f8:	ce 01       	movw	r24, r28
     9fa:	4f 96       	adiw	r24, 0x1f	; 31
     9fc:	0e 94 83 09 	call	0x1306	; 0x1306 <atoi>
     a00:	8c 51       	subi	r24, 0x1C	; 28
     a02:	92 40       	sbci	r25, 0x02	; 2
     a04:	9c 01       	movw	r18, r24
     a06:	22 f4       	brpl	.+8      	; 0xa10 <update_values+0x10e>
     a08:	22 27       	eor	r18, r18
     a0a:	33 27       	eor	r19, r19
     a0c:	28 1b       	sub	r18, r24
     a0e:	39 0b       	sbc	r19, r25
     a10:	30 93 8e 00 	sts	0x008E, r19	; 0x80008e <theta_req+0x1>
     a14:	20 93 8d 00 	sts	0x008D, r18	; 0x80008d <theta_req>
			trigger = atoi(parts[7]);
     a18:	ce 01       	movw	r24, r28
     a1a:	84 96       	adiw	r24, 0x24	; 36
     a1c:	0e 94 83 09 	call	0x1306	; 0x1306 <atoi>
     a20:	90 93 8a 00 	sts	0x008A, r25	; 0x80008a <trigger+0x1>
     a24:	80 93 89 00 	sts	0x0089, r24	; 0x800089 <trigger>
			trigger_angle = atoi(parts[8]);
     a28:	ce 01       	movw	r24, r28
     a2a:	89 96       	adiw	r24, 0x29	; 41
     a2c:	0e 94 83 09 	call	0x1306	; 0x1306 <atoi>
     a30:	90 93 8c 00 	sts	0x008C, r25	; 0x80008c <trigger_angle+0x1>
     a34:	80 93 8b 00 	sts	0x008B, r24	; 0x80008b <trigger_angle>
		}
}
     a38:	c6 5a       	subi	r28, 0xA6	; 166
     a3a:	df 4f       	sbci	r29, 0xFF	; 255
     a3c:	0f b6       	in	r0, 0x3f	; 63
     a3e:	f8 94       	cli
     a40:	de bf       	out	0x3e, r29	; 62
     a42:	0f be       	out	0x3f, r0	; 63
     a44:	cd bf       	out	0x3d, r28	; 61
     a46:	df 91       	pop	r29
     a48:	cf 91       	pop	r28
     a4a:	1f 91       	pop	r17
     a4c:	0f 91       	pop	r16
     a4e:	ff 90       	pop	r15
     a50:	ef 90       	pop	r14
     a52:	df 90       	pop	r13
     a54:	cf 90       	pop	r12
     a56:	bf 90       	pop	r11
     a58:	af 90       	pop	r10
     a5a:	9f 90       	pop	r9
     a5c:	08 95       	ret

00000a5e <timer1_init>:
// WGM: 5) PWM 8bit fast, TOP=0x00FF
// desired value: 450Hz
// actual value: 450.000Hz (0.0%)
void timer1_init(void)
{
	TCCR1B = 0x00; //stop
     a5e:	1e bc       	out	0x2e, r1	; 46
	TCNT1H = 0xFF; //higher byte constant frequency value of PWM cycle
     a60:	8f ef       	ldi	r24, 0xFF	; 255
     a62:	8d bd       	out	0x2d, r24	; 45
	TCNT1L = 0x01; //lower byte constant frequency value of PWM cycle
     a64:	91 e0       	ldi	r25, 0x01	; 1
     a66:	9c bd       	out	0x2c, r25	; 44
	OCR1AH = 0x00;
     a68:	1b bc       	out	0x2b, r1	; 43
	OCR1AL = 0xFF;
     a6a:	8a bd       	out	0x2a, r24	; 42
	OCR1BH = 0x00;
     a6c:	19 bc       	out	0x29, r1	; 41
	OCR1BL = 0xFF;
     a6e:	88 bd       	out	0x28, r24	; 40
	// ICR1H  = 0x00;
	// ICR1L  = 0xFF;
	TCCR1A = 0xA1;
     a70:	81 ea       	ldi	r24, 0xA1	; 161
     a72:	8f bd       	out	0x2f, r24	; 47
	TIMSK = 0x04; //Enable overflow interrupt
     a74:	84 e0       	ldi	r24, 0x04	; 4
     a76:	89 bf       	out	0x39, r24	; 57
	//TCCR1B = 0x0D; //start Timer	//0000 1101	//1024 prescaler //freq becomes 28.23
	TCCR1B = 0x0B; //start Timer	//0000 1011	//64 prescaler //freq becomes 450
     a78:	8b e0       	ldi	r24, 0x0B	; 11
     a7a:	8e bd       	out	0x2e, r24	; 46
     a7c:	08 95       	ret

00000a7e <__vector_8>:
* Logic: This ISR is triggered when timer 1 overflows
		 Timer 1 is a 450 Hz timer
		 Therefore this ISR is triggered 450 times in one second
*/
ISR(TIMER1_OVF_vect)
{
     a7e:	1f 92       	push	r1
     a80:	0f 92       	push	r0
     a82:	0f b6       	in	r0, 0x3f	; 63
     a84:	0f 92       	push	r0
     a86:	11 24       	eor	r1, r1
     a88:	8f 93       	push	r24
     a8a:	9f 93       	push	r25
	stopwatch++;
     a8c:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <stopwatch>
     a90:	90 91 7b 00 	lds	r25, 0x007B	; 0x80007b <stopwatch+0x1>
     a94:	01 96       	adiw	r24, 0x01	; 1
     a96:	90 93 7b 00 	sts	0x007B, r25	; 0x80007b <stopwatch+0x1>
     a9a:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <stopwatch>
     a9e:	9f 91       	pop	r25
     aa0:	8f 91       	pop	r24
     aa2:	0f 90       	pop	r0
     aa4:	0f be       	out	0x3f, r0	; 63
     aa6:	0f 90       	pop	r0
     aa8:	1f 90       	pop	r1
     aaa:	18 95       	reti

00000aac <velocity>:
* Logic: Change the values of the OCRs of the PWM generating timer to change the duty cycle.
		 If input speed>255 or if speed<(-255) the speed is set to 255.
* Example Call: velocity(200,-50) -> turn right
*/
void velocity(int left_motor, int right_motor)
{
     aac:	0f 93       	push	r16
     aae:	1f 93       	push	r17
     ab0:	cf 93       	push	r28
     ab2:	df 93       	push	r29
     ab4:	ec 01       	movw	r28, r24
     ab6:	8b 01       	movw	r16, r22
	if (left_motor>=0 && right_motor>=0)
     ab8:	99 23       	and	r25, r25
     aba:	2c f0       	brlt	.+10     	; 0xac6 <velocity+0x1a>
     abc:	77 23       	and	r23, r23
     abe:	9c f1       	brlt	.+102    	; 0xb26 <velocity+0x7a>
	{
		forward();
     ac0:	0e 94 a4 03 	call	0x748	; 0x748 <forward>
     ac4:	2d c0       	rjmp	.+90     	; 0xb20 <velocity+0x74>
		//lcd_string2(2,1,"forward");
	}
	
	else if (left_motor<0 && right_motor>0)
     ac6:	16 16       	cp	r1, r22
     ac8:	17 06       	cpc	r1, r23
     aca:	64 f4       	brge	.+24     	; 0xae4 <velocity+0x38>
	{
		left();
     acc:	0e 94 ac 03 	call	0x758	; 0x758 <left>
		left_motor=abs(left_motor)+40;//some offset is added so that the wheel still turns at lower -ve values
     ad0:	ce 01       	movw	r24, r28
     ad2:	dd 23       	and	r29, r29
     ad4:	24 f4       	brge	.+8      	; 0xade <velocity+0x32>
     ad6:	88 27       	eor	r24, r24
     ad8:	99 27       	eor	r25, r25
     ada:	8c 1b       	sub	r24, r28
     adc:	9d 0b       	sbc	r25, r29
     ade:	ec 01       	movw	r28, r24
     ae0:	a8 96       	adiw	r28, 0x28	; 40
     ae2:	1e c0       	rjmp	.+60     	; 0xb20 <velocity+0x74>
		//lcd_string2(2,1,"left   ");
	}
	
	else if (left_motor>0 && right_motor<0)
     ae4:	18 16       	cp	r1, r24
     ae6:	19 06       	cpc	r1, r25
     ae8:	7c f4       	brge	.+30     	; 0xb08 <velocity+0x5c>
     aea:	77 23       	and	r23, r23
     aec:	6c f4       	brge	.+26     	; 0xb08 <velocity+0x5c>
	{
		right();
     aee:	0e 94 b0 03 	call	0x760	; 0x760 <right>
		right_motor=abs(right_motor)+40;//some offset is added so that the wheel still turns at lower -ve values
     af2:	c8 01       	movw	r24, r16
     af4:	99 23       	and	r25, r25
     af6:	24 f4       	brge	.+8      	; 0xb00 <velocity+0x54>
     af8:	88 27       	eor	r24, r24
     afa:	99 27       	eor	r25, r25
     afc:	80 1b       	sub	r24, r16
     afe:	91 0b       	sbc	r25, r17
     b00:	8c 01       	movw	r16, r24
     b02:	08 5d       	subi	r16, 0xD8	; 216
     b04:	1f 4f       	sbci	r17, 0xFF	; 255
     b06:	0c c0       	rjmp	.+24     	; 0xb20 <velocity+0x74>
		//lcd_string2(2,1,"right  ");
	}
	else 
	{
		back();
     b08:	0e 94 a8 03 	call	0x750	; 0x750 <back>
		left_motor=abs(left_motor);
     b0c:	dd 23       	and	r29, r29
     b0e:	1c f4       	brge	.+6      	; 0xb16 <velocity+0x6a>
     b10:	d1 95       	neg	r29
     b12:	c1 95       	neg	r28
     b14:	d1 09       	sbc	r29, r1
		right_motor=abs(right_motor);
     b16:	11 23       	and	r17, r17
     b18:	1c f4       	brge	.+6      	; 0xb20 <velocity+0x74>
     b1a:	11 95       	neg	r17
     b1c:	01 95       	neg	r16
     b1e:	11 09       	sbc	r17, r1
		//lcd_string2(2,1,"back   ");
	}
		OCR1AL = left_motor;     // duty cycle 'ON' period of PWM out for Left motor
     b20:	ca bd       	out	0x2a, r28	; 42
		OCR1BL = right_motor;     // duty cycle 'ON' period of PWM out for Right motor
     b22:	08 bd       	out	0x28, r16	; 40
     b24:	04 c0       	rjmp	.+8      	; 0xb2e <velocity+0x82>
		left();
		left_motor=abs(left_motor)+40;//some offset is added so that the wheel still turns at lower -ve values
		//lcd_string2(2,1,"left   ");
	}
	
	else if (left_motor>0 && right_motor<0)
     b26:	18 16       	cp	r1, r24
     b28:	19 06       	cpc	r1, r25
     b2a:	0c f3       	brlt	.-62     	; 0xaee <velocity+0x42>
     b2c:	ed cf       	rjmp	.-38     	; 0xb08 <velocity+0x5c>
		right_motor=abs(right_motor);
		//lcd_string2(2,1,"back   ");
	}
		OCR1AL = left_motor;     // duty cycle 'ON' period of PWM out for Left motor
		OCR1BL = right_motor;     // duty cycle 'ON' period of PWM out for Right motor
}
     b2e:	df 91       	pop	r29
     b30:	cf 91       	pop	r28
     b32:	1f 91       	pop	r17
     b34:	0f 91       	pop	r16
     b36:	08 95       	ret

00000b38 <velocity2>:
* Logic: Change the values of the OCRs of the PWM generating timer to change the duty cycle
* Example Call: velocity2(200,150)
*/
void velocity2(unsigned char left_motor, unsigned char right_motor)
{
	OCR1AL = left_motor;     // duty cycle 'ON' period of PWM out for Left motor
     b38:	8a bd       	out	0x2a, r24	; 42
	OCR1BL = right_motor;    // duty cycle 'ON' period of PWM out for Right motor
     b3a:	68 bd       	out	0x28, r22	; 40
     b3c:	08 95       	ret

00000b3e <uart0_init>:
char size: 8 bit
parity: Disabled
*/
void uart0_init(void)
{
 UCSRB = 0x00; //disable while setting baud rate
     b3e:	1a b8       	out	0x0a, r1	; 10
 UCSRA = 0x00;
     b40:	1b b8       	out	0x0b, r1	; 11
 UCSRC = 0x86;
     b42:	86 e8       	ldi	r24, 0x86	; 134
     b44:	80 bd       	out	0x20, r24	; 32
 //UBRRL = 0x2F; //set baud rate lo  //67 is for 16MHz 9600 baudrate
 UBRRL = 0x03; //set baud rate lo  //115200 baudrate
     b46:	83 e0       	ldi	r24, 0x03	; 3
     b48:	89 b9       	out	0x09, r24	; 9
 UBRRH = 0x00; //set baud rate hi
     b4a:	10 bc       	out	0x20, r1	; 32
 UCSRB = 0x98; 
     b4c:	88 e9       	ldi	r24, 0x98	; 152
     b4e:	8a b9       	out	0x0a, r24	; 10
     b50:	08 95       	ret

00000b52 <__vector_11>:
This interrupt then decides what to do with this character of data. 
If it is a valid byte of data it will be stored in the array "data_string_var". After a complete packet of data is received it is copied to the array "data_string".
<#.........#> is a proper string which then saved to "data_string" by the ISR.
*/
ISR(USART_RXC_vect)
{		
     b52:	1f 92       	push	r1
     b54:	0f 92       	push	r0
     b56:	0f b6       	in	r0, 0x3f	; 63
     b58:	0f 92       	push	r0
     b5a:	11 24       	eor	r1, r1
     b5c:	2f 93       	push	r18
     b5e:	3f 93       	push	r19
     b60:	4f 93       	push	r20
     b62:	5f 93       	push	r21
     b64:	6f 93       	push	r22
     b66:	7f 93       	push	r23
     b68:	8f 93       	push	r24
     b6a:	9f 93       	push	r25
     b6c:	af 93       	push	r26
     b6e:	bf 93       	push	r27
     b70:	ef 93       	push	r30
     b72:	ff 93       	push	r31
	previous_data = data;
     b74:	80 91 be 00 	lds	r24, 0x00BE	; 0x8000be <data>
     b78:	80 93 bd 00 	sts	0x00BD, r24	; 0x8000bd <previous_data>
	data = UDR;
     b7c:	8c b1       	in	r24, 0x0c	; 12
     b7e:	80 93 be 00 	sts	0x00BE, r24	; 0x8000be <data>
	
	strcpy((char*) data_string, (const char*)data_string_var); //Entire string received!! Save it!!
     b82:	6f eb       	ldi	r22, 0xBF	; 191
     b84:	70 e0       	ldi	r23, 0x00	; 0
     b86:	85 e9       	ldi	r24, 0x95	; 149
     b88:	90 e0       	ldi	r25, 0x00	; 0
     b8a:	0e 94 ac 09 	call	0x1358	; 0x1358 <strcpy>

	if (previous_data==0x3C && data == 0x23)//< and #
     b8e:	80 91 bd 00 	lds	r24, 0x00BD	; 0x8000bd <previous_data>
     b92:	8c 33       	cpi	r24, 0x3C	; 60
     b94:	61 f4       	brne	.+24     	; 0xbae <__vector_11+0x5c>
     b96:	80 91 be 00 	lds	r24, 0x00BE	; 0x8000be <data>
     b9a:	83 32       	cpi	r24, 0x23	; 35
     b9c:	41 f4       	brne	.+16     	; 0xbae <__vector_11+0x5c>
	{
		append_on = 1;
     b9e:	81 e0       	ldi	r24, 0x01	; 1
     ba0:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <append_on>
		i=0;
     ba4:	10 92 7e 00 	sts	0x007E, r1	; 0x80007e <i+0x1>
     ba8:	10 92 7d 00 	sts	0x007D, r1	; 0x80007d <i>
     bac:	2b c0       	rjmp	.+86     	; 0xc04 <__vector_11+0xb2>
	}
	
	else if (previous_data==0x23 && data==0x3E)//# and >
     bae:	80 91 bd 00 	lds	r24, 0x00BD	; 0x8000bd <previous_data>
     bb2:	83 32       	cpi	r24, 0x23	; 35
     bb4:	69 f4       	brne	.+26     	; 0xbd0 <__vector_11+0x7e>
     bb6:	80 91 be 00 	lds	r24, 0x00BE	; 0x8000be <data>
     bba:	8e 33       	cpi	r24, 0x3E	; 62
     bbc:	49 f4       	brne	.+18     	; 0xbd0 <__vector_11+0x7e>
	{
		append_on=0;
     bbe:	10 92 7c 00 	sts	0x007C, r1	; 0x80007c <append_on>
		strcpy((char*)data_string, (const char*) data_string_var); //Entire string received!! Save it!!
     bc2:	6f eb       	ldi	r22, 0xBF	; 191
     bc4:	70 e0       	ldi	r23, 0x00	; 0
     bc6:	85 e9       	ldi	r24, 0x95	; 149
     bc8:	90 e0       	ldi	r25, 0x00	; 0
     bca:	0e 94 ac 09 	call	0x1358	; 0x1358 <strcpy>
     bce:	1a c0       	rjmp	.+52     	; 0xc04 <__vector_11+0xb2>
	}
	
	else if (append_on==1 && data != 0x23)
     bd0:	80 91 7c 00 	lds	r24, 0x007C	; 0x80007c <append_on>
     bd4:	81 30       	cpi	r24, 0x01	; 1
     bd6:	b1 f4       	brne	.+44     	; 0xc04 <__vector_11+0xb2>
     bd8:	80 91 be 00 	lds	r24, 0x00BE	; 0x8000be <data>
     bdc:	83 32       	cpi	r24, 0x23	; 35
     bde:	91 f0       	breq	.+36     	; 0xc04 <__vector_11+0xb2>
	{
		data_string_var[i]=data;
     be0:	e0 91 7d 00 	lds	r30, 0x007D	; 0x80007d <i>
     be4:	f0 91 7e 00 	lds	r31, 0x007E	; 0x80007e <i+0x1>
     be8:	80 91 be 00 	lds	r24, 0x00BE	; 0x8000be <data>
     bec:	e1 54       	subi	r30, 0x41	; 65
     bee:	ff 4f       	sbci	r31, 0xFF	; 255
     bf0:	80 83       	st	Z, r24
		i++;
     bf2:	80 91 7d 00 	lds	r24, 0x007D	; 0x80007d <i>
     bf6:	90 91 7e 00 	lds	r25, 0x007E	; 0x80007e <i+0x1>
     bfa:	01 96       	adiw	r24, 0x01	; 1
     bfc:	90 93 7e 00 	sts	0x007E, r25	; 0x80007e <i+0x1>
     c00:	80 93 7d 00 	sts	0x007D, r24	; 0x80007d <i>
	}
}
     c04:	ff 91       	pop	r31
     c06:	ef 91       	pop	r30
     c08:	bf 91       	pop	r27
     c0a:	af 91       	pop	r26
     c0c:	9f 91       	pop	r25
     c0e:	8f 91       	pop	r24
     c10:	7f 91       	pop	r23
     c12:	6f 91       	pop	r22
     c14:	5f 91       	pop	r21
     c16:	4f 91       	pop	r20
     c18:	3f 91       	pop	r19
     c1a:	2f 91       	pop	r18
     c1c:	0f 90       	pop	r0
     c1e:	0f be       	out	0x3f, r0	; 63
     c20:	0f 90       	pop	r0
     c22:	1f 90       	pop	r1
     c24:	18 95       	reti

00000c26 <__subsf3>:
     c26:	50 58       	subi	r21, 0x80	; 128

00000c28 <__addsf3>:
     c28:	bb 27       	eor	r27, r27
     c2a:	aa 27       	eor	r26, r26
     c2c:	0e 94 2b 06 	call	0xc56	; 0xc56 <__addsf3x>
     c30:	0c 94 45 08 	jmp	0x108a	; 0x108a <__fp_round>
     c34:	0e 94 0c 08 	call	0x1018	; 0x1018 <__fp_pscA>
     c38:	38 f0       	brcs	.+14     	; 0xc48 <__addsf3+0x20>
     c3a:	0e 94 13 08 	call	0x1026	; 0x1026 <__fp_pscB>
     c3e:	20 f0       	brcs	.+8      	; 0xc48 <__addsf3+0x20>
     c40:	39 f4       	brne	.+14     	; 0xc50 <__addsf3+0x28>
     c42:	9f 3f       	cpi	r25, 0xFF	; 255
     c44:	19 f4       	brne	.+6      	; 0xc4c <__addsf3+0x24>
     c46:	26 f4       	brtc	.+8      	; 0xc50 <__addsf3+0x28>
     c48:	0c 94 e2 07 	jmp	0xfc4	; 0xfc4 <__fp_nan>
     c4c:	0e f4       	brtc	.+2      	; 0xc50 <__addsf3+0x28>
     c4e:	e0 95       	com	r30
     c50:	e7 fb       	bst	r30, 7
     c52:	0c 94 dc 07 	jmp	0xfb8	; 0xfb8 <__fp_inf>

00000c56 <__addsf3x>:
     c56:	e9 2f       	mov	r30, r25
     c58:	0e 94 6a 08 	call	0x10d4	; 0x10d4 <__fp_split3>
     c5c:	58 f3       	brcs	.-42     	; 0xc34 <__addsf3+0xc>
     c5e:	ba 17       	cp	r27, r26
     c60:	62 07       	cpc	r22, r18
     c62:	73 07       	cpc	r23, r19
     c64:	84 07       	cpc	r24, r20
     c66:	95 07       	cpc	r25, r21
     c68:	20 f0       	brcs	.+8      	; 0xc72 <__addsf3x+0x1c>
     c6a:	79 f4       	brne	.+30     	; 0xc8a <__addsf3x+0x34>
     c6c:	a6 f5       	brtc	.+104    	; 0xcd6 <__addsf3x+0x80>
     c6e:	0c 94 8c 08 	jmp	0x1118	; 0x1118 <__fp_zero>
     c72:	0e f4       	brtc	.+2      	; 0xc76 <__addsf3x+0x20>
     c74:	e0 95       	com	r30
     c76:	0b 2e       	mov	r0, r27
     c78:	ba 2f       	mov	r27, r26
     c7a:	a0 2d       	mov	r26, r0
     c7c:	0b 01       	movw	r0, r22
     c7e:	b9 01       	movw	r22, r18
     c80:	90 01       	movw	r18, r0
     c82:	0c 01       	movw	r0, r24
     c84:	ca 01       	movw	r24, r20
     c86:	a0 01       	movw	r20, r0
     c88:	11 24       	eor	r1, r1
     c8a:	ff 27       	eor	r31, r31
     c8c:	59 1b       	sub	r21, r25
     c8e:	99 f0       	breq	.+38     	; 0xcb6 <__addsf3x+0x60>
     c90:	59 3f       	cpi	r21, 0xF9	; 249
     c92:	50 f4       	brcc	.+20     	; 0xca8 <__addsf3x+0x52>
     c94:	50 3e       	cpi	r21, 0xE0	; 224
     c96:	68 f1       	brcs	.+90     	; 0xcf2 <__addsf3x+0x9c>
     c98:	1a 16       	cp	r1, r26
     c9a:	f0 40       	sbci	r31, 0x00	; 0
     c9c:	a2 2f       	mov	r26, r18
     c9e:	23 2f       	mov	r18, r19
     ca0:	34 2f       	mov	r19, r20
     ca2:	44 27       	eor	r20, r20
     ca4:	58 5f       	subi	r21, 0xF8	; 248
     ca6:	f3 cf       	rjmp	.-26     	; 0xc8e <__addsf3x+0x38>
     ca8:	46 95       	lsr	r20
     caa:	37 95       	ror	r19
     cac:	27 95       	ror	r18
     cae:	a7 95       	ror	r26
     cb0:	f0 40       	sbci	r31, 0x00	; 0
     cb2:	53 95       	inc	r21
     cb4:	c9 f7       	brne	.-14     	; 0xca8 <__addsf3x+0x52>
     cb6:	7e f4       	brtc	.+30     	; 0xcd6 <__addsf3x+0x80>
     cb8:	1f 16       	cp	r1, r31
     cba:	ba 0b       	sbc	r27, r26
     cbc:	62 0b       	sbc	r22, r18
     cbe:	73 0b       	sbc	r23, r19
     cc0:	84 0b       	sbc	r24, r20
     cc2:	ba f0       	brmi	.+46     	; 0xcf2 <__addsf3x+0x9c>
     cc4:	91 50       	subi	r25, 0x01	; 1
     cc6:	a1 f0       	breq	.+40     	; 0xcf0 <__addsf3x+0x9a>
     cc8:	ff 0f       	add	r31, r31
     cca:	bb 1f       	adc	r27, r27
     ccc:	66 1f       	adc	r22, r22
     cce:	77 1f       	adc	r23, r23
     cd0:	88 1f       	adc	r24, r24
     cd2:	c2 f7       	brpl	.-16     	; 0xcc4 <__addsf3x+0x6e>
     cd4:	0e c0       	rjmp	.+28     	; 0xcf2 <__addsf3x+0x9c>
     cd6:	ba 0f       	add	r27, r26
     cd8:	62 1f       	adc	r22, r18
     cda:	73 1f       	adc	r23, r19
     cdc:	84 1f       	adc	r24, r20
     cde:	48 f4       	brcc	.+18     	; 0xcf2 <__addsf3x+0x9c>
     ce0:	87 95       	ror	r24
     ce2:	77 95       	ror	r23
     ce4:	67 95       	ror	r22
     ce6:	b7 95       	ror	r27
     ce8:	f7 95       	ror	r31
     cea:	9e 3f       	cpi	r25, 0xFE	; 254
     cec:	08 f0       	brcs	.+2      	; 0xcf0 <__addsf3x+0x9a>
     cee:	b0 cf       	rjmp	.-160    	; 0xc50 <__addsf3+0x28>
     cf0:	93 95       	inc	r25
     cf2:	88 0f       	add	r24, r24
     cf4:	08 f0       	brcs	.+2      	; 0xcf8 <__addsf3x+0xa2>
     cf6:	99 27       	eor	r25, r25
     cf8:	ee 0f       	add	r30, r30
     cfa:	97 95       	ror	r25
     cfc:	87 95       	ror	r24
     cfe:	08 95       	ret
     d00:	0e 94 0c 08 	call	0x1018	; 0x1018 <__fp_pscA>
     d04:	60 f0       	brcs	.+24     	; 0xd1e <__addsf3x+0xc8>
     d06:	80 e8       	ldi	r24, 0x80	; 128
     d08:	91 e0       	ldi	r25, 0x01	; 1
     d0a:	09 f4       	brne	.+2      	; 0xd0e <__addsf3x+0xb8>
     d0c:	9e ef       	ldi	r25, 0xFE	; 254
     d0e:	0e 94 13 08 	call	0x1026	; 0x1026 <__fp_pscB>
     d12:	28 f0       	brcs	.+10     	; 0xd1e <__addsf3x+0xc8>
     d14:	40 e8       	ldi	r20, 0x80	; 128
     d16:	51 e0       	ldi	r21, 0x01	; 1
     d18:	71 f4       	brne	.+28     	; 0xd36 <atan2+0x10>
     d1a:	5e ef       	ldi	r21, 0xFE	; 254
     d1c:	0c c0       	rjmp	.+24     	; 0xd36 <atan2+0x10>
     d1e:	0c 94 e2 07 	jmp	0xfc4	; 0xfc4 <__fp_nan>
     d22:	0c 94 8c 08 	jmp	0x1118	; 0x1118 <__fp_zero>

00000d26 <atan2>:
     d26:	e9 2f       	mov	r30, r25
     d28:	e0 78       	andi	r30, 0x80	; 128
     d2a:	0e 94 6a 08 	call	0x10d4	; 0x10d4 <__fp_split3>
     d2e:	40 f3       	brcs	.-48     	; 0xd00 <__addsf3x+0xaa>
     d30:	09 2e       	mov	r0, r25
     d32:	05 2a       	or	r0, r21
     d34:	b1 f3       	breq	.-20     	; 0xd22 <__addsf3x+0xcc>
     d36:	26 17       	cp	r18, r22
     d38:	37 07       	cpc	r19, r23
     d3a:	48 07       	cpc	r20, r24
     d3c:	59 07       	cpc	r21, r25
     d3e:	38 f0       	brcs	.+14     	; 0xd4e <atan2+0x28>
     d40:	0e 2e       	mov	r0, r30
     d42:	07 f8       	bld	r0, 7
     d44:	e0 25       	eor	r30, r0
     d46:	69 f0       	breq	.+26     	; 0xd62 <atan2+0x3c>
     d48:	e0 25       	eor	r30, r0
     d4a:	e0 64       	ori	r30, 0x40	; 64
     d4c:	0a c0       	rjmp	.+20     	; 0xd62 <atan2+0x3c>
     d4e:	ef 63       	ori	r30, 0x3F	; 63
     d50:	07 f8       	bld	r0, 7
     d52:	00 94       	com	r0
     d54:	07 fa       	bst	r0, 7
     d56:	db 01       	movw	r26, r22
     d58:	b9 01       	movw	r22, r18
     d5a:	9d 01       	movw	r18, r26
     d5c:	dc 01       	movw	r26, r24
     d5e:	ca 01       	movw	r24, r20
     d60:	ad 01       	movw	r20, r26
     d62:	ef 93       	push	r30
     d64:	0e 94 0e 07 	call	0xe1c	; 0xe1c <__divsf3_pse>
     d68:	0e 94 45 08 	call	0x108a	; 0x108a <__fp_round>
     d6c:	0e 94 c3 06 	call	0xd86	; 0xd86 <atan>
     d70:	5f 91       	pop	r21
     d72:	55 23       	and	r21, r21
     d74:	39 f0       	breq	.+14     	; 0xd84 <atan2+0x5e>
     d76:	2b ed       	ldi	r18, 0xDB	; 219
     d78:	3f e0       	ldi	r19, 0x0F	; 15
     d7a:	49 e4       	ldi	r20, 0x49	; 73
     d7c:	50 fd       	sbrc	r21, 0
     d7e:	49 ec       	ldi	r20, 0xC9	; 201
     d80:	0c 94 14 06 	jmp	0xc28	; 0xc28 <__addsf3>
     d84:	08 95       	ret

00000d86 <atan>:
     d86:	df 93       	push	r29
     d88:	dd 27       	eor	r29, r29
     d8a:	b9 2f       	mov	r27, r25
     d8c:	bf 77       	andi	r27, 0x7F	; 127
     d8e:	40 e8       	ldi	r20, 0x80	; 128
     d90:	5f e3       	ldi	r21, 0x3F	; 63
     d92:	16 16       	cp	r1, r22
     d94:	17 06       	cpc	r1, r23
     d96:	48 07       	cpc	r20, r24
     d98:	5b 07       	cpc	r21, r27
     d9a:	18 f4       	brcc	.+6      	; 0xda2 <atan+0x1c>
     d9c:	d9 2f       	mov	r29, r25
     d9e:	0e 94 93 08 	call	0x1126	; 0x1126 <inverse>
     da2:	9f 93       	push	r25
     da4:	8f 93       	push	r24
     da6:	7f 93       	push	r23
     da8:	6f 93       	push	r22
     daa:	0e 94 56 09 	call	0x12ac	; 0x12ac <square>
     dae:	e4 e5       	ldi	r30, 0x54	; 84
     db0:	f0 e0       	ldi	r31, 0x00	; 0
     db2:	0e 94 e5 07 	call	0xfca	; 0xfca <__fp_powser>
     db6:	0e 94 45 08 	call	0x108a	; 0x108a <__fp_round>
     dba:	2f 91       	pop	r18
     dbc:	3f 91       	pop	r19
     dbe:	4f 91       	pop	r20
     dc0:	5f 91       	pop	r21
     dc2:	0e 94 ae 08 	call	0x115c	; 0x115c <__mulsf3x>
     dc6:	dd 23       	and	r29, r29
     dc8:	51 f0       	breq	.+20     	; 0xdde <atan+0x58>
     dca:	90 58       	subi	r25, 0x80	; 128
     dcc:	a2 ea       	ldi	r26, 0xA2	; 162
     dce:	2a ed       	ldi	r18, 0xDA	; 218
     dd0:	3f e0       	ldi	r19, 0x0F	; 15
     dd2:	49 ec       	ldi	r20, 0xC9	; 201
     dd4:	5f e3       	ldi	r21, 0x3F	; 63
     dd6:	d0 78       	andi	r29, 0x80	; 128
     dd8:	5d 27       	eor	r21, r29
     dda:	0e 94 2b 06 	call	0xc56	; 0xc56 <__addsf3x>
     dde:	df 91       	pop	r29
     de0:	0c 94 45 08 	jmp	0x108a	; 0x108a <__fp_round>

00000de4 <cos>:
     de4:	0e 94 1c 08 	call	0x1038	; 0x1038 <__fp_rempio2>
     de8:	e3 95       	inc	r30
     dea:	0c 94 56 08 	jmp	0x10ac	; 0x10ac <__fp_sinus>

00000dee <__divsf3>:
     dee:	0e 94 0b 07 	call	0xe16	; 0xe16 <__divsf3x>
     df2:	0c 94 45 08 	jmp	0x108a	; 0x108a <__fp_round>
     df6:	0e 94 13 08 	call	0x1026	; 0x1026 <__fp_pscB>
     dfa:	58 f0       	brcs	.+22     	; 0xe12 <__divsf3+0x24>
     dfc:	0e 94 0c 08 	call	0x1018	; 0x1018 <__fp_pscA>
     e00:	40 f0       	brcs	.+16     	; 0xe12 <__divsf3+0x24>
     e02:	29 f4       	brne	.+10     	; 0xe0e <__divsf3+0x20>
     e04:	5f 3f       	cpi	r21, 0xFF	; 255
     e06:	29 f0       	breq	.+10     	; 0xe12 <__divsf3+0x24>
     e08:	0c 94 dc 07 	jmp	0xfb8	; 0xfb8 <__fp_inf>
     e0c:	51 11       	cpse	r21, r1
     e0e:	0c 94 8d 08 	jmp	0x111a	; 0x111a <__fp_szero>
     e12:	0c 94 e2 07 	jmp	0xfc4	; 0xfc4 <__fp_nan>

00000e16 <__divsf3x>:
     e16:	0e 94 6a 08 	call	0x10d4	; 0x10d4 <__fp_split3>
     e1a:	68 f3       	brcs	.-38     	; 0xdf6 <__divsf3+0x8>

00000e1c <__divsf3_pse>:
     e1c:	99 23       	and	r25, r25
     e1e:	b1 f3       	breq	.-20     	; 0xe0c <__divsf3+0x1e>
     e20:	55 23       	and	r21, r21
     e22:	91 f3       	breq	.-28     	; 0xe08 <__divsf3+0x1a>
     e24:	95 1b       	sub	r25, r21
     e26:	55 0b       	sbc	r21, r21
     e28:	bb 27       	eor	r27, r27
     e2a:	aa 27       	eor	r26, r26
     e2c:	62 17       	cp	r22, r18
     e2e:	73 07       	cpc	r23, r19
     e30:	84 07       	cpc	r24, r20
     e32:	38 f0       	brcs	.+14     	; 0xe42 <__divsf3_pse+0x26>
     e34:	9f 5f       	subi	r25, 0xFF	; 255
     e36:	5f 4f       	sbci	r21, 0xFF	; 255
     e38:	22 0f       	add	r18, r18
     e3a:	33 1f       	adc	r19, r19
     e3c:	44 1f       	adc	r20, r20
     e3e:	aa 1f       	adc	r26, r26
     e40:	a9 f3       	breq	.-22     	; 0xe2c <__divsf3_pse+0x10>
     e42:	35 d0       	rcall	.+106    	; 0xeae <__divsf3_pse+0x92>
     e44:	0e 2e       	mov	r0, r30
     e46:	3a f0       	brmi	.+14     	; 0xe56 <__divsf3_pse+0x3a>
     e48:	e0 e8       	ldi	r30, 0x80	; 128
     e4a:	32 d0       	rcall	.+100    	; 0xeb0 <__divsf3_pse+0x94>
     e4c:	91 50       	subi	r25, 0x01	; 1
     e4e:	50 40       	sbci	r21, 0x00	; 0
     e50:	e6 95       	lsr	r30
     e52:	00 1c       	adc	r0, r0
     e54:	ca f7       	brpl	.-14     	; 0xe48 <__divsf3_pse+0x2c>
     e56:	2b d0       	rcall	.+86     	; 0xeae <__divsf3_pse+0x92>
     e58:	fe 2f       	mov	r31, r30
     e5a:	29 d0       	rcall	.+82     	; 0xeae <__divsf3_pse+0x92>
     e5c:	66 0f       	add	r22, r22
     e5e:	77 1f       	adc	r23, r23
     e60:	88 1f       	adc	r24, r24
     e62:	bb 1f       	adc	r27, r27
     e64:	26 17       	cp	r18, r22
     e66:	37 07       	cpc	r19, r23
     e68:	48 07       	cpc	r20, r24
     e6a:	ab 07       	cpc	r26, r27
     e6c:	b0 e8       	ldi	r27, 0x80	; 128
     e6e:	09 f0       	breq	.+2      	; 0xe72 <__divsf3_pse+0x56>
     e70:	bb 0b       	sbc	r27, r27
     e72:	80 2d       	mov	r24, r0
     e74:	bf 01       	movw	r22, r30
     e76:	ff 27       	eor	r31, r31
     e78:	93 58       	subi	r25, 0x83	; 131
     e7a:	5f 4f       	sbci	r21, 0xFF	; 255
     e7c:	3a f0       	brmi	.+14     	; 0xe8c <__divsf3_pse+0x70>
     e7e:	9e 3f       	cpi	r25, 0xFE	; 254
     e80:	51 05       	cpc	r21, r1
     e82:	78 f0       	brcs	.+30     	; 0xea2 <__divsf3_pse+0x86>
     e84:	0c 94 dc 07 	jmp	0xfb8	; 0xfb8 <__fp_inf>
     e88:	0c 94 8d 08 	jmp	0x111a	; 0x111a <__fp_szero>
     e8c:	5f 3f       	cpi	r21, 0xFF	; 255
     e8e:	e4 f3       	brlt	.-8      	; 0xe88 <__divsf3_pse+0x6c>
     e90:	98 3e       	cpi	r25, 0xE8	; 232
     e92:	d4 f3       	brlt	.-12     	; 0xe88 <__divsf3_pse+0x6c>
     e94:	86 95       	lsr	r24
     e96:	77 95       	ror	r23
     e98:	67 95       	ror	r22
     e9a:	b7 95       	ror	r27
     e9c:	f7 95       	ror	r31
     e9e:	9f 5f       	subi	r25, 0xFF	; 255
     ea0:	c9 f7       	brne	.-14     	; 0xe94 <__divsf3_pse+0x78>
     ea2:	88 0f       	add	r24, r24
     ea4:	91 1d       	adc	r25, r1
     ea6:	96 95       	lsr	r25
     ea8:	87 95       	ror	r24
     eaa:	97 f9       	bld	r25, 7
     eac:	08 95       	ret
     eae:	e1 e0       	ldi	r30, 0x01	; 1
     eb0:	66 0f       	add	r22, r22
     eb2:	77 1f       	adc	r23, r23
     eb4:	88 1f       	adc	r24, r24
     eb6:	bb 1f       	adc	r27, r27
     eb8:	62 17       	cp	r22, r18
     eba:	73 07       	cpc	r23, r19
     ebc:	84 07       	cpc	r24, r20
     ebe:	ba 07       	cpc	r27, r26
     ec0:	20 f0       	brcs	.+8      	; 0xeca <__divsf3_pse+0xae>
     ec2:	62 1b       	sub	r22, r18
     ec4:	73 0b       	sbc	r23, r19
     ec6:	84 0b       	sbc	r24, r20
     ec8:	ba 0b       	sbc	r27, r26
     eca:	ee 1f       	adc	r30, r30
     ecc:	88 f7       	brcc	.-30     	; 0xeb0 <__divsf3_pse+0x94>
     ece:	e0 95       	com	r30
     ed0:	08 95       	ret

00000ed2 <__fixsfsi>:
     ed2:	0e 94 70 07 	call	0xee0	; 0xee0 <__fixunssfsi>
     ed6:	68 94       	set
     ed8:	b1 11       	cpse	r27, r1
     eda:	0c 94 8d 08 	jmp	0x111a	; 0x111a <__fp_szero>
     ede:	08 95       	ret

00000ee0 <__fixunssfsi>:
     ee0:	0e 94 72 08 	call	0x10e4	; 0x10e4 <__fp_splitA>
     ee4:	88 f0       	brcs	.+34     	; 0xf08 <__fixunssfsi+0x28>
     ee6:	9f 57       	subi	r25, 0x7F	; 127
     ee8:	98 f0       	brcs	.+38     	; 0xf10 <__fixunssfsi+0x30>
     eea:	b9 2f       	mov	r27, r25
     eec:	99 27       	eor	r25, r25
     eee:	b7 51       	subi	r27, 0x17	; 23
     ef0:	b0 f0       	brcs	.+44     	; 0xf1e <__fixunssfsi+0x3e>
     ef2:	e1 f0       	breq	.+56     	; 0xf2c <__fixunssfsi+0x4c>
     ef4:	66 0f       	add	r22, r22
     ef6:	77 1f       	adc	r23, r23
     ef8:	88 1f       	adc	r24, r24
     efa:	99 1f       	adc	r25, r25
     efc:	1a f0       	brmi	.+6      	; 0xf04 <__fixunssfsi+0x24>
     efe:	ba 95       	dec	r27
     f00:	c9 f7       	brne	.-14     	; 0xef4 <__fixunssfsi+0x14>
     f02:	14 c0       	rjmp	.+40     	; 0xf2c <__fixunssfsi+0x4c>
     f04:	b1 30       	cpi	r27, 0x01	; 1
     f06:	91 f0       	breq	.+36     	; 0xf2c <__fixunssfsi+0x4c>
     f08:	0e 94 8c 08 	call	0x1118	; 0x1118 <__fp_zero>
     f0c:	b1 e0       	ldi	r27, 0x01	; 1
     f0e:	08 95       	ret
     f10:	0c 94 8c 08 	jmp	0x1118	; 0x1118 <__fp_zero>
     f14:	67 2f       	mov	r22, r23
     f16:	78 2f       	mov	r23, r24
     f18:	88 27       	eor	r24, r24
     f1a:	b8 5f       	subi	r27, 0xF8	; 248
     f1c:	39 f0       	breq	.+14     	; 0xf2c <__fixunssfsi+0x4c>
     f1e:	b9 3f       	cpi	r27, 0xF9	; 249
     f20:	cc f3       	brlt	.-14     	; 0xf14 <__fixunssfsi+0x34>
     f22:	86 95       	lsr	r24
     f24:	77 95       	ror	r23
     f26:	67 95       	ror	r22
     f28:	b3 95       	inc	r27
     f2a:	d9 f7       	brne	.-10     	; 0xf22 <__fixunssfsi+0x42>
     f2c:	3e f4       	brtc	.+14     	; 0xf3c <__fixunssfsi+0x5c>
     f2e:	90 95       	com	r25
     f30:	80 95       	com	r24
     f32:	70 95       	com	r23
     f34:	61 95       	neg	r22
     f36:	7f 4f       	sbci	r23, 0xFF	; 255
     f38:	8f 4f       	sbci	r24, 0xFF	; 255
     f3a:	9f 4f       	sbci	r25, 0xFF	; 255
     f3c:	08 95       	ret

00000f3e <__floatunsisf>:
     f3e:	e8 94       	clt
     f40:	09 c0       	rjmp	.+18     	; 0xf54 <__floatsisf+0x12>

00000f42 <__floatsisf>:
     f42:	97 fb       	bst	r25, 7
     f44:	3e f4       	brtc	.+14     	; 0xf54 <__floatsisf+0x12>
     f46:	90 95       	com	r25
     f48:	80 95       	com	r24
     f4a:	70 95       	com	r23
     f4c:	61 95       	neg	r22
     f4e:	7f 4f       	sbci	r23, 0xFF	; 255
     f50:	8f 4f       	sbci	r24, 0xFF	; 255
     f52:	9f 4f       	sbci	r25, 0xFF	; 255
     f54:	99 23       	and	r25, r25
     f56:	a9 f0       	breq	.+42     	; 0xf82 <__floatsisf+0x40>
     f58:	f9 2f       	mov	r31, r25
     f5a:	96 e9       	ldi	r25, 0x96	; 150
     f5c:	bb 27       	eor	r27, r27
     f5e:	93 95       	inc	r25
     f60:	f6 95       	lsr	r31
     f62:	87 95       	ror	r24
     f64:	77 95       	ror	r23
     f66:	67 95       	ror	r22
     f68:	b7 95       	ror	r27
     f6a:	f1 11       	cpse	r31, r1
     f6c:	f8 cf       	rjmp	.-16     	; 0xf5e <__floatsisf+0x1c>
     f6e:	fa f4       	brpl	.+62     	; 0xfae <__floatsisf+0x6c>
     f70:	bb 0f       	add	r27, r27
     f72:	11 f4       	brne	.+4      	; 0xf78 <__floatsisf+0x36>
     f74:	60 ff       	sbrs	r22, 0
     f76:	1b c0       	rjmp	.+54     	; 0xfae <__floatsisf+0x6c>
     f78:	6f 5f       	subi	r22, 0xFF	; 255
     f7a:	7f 4f       	sbci	r23, 0xFF	; 255
     f7c:	8f 4f       	sbci	r24, 0xFF	; 255
     f7e:	9f 4f       	sbci	r25, 0xFF	; 255
     f80:	16 c0       	rjmp	.+44     	; 0xfae <__floatsisf+0x6c>
     f82:	88 23       	and	r24, r24
     f84:	11 f0       	breq	.+4      	; 0xf8a <__floatsisf+0x48>
     f86:	96 e9       	ldi	r25, 0x96	; 150
     f88:	11 c0       	rjmp	.+34     	; 0xfac <__floatsisf+0x6a>
     f8a:	77 23       	and	r23, r23
     f8c:	21 f0       	breq	.+8      	; 0xf96 <__floatsisf+0x54>
     f8e:	9e e8       	ldi	r25, 0x8E	; 142
     f90:	87 2f       	mov	r24, r23
     f92:	76 2f       	mov	r23, r22
     f94:	05 c0       	rjmp	.+10     	; 0xfa0 <__floatsisf+0x5e>
     f96:	66 23       	and	r22, r22
     f98:	71 f0       	breq	.+28     	; 0xfb6 <__floatsisf+0x74>
     f9a:	96 e8       	ldi	r25, 0x86	; 134
     f9c:	86 2f       	mov	r24, r22
     f9e:	70 e0       	ldi	r23, 0x00	; 0
     fa0:	60 e0       	ldi	r22, 0x00	; 0
     fa2:	2a f0       	brmi	.+10     	; 0xfae <__floatsisf+0x6c>
     fa4:	9a 95       	dec	r25
     fa6:	66 0f       	add	r22, r22
     fa8:	77 1f       	adc	r23, r23
     faa:	88 1f       	adc	r24, r24
     fac:	da f7       	brpl	.-10     	; 0xfa4 <__floatsisf+0x62>
     fae:	88 0f       	add	r24, r24
     fb0:	96 95       	lsr	r25
     fb2:	87 95       	ror	r24
     fb4:	97 f9       	bld	r25, 7
     fb6:	08 95       	ret

00000fb8 <__fp_inf>:
     fb8:	97 f9       	bld	r25, 7
     fba:	9f 67       	ori	r25, 0x7F	; 127
     fbc:	80 e8       	ldi	r24, 0x80	; 128
     fbe:	70 e0       	ldi	r23, 0x00	; 0
     fc0:	60 e0       	ldi	r22, 0x00	; 0
     fc2:	08 95       	ret

00000fc4 <__fp_nan>:
     fc4:	9f ef       	ldi	r25, 0xFF	; 255
     fc6:	80 ec       	ldi	r24, 0xC0	; 192
     fc8:	08 95       	ret

00000fca <__fp_powser>:
     fca:	df 93       	push	r29
     fcc:	cf 93       	push	r28
     fce:	1f 93       	push	r17
     fd0:	0f 93       	push	r16
     fd2:	ff 92       	push	r15
     fd4:	ef 92       	push	r14
     fd6:	df 92       	push	r13
     fd8:	7b 01       	movw	r14, r22
     fda:	8c 01       	movw	r16, r24
     fdc:	68 94       	set
     fde:	06 c0       	rjmp	.+12     	; 0xfec <__fp_powser+0x22>
     fe0:	da 2e       	mov	r13, r26
     fe2:	ef 01       	movw	r28, r30
     fe4:	0e 94 ae 08 	call	0x115c	; 0x115c <__mulsf3x>
     fe8:	fe 01       	movw	r30, r28
     fea:	e8 94       	clt
     fec:	a5 91       	lpm	r26, Z+
     fee:	25 91       	lpm	r18, Z+
     ff0:	35 91       	lpm	r19, Z+
     ff2:	45 91       	lpm	r20, Z+
     ff4:	55 91       	lpm	r21, Z+
     ff6:	a6 f3       	brts	.-24     	; 0xfe0 <__fp_powser+0x16>
     ff8:	ef 01       	movw	r28, r30
     ffa:	0e 94 2b 06 	call	0xc56	; 0xc56 <__addsf3x>
     ffe:	fe 01       	movw	r30, r28
    1000:	97 01       	movw	r18, r14
    1002:	a8 01       	movw	r20, r16
    1004:	da 94       	dec	r13
    1006:	69 f7       	brne	.-38     	; 0xfe2 <__fp_powser+0x18>
    1008:	df 90       	pop	r13
    100a:	ef 90       	pop	r14
    100c:	ff 90       	pop	r15
    100e:	0f 91       	pop	r16
    1010:	1f 91       	pop	r17
    1012:	cf 91       	pop	r28
    1014:	df 91       	pop	r29
    1016:	08 95       	ret

00001018 <__fp_pscA>:
    1018:	00 24       	eor	r0, r0
    101a:	0a 94       	dec	r0
    101c:	16 16       	cp	r1, r22
    101e:	17 06       	cpc	r1, r23
    1020:	18 06       	cpc	r1, r24
    1022:	09 06       	cpc	r0, r25
    1024:	08 95       	ret

00001026 <__fp_pscB>:
    1026:	00 24       	eor	r0, r0
    1028:	0a 94       	dec	r0
    102a:	12 16       	cp	r1, r18
    102c:	13 06       	cpc	r1, r19
    102e:	14 06       	cpc	r1, r20
    1030:	05 06       	cpc	r0, r21
    1032:	08 95       	ret
    1034:	0c 94 e2 07 	jmp	0xfc4	; 0xfc4 <__fp_nan>

00001038 <__fp_rempio2>:
    1038:	0e 94 72 08 	call	0x10e4	; 0x10e4 <__fp_splitA>
    103c:	d8 f3       	brcs	.-10     	; 0x1034 <__fp_pscB+0xe>
    103e:	e8 94       	clt
    1040:	e0 e0       	ldi	r30, 0x00	; 0
    1042:	bb 27       	eor	r27, r27
    1044:	9f 57       	subi	r25, 0x7F	; 127
    1046:	f0 f0       	brcs	.+60     	; 0x1084 <__fp_rempio2+0x4c>
    1048:	2a ed       	ldi	r18, 0xDA	; 218
    104a:	3f e0       	ldi	r19, 0x0F	; 15
    104c:	49 ec       	ldi	r20, 0xC9	; 201
    104e:	06 c0       	rjmp	.+12     	; 0x105c <__fp_rempio2+0x24>
    1050:	ee 0f       	add	r30, r30
    1052:	bb 0f       	add	r27, r27
    1054:	66 1f       	adc	r22, r22
    1056:	77 1f       	adc	r23, r23
    1058:	88 1f       	adc	r24, r24
    105a:	28 f0       	brcs	.+10     	; 0x1066 <__fp_rempio2+0x2e>
    105c:	b2 3a       	cpi	r27, 0xA2	; 162
    105e:	62 07       	cpc	r22, r18
    1060:	73 07       	cpc	r23, r19
    1062:	84 07       	cpc	r24, r20
    1064:	28 f0       	brcs	.+10     	; 0x1070 <__fp_rempio2+0x38>
    1066:	b2 5a       	subi	r27, 0xA2	; 162
    1068:	62 0b       	sbc	r22, r18
    106a:	73 0b       	sbc	r23, r19
    106c:	84 0b       	sbc	r24, r20
    106e:	e3 95       	inc	r30
    1070:	9a 95       	dec	r25
    1072:	72 f7       	brpl	.-36     	; 0x1050 <__fp_rempio2+0x18>
    1074:	80 38       	cpi	r24, 0x80	; 128
    1076:	30 f4       	brcc	.+12     	; 0x1084 <__fp_rempio2+0x4c>
    1078:	9a 95       	dec	r25
    107a:	bb 0f       	add	r27, r27
    107c:	66 1f       	adc	r22, r22
    107e:	77 1f       	adc	r23, r23
    1080:	88 1f       	adc	r24, r24
    1082:	d2 f7       	brpl	.-12     	; 0x1078 <__fp_rempio2+0x40>
    1084:	90 48       	sbci	r25, 0x80	; 128
    1086:	0c 94 5c 09 	jmp	0x12b8	; 0x12b8 <__fp_mpack_finite>

0000108a <__fp_round>:
    108a:	09 2e       	mov	r0, r25
    108c:	03 94       	inc	r0
    108e:	00 0c       	add	r0, r0
    1090:	11 f4       	brne	.+4      	; 0x1096 <__fp_round+0xc>
    1092:	88 23       	and	r24, r24
    1094:	52 f0       	brmi	.+20     	; 0x10aa <__fp_round+0x20>
    1096:	bb 0f       	add	r27, r27
    1098:	40 f4       	brcc	.+16     	; 0x10aa <__fp_round+0x20>
    109a:	bf 2b       	or	r27, r31
    109c:	11 f4       	brne	.+4      	; 0x10a2 <__fp_round+0x18>
    109e:	60 ff       	sbrs	r22, 0
    10a0:	04 c0       	rjmp	.+8      	; 0x10aa <__fp_round+0x20>
    10a2:	6f 5f       	subi	r22, 0xFF	; 255
    10a4:	7f 4f       	sbci	r23, 0xFF	; 255
    10a6:	8f 4f       	sbci	r24, 0xFF	; 255
    10a8:	9f 4f       	sbci	r25, 0xFF	; 255
    10aa:	08 95       	ret

000010ac <__fp_sinus>:
    10ac:	ef 93       	push	r30
    10ae:	e0 ff       	sbrs	r30, 0
    10b0:	07 c0       	rjmp	.+14     	; 0x10c0 <__fp_sinus+0x14>
    10b2:	a2 ea       	ldi	r26, 0xA2	; 162
    10b4:	2a ed       	ldi	r18, 0xDA	; 218
    10b6:	3f e0       	ldi	r19, 0x0F	; 15
    10b8:	49 ec       	ldi	r20, 0xC9	; 201
    10ba:	5f eb       	ldi	r21, 0xBF	; 191
    10bc:	0e 94 2b 06 	call	0xc56	; 0xc56 <__addsf3x>
    10c0:	0e 94 45 08 	call	0x108a	; 0x108a <__fp_round>
    10c4:	0f 90       	pop	r0
    10c6:	03 94       	inc	r0
    10c8:	01 fc       	sbrc	r0, 1
    10ca:	90 58       	subi	r25, 0x80	; 128
    10cc:	e1 e8       	ldi	r30, 0x81	; 129
    10ce:	f0 e0       	ldi	r31, 0x00	; 0
    10d0:	0c 94 6f 09 	jmp	0x12de	; 0x12de <__fp_powsodd>

000010d4 <__fp_split3>:
    10d4:	57 fd       	sbrc	r21, 7
    10d6:	90 58       	subi	r25, 0x80	; 128
    10d8:	44 0f       	add	r20, r20
    10da:	55 1f       	adc	r21, r21
    10dc:	59 f0       	breq	.+22     	; 0x10f4 <__fp_splitA+0x10>
    10de:	5f 3f       	cpi	r21, 0xFF	; 255
    10e0:	71 f0       	breq	.+28     	; 0x10fe <__fp_splitA+0x1a>
    10e2:	47 95       	ror	r20

000010e4 <__fp_splitA>:
    10e4:	88 0f       	add	r24, r24
    10e6:	97 fb       	bst	r25, 7
    10e8:	99 1f       	adc	r25, r25
    10ea:	61 f0       	breq	.+24     	; 0x1104 <__fp_splitA+0x20>
    10ec:	9f 3f       	cpi	r25, 0xFF	; 255
    10ee:	79 f0       	breq	.+30     	; 0x110e <__fp_splitA+0x2a>
    10f0:	87 95       	ror	r24
    10f2:	08 95       	ret
    10f4:	12 16       	cp	r1, r18
    10f6:	13 06       	cpc	r1, r19
    10f8:	14 06       	cpc	r1, r20
    10fa:	55 1f       	adc	r21, r21
    10fc:	f2 cf       	rjmp	.-28     	; 0x10e2 <__fp_split3+0xe>
    10fe:	46 95       	lsr	r20
    1100:	f1 df       	rcall	.-30     	; 0x10e4 <__fp_splitA>
    1102:	08 c0       	rjmp	.+16     	; 0x1114 <__fp_splitA+0x30>
    1104:	16 16       	cp	r1, r22
    1106:	17 06       	cpc	r1, r23
    1108:	18 06       	cpc	r1, r24
    110a:	99 1f       	adc	r25, r25
    110c:	f1 cf       	rjmp	.-30     	; 0x10f0 <__fp_splitA+0xc>
    110e:	86 95       	lsr	r24
    1110:	71 05       	cpc	r23, r1
    1112:	61 05       	cpc	r22, r1
    1114:	08 94       	sec
    1116:	08 95       	ret

00001118 <__fp_zero>:
    1118:	e8 94       	clt

0000111a <__fp_szero>:
    111a:	bb 27       	eor	r27, r27
    111c:	66 27       	eor	r22, r22
    111e:	77 27       	eor	r23, r23
    1120:	cb 01       	movw	r24, r22
    1122:	97 f9       	bld	r25, 7
    1124:	08 95       	ret

00001126 <inverse>:
    1126:	9b 01       	movw	r18, r22
    1128:	ac 01       	movw	r20, r24
    112a:	60 e0       	ldi	r22, 0x00	; 0
    112c:	70 e0       	ldi	r23, 0x00	; 0
    112e:	80 e8       	ldi	r24, 0x80	; 128
    1130:	9f e3       	ldi	r25, 0x3F	; 63
    1132:	0c 94 f7 06 	jmp	0xdee	; 0xdee <__divsf3>

00001136 <__mulsf3>:
    1136:	0e 94 ae 08 	call	0x115c	; 0x115c <__mulsf3x>
    113a:	0c 94 45 08 	jmp	0x108a	; 0x108a <__fp_round>
    113e:	0e 94 0c 08 	call	0x1018	; 0x1018 <__fp_pscA>
    1142:	38 f0       	brcs	.+14     	; 0x1152 <__mulsf3+0x1c>
    1144:	0e 94 13 08 	call	0x1026	; 0x1026 <__fp_pscB>
    1148:	20 f0       	brcs	.+8      	; 0x1152 <__mulsf3+0x1c>
    114a:	95 23       	and	r25, r21
    114c:	11 f0       	breq	.+4      	; 0x1152 <__mulsf3+0x1c>
    114e:	0c 94 dc 07 	jmp	0xfb8	; 0xfb8 <__fp_inf>
    1152:	0c 94 e2 07 	jmp	0xfc4	; 0xfc4 <__fp_nan>
    1156:	11 24       	eor	r1, r1
    1158:	0c 94 8d 08 	jmp	0x111a	; 0x111a <__fp_szero>

0000115c <__mulsf3x>:
    115c:	0e 94 6a 08 	call	0x10d4	; 0x10d4 <__fp_split3>
    1160:	70 f3       	brcs	.-36     	; 0x113e <__mulsf3+0x8>

00001162 <__mulsf3_pse>:
    1162:	95 9f       	mul	r25, r21
    1164:	c1 f3       	breq	.-16     	; 0x1156 <__mulsf3+0x20>
    1166:	95 0f       	add	r25, r21
    1168:	50 e0       	ldi	r21, 0x00	; 0
    116a:	55 1f       	adc	r21, r21
    116c:	62 9f       	mul	r22, r18
    116e:	f0 01       	movw	r30, r0
    1170:	72 9f       	mul	r23, r18
    1172:	bb 27       	eor	r27, r27
    1174:	f0 0d       	add	r31, r0
    1176:	b1 1d       	adc	r27, r1
    1178:	63 9f       	mul	r22, r19
    117a:	aa 27       	eor	r26, r26
    117c:	f0 0d       	add	r31, r0
    117e:	b1 1d       	adc	r27, r1
    1180:	aa 1f       	adc	r26, r26
    1182:	64 9f       	mul	r22, r20
    1184:	66 27       	eor	r22, r22
    1186:	b0 0d       	add	r27, r0
    1188:	a1 1d       	adc	r26, r1
    118a:	66 1f       	adc	r22, r22
    118c:	82 9f       	mul	r24, r18
    118e:	22 27       	eor	r18, r18
    1190:	b0 0d       	add	r27, r0
    1192:	a1 1d       	adc	r26, r1
    1194:	62 1f       	adc	r22, r18
    1196:	73 9f       	mul	r23, r19
    1198:	b0 0d       	add	r27, r0
    119a:	a1 1d       	adc	r26, r1
    119c:	62 1f       	adc	r22, r18
    119e:	83 9f       	mul	r24, r19
    11a0:	a0 0d       	add	r26, r0
    11a2:	61 1d       	adc	r22, r1
    11a4:	22 1f       	adc	r18, r18
    11a6:	74 9f       	mul	r23, r20
    11a8:	33 27       	eor	r19, r19
    11aa:	a0 0d       	add	r26, r0
    11ac:	61 1d       	adc	r22, r1
    11ae:	23 1f       	adc	r18, r19
    11b0:	84 9f       	mul	r24, r20
    11b2:	60 0d       	add	r22, r0
    11b4:	21 1d       	adc	r18, r1
    11b6:	82 2f       	mov	r24, r18
    11b8:	76 2f       	mov	r23, r22
    11ba:	6a 2f       	mov	r22, r26
    11bc:	11 24       	eor	r1, r1
    11be:	9f 57       	subi	r25, 0x7F	; 127
    11c0:	50 40       	sbci	r21, 0x00	; 0
    11c2:	9a f0       	brmi	.+38     	; 0x11ea <__mulsf3_pse+0x88>
    11c4:	f1 f0       	breq	.+60     	; 0x1202 <__mulsf3_pse+0xa0>
    11c6:	88 23       	and	r24, r24
    11c8:	4a f0       	brmi	.+18     	; 0x11dc <__mulsf3_pse+0x7a>
    11ca:	ee 0f       	add	r30, r30
    11cc:	ff 1f       	adc	r31, r31
    11ce:	bb 1f       	adc	r27, r27
    11d0:	66 1f       	adc	r22, r22
    11d2:	77 1f       	adc	r23, r23
    11d4:	88 1f       	adc	r24, r24
    11d6:	91 50       	subi	r25, 0x01	; 1
    11d8:	50 40       	sbci	r21, 0x00	; 0
    11da:	a9 f7       	brne	.-22     	; 0x11c6 <__mulsf3_pse+0x64>
    11dc:	9e 3f       	cpi	r25, 0xFE	; 254
    11de:	51 05       	cpc	r21, r1
    11e0:	80 f0       	brcs	.+32     	; 0x1202 <__mulsf3_pse+0xa0>
    11e2:	0c 94 dc 07 	jmp	0xfb8	; 0xfb8 <__fp_inf>
    11e6:	0c 94 8d 08 	jmp	0x111a	; 0x111a <__fp_szero>
    11ea:	5f 3f       	cpi	r21, 0xFF	; 255
    11ec:	e4 f3       	brlt	.-8      	; 0x11e6 <__mulsf3_pse+0x84>
    11ee:	98 3e       	cpi	r25, 0xE8	; 232
    11f0:	d4 f3       	brlt	.-12     	; 0x11e6 <__mulsf3_pse+0x84>
    11f2:	86 95       	lsr	r24
    11f4:	77 95       	ror	r23
    11f6:	67 95       	ror	r22
    11f8:	b7 95       	ror	r27
    11fa:	f7 95       	ror	r31
    11fc:	e7 95       	ror	r30
    11fe:	9f 5f       	subi	r25, 0xFF	; 255
    1200:	c1 f7       	brne	.-16     	; 0x11f2 <__mulsf3_pse+0x90>
    1202:	fe 2b       	or	r31, r30
    1204:	88 0f       	add	r24, r24
    1206:	91 1d       	adc	r25, r1
    1208:	96 95       	lsr	r25
    120a:	87 95       	ror	r24
    120c:	97 f9       	bld	r25, 7
    120e:	08 95       	ret

00001210 <sin>:
    1210:	9f 93       	push	r25
    1212:	0e 94 1c 08 	call	0x1038	; 0x1038 <__fp_rempio2>
    1216:	0f 90       	pop	r0
    1218:	07 fc       	sbrc	r0, 7
    121a:	ee 5f       	subi	r30, 0xFE	; 254
    121c:	0c 94 56 08 	jmp	0x10ac	; 0x10ac <__fp_sinus>
    1220:	19 f4       	brne	.+6      	; 0x1228 <sin+0x18>
    1222:	16 f4       	brtc	.+4      	; 0x1228 <sin+0x18>
    1224:	0c 94 e2 07 	jmp	0xfc4	; 0xfc4 <__fp_nan>
    1228:	0c 94 5a 09 	jmp	0x12b4	; 0x12b4 <__fp_mpack>

0000122c <sqrt>:
    122c:	0e 94 72 08 	call	0x10e4	; 0x10e4 <__fp_splitA>
    1230:	b8 f3       	brcs	.-18     	; 0x1220 <sin+0x10>
    1232:	99 23       	and	r25, r25
    1234:	c9 f3       	breq	.-14     	; 0x1228 <sin+0x18>
    1236:	b6 f3       	brts	.-20     	; 0x1224 <sin+0x14>
    1238:	9f 57       	subi	r25, 0x7F	; 127
    123a:	55 0b       	sbc	r21, r21
    123c:	87 ff       	sbrs	r24, 7
    123e:	0e 94 68 09 	call	0x12d0	; 0x12d0 <__fp_norm2>
    1242:	00 24       	eor	r0, r0
    1244:	a0 e6       	ldi	r26, 0x60	; 96
    1246:	40 ea       	ldi	r20, 0xA0	; 160
    1248:	90 01       	movw	r18, r0
    124a:	80 58       	subi	r24, 0x80	; 128
    124c:	56 95       	lsr	r21
    124e:	97 95       	ror	r25
    1250:	28 f4       	brcc	.+10     	; 0x125c <sqrt+0x30>
    1252:	80 5c       	subi	r24, 0xC0	; 192
    1254:	66 0f       	add	r22, r22
    1256:	77 1f       	adc	r23, r23
    1258:	88 1f       	adc	r24, r24
    125a:	20 f0       	brcs	.+8      	; 0x1264 <sqrt+0x38>
    125c:	26 17       	cp	r18, r22
    125e:	37 07       	cpc	r19, r23
    1260:	48 07       	cpc	r20, r24
    1262:	30 f4       	brcc	.+12     	; 0x1270 <sqrt+0x44>
    1264:	62 1b       	sub	r22, r18
    1266:	73 0b       	sbc	r23, r19
    1268:	84 0b       	sbc	r24, r20
    126a:	20 29       	or	r18, r0
    126c:	31 29       	or	r19, r1
    126e:	4a 2b       	or	r20, r26
    1270:	a6 95       	lsr	r26
    1272:	17 94       	ror	r1
    1274:	07 94       	ror	r0
    1276:	20 25       	eor	r18, r0
    1278:	31 25       	eor	r19, r1
    127a:	4a 27       	eor	r20, r26
    127c:	58 f7       	brcc	.-42     	; 0x1254 <sqrt+0x28>
    127e:	66 0f       	add	r22, r22
    1280:	77 1f       	adc	r23, r23
    1282:	88 1f       	adc	r24, r24
    1284:	20 f0       	brcs	.+8      	; 0x128e <sqrt+0x62>
    1286:	26 17       	cp	r18, r22
    1288:	37 07       	cpc	r19, r23
    128a:	48 07       	cpc	r20, r24
    128c:	30 f4       	brcc	.+12     	; 0x129a <sqrt+0x6e>
    128e:	62 0b       	sbc	r22, r18
    1290:	73 0b       	sbc	r23, r19
    1292:	84 0b       	sbc	r24, r20
    1294:	20 0d       	add	r18, r0
    1296:	31 1d       	adc	r19, r1
    1298:	41 1d       	adc	r20, r1
    129a:	a0 95       	com	r26
    129c:	81 f7       	brne	.-32     	; 0x127e <sqrt+0x52>
    129e:	b9 01       	movw	r22, r18
    12a0:	84 2f       	mov	r24, r20
    12a2:	91 58       	subi	r25, 0x81	; 129
    12a4:	88 0f       	add	r24, r24
    12a6:	96 95       	lsr	r25
    12a8:	87 95       	ror	r24
    12aa:	08 95       	ret

000012ac <square>:
    12ac:	9b 01       	movw	r18, r22
    12ae:	ac 01       	movw	r20, r24
    12b0:	0c 94 9b 08 	jmp	0x1136	; 0x1136 <__mulsf3>

000012b4 <__fp_mpack>:
    12b4:	9f 3f       	cpi	r25, 0xFF	; 255
    12b6:	31 f0       	breq	.+12     	; 0x12c4 <__fp_mpack_finite+0xc>

000012b8 <__fp_mpack_finite>:
    12b8:	91 50       	subi	r25, 0x01	; 1
    12ba:	20 f4       	brcc	.+8      	; 0x12c4 <__fp_mpack_finite+0xc>
    12bc:	87 95       	ror	r24
    12be:	77 95       	ror	r23
    12c0:	67 95       	ror	r22
    12c2:	b7 95       	ror	r27
    12c4:	88 0f       	add	r24, r24
    12c6:	91 1d       	adc	r25, r1
    12c8:	96 95       	lsr	r25
    12ca:	87 95       	ror	r24
    12cc:	97 f9       	bld	r25, 7
    12ce:	08 95       	ret

000012d0 <__fp_norm2>:
    12d0:	91 50       	subi	r25, 0x01	; 1
    12d2:	50 40       	sbci	r21, 0x00	; 0
    12d4:	66 0f       	add	r22, r22
    12d6:	77 1f       	adc	r23, r23
    12d8:	88 1f       	adc	r24, r24
    12da:	d2 f7       	brpl	.-12     	; 0x12d0 <__fp_norm2>
    12dc:	08 95       	ret

000012de <__fp_powsodd>:
    12de:	9f 93       	push	r25
    12e0:	8f 93       	push	r24
    12e2:	7f 93       	push	r23
    12e4:	6f 93       	push	r22
    12e6:	ff 93       	push	r31
    12e8:	ef 93       	push	r30
    12ea:	9b 01       	movw	r18, r22
    12ec:	ac 01       	movw	r20, r24
    12ee:	0e 94 9b 08 	call	0x1136	; 0x1136 <__mulsf3>
    12f2:	ef 91       	pop	r30
    12f4:	ff 91       	pop	r31
    12f6:	0e 94 e5 07 	call	0xfca	; 0xfca <__fp_powser>
    12fa:	2f 91       	pop	r18
    12fc:	3f 91       	pop	r19
    12fe:	4f 91       	pop	r20
    1300:	5f 91       	pop	r21
    1302:	0c 94 9b 08 	jmp	0x1136	; 0x1136 <__mulsf3>

00001306 <atoi>:
    1306:	fc 01       	movw	r30, r24
    1308:	88 27       	eor	r24, r24
    130a:	99 27       	eor	r25, r25
    130c:	e8 94       	clt
    130e:	21 91       	ld	r18, Z+
    1310:	20 32       	cpi	r18, 0x20	; 32
    1312:	e9 f3       	breq	.-6      	; 0x130e <atoi+0x8>
    1314:	29 30       	cpi	r18, 0x09	; 9
    1316:	10 f0       	brcs	.+4      	; 0x131c <atoi+0x16>
    1318:	2e 30       	cpi	r18, 0x0E	; 14
    131a:	c8 f3       	brcs	.-14     	; 0x130e <atoi+0x8>
    131c:	2b 32       	cpi	r18, 0x2B	; 43
    131e:	41 f0       	breq	.+16     	; 0x1330 <atoi+0x2a>
    1320:	2d 32       	cpi	r18, 0x2D	; 45
    1322:	39 f4       	brne	.+14     	; 0x1332 <atoi+0x2c>
    1324:	68 94       	set
    1326:	04 c0       	rjmp	.+8      	; 0x1330 <atoi+0x2a>
    1328:	0e 94 c2 09 	call	0x1384	; 0x1384 <__mulhi_const_10>
    132c:	82 0f       	add	r24, r18
    132e:	91 1d       	adc	r25, r1
    1330:	21 91       	ld	r18, Z+
    1332:	20 53       	subi	r18, 0x30	; 48
    1334:	2a 30       	cpi	r18, 0x0A	; 10
    1336:	c0 f3       	brcs	.-16     	; 0x1328 <atoi+0x22>
    1338:	1e f4       	brtc	.+6      	; 0x1340 <atoi+0x3a>
    133a:	90 95       	com	r25
    133c:	81 95       	neg	r24
    133e:	9f 4f       	sbci	r25, 0xFF	; 255
    1340:	08 95       	ret

00001342 <strchr>:
    1342:	fc 01       	movw	r30, r24
    1344:	81 91       	ld	r24, Z+
    1346:	86 17       	cp	r24, r22
    1348:	21 f0       	breq	.+8      	; 0x1352 <strchr+0x10>
    134a:	88 23       	and	r24, r24
    134c:	d9 f7       	brne	.-10     	; 0x1344 <strchr+0x2>
    134e:	99 27       	eor	r25, r25
    1350:	08 95       	ret
    1352:	31 97       	sbiw	r30, 0x01	; 1
    1354:	cf 01       	movw	r24, r30
    1356:	08 95       	ret

00001358 <strcpy>:
    1358:	fb 01       	movw	r30, r22
    135a:	dc 01       	movw	r26, r24
    135c:	01 90       	ld	r0, Z+
    135e:	0d 92       	st	X+, r0
    1360:	00 20       	and	r0, r0
    1362:	e1 f7       	brne	.-8      	; 0x135c <strcpy+0x4>
    1364:	08 95       	ret

00001366 <strncpy>:
    1366:	fb 01       	movw	r30, r22
    1368:	dc 01       	movw	r26, r24
    136a:	41 50       	subi	r20, 0x01	; 1
    136c:	50 40       	sbci	r21, 0x00	; 0
    136e:	48 f0       	brcs	.+18     	; 0x1382 <strncpy+0x1c>
    1370:	01 90       	ld	r0, Z+
    1372:	0d 92       	st	X+, r0
    1374:	00 20       	and	r0, r0
    1376:	c9 f7       	brne	.-14     	; 0x136a <strncpy+0x4>
    1378:	01 c0       	rjmp	.+2      	; 0x137c <strncpy+0x16>
    137a:	1d 92       	st	X+, r1
    137c:	41 50       	subi	r20, 0x01	; 1
    137e:	50 40       	sbci	r21, 0x00	; 0
    1380:	e0 f7       	brcc	.-8      	; 0x137a <strncpy+0x14>
    1382:	08 95       	ret

00001384 <__mulhi_const_10>:
    1384:	7a e0       	ldi	r23, 0x0A	; 10
    1386:	97 9f       	mul	r25, r23
    1388:	90 2d       	mov	r25, r0
    138a:	87 9f       	mul	r24, r23
    138c:	80 2d       	mov	r24, r0
    138e:	91 0d       	add	r25, r1
    1390:	11 24       	eor	r1, r1
    1392:	08 95       	ret

00001394 <_exit>:
    1394:	f8 94       	cli

00001396 <__stop_program>:
    1396:	ff cf       	rjmp	.-2      	; 0x1396 <__stop_program>
